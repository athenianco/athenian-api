openapi: 3.0.0
info:
  version: 1.0.0
  title: Athenian Dashboard API
  license:
    name: Proprietary until Eiso decides on licensing
servers:
  - url: https://api.athenian.co/v1
paths:
  /metrics:
    post:
      summary: Calculate metrics.
      operationId: calcMetrics
      requestBody:
        description: Desired metric definitions.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetricsRequest"
      responses:
        "200":
          description: Calculated metrics.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CalculatedMetrics"
        "400":
          description: The request was invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestError"
        "404":
          description: No data is available to calculate metrics for the given repositories.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoSourceDataError"
components:
  schemas:
    InvalidRequestError:
      type: object
      required:
        - error
        - pointer
      properties:
        error:
          description: Why the server thinks the request is invalid.
          type:
            string
          example: "Unknown granularity value: \"year\"."
        pointer:
          description: Path to the offending request item.
          type:
            string
          example: ".granularity"
    NoSourceDataError:
      type: object
      required:
        - error
        - repositories
      properties:
        error:
          description: Why the server cannot fulfill the request.
          type:
            string
          example: "No data for some requested repositories."
        repositories:
          $ref: "#/components/schemas/RepositorySet"
    MetricID:
      type: string
      description: Currently supported metric types.
      enum: ["pr-time-to-review", "pr-time-to-merge", "pr-time-to-release", "pr-lead-time"]
    DeveloperID:
      type: string
      description: |
        User name which uniquely identifies any developer on any service provider.
        The format matches the profile URL without the protocol part.
      example: "github.com/vmarkovtsev"
    RepositoryID:
      type: string
      description: |
        Repository name which uniquely identifies any repository in any service provider.
        The format matches the repository URL without the protocol part. No ".git" should be appended.
      example: "github.com/src-d/go-git"
    DeveloperSet:
      description: A set of developers. The special value \"all\" denotes everybody.
      type: array
      items:
        $ref: "#/components/schemas/DeveloperID"
      example: ["github.com/vmarkovtsev", "github.com/mcuadros"]
    RepositorySet:
      type: array
      description: A set of repositories.
      items:
        $ref: "#/components/schemas/RepositoryID"
      example: ["github.com/src-d/hercules", "github.com/athenianco/athenian-api"]
    ForSet:
      type: object
      required:
        - developers
        - repositories
      properties:
        developers:
          $ref: "#/components/schemas/DeveloperSet"
        repositories:
          $ref: "#/components/schemas/RepositorySet"
    Granularity:
      type: string
      description: How often the metrics are reported.
      enum: [day, week, month]
    MetricsRequest:
      type: object
      required:
        - for
        - metrics
        - date_from
        - date_to
        - granularity
      properties:
        for:
          description: Sets of developers and repositories to calculate the metrics for.
          type: array
          items:
            $ref: "#/components/schemas/ForSet"
        metrics:
          type: array
          description: "Requested metric identifiers."
          items:
            $ref: "#/components/schemas/MetricID"
        date_from:
          type: string
          description: The date from when to start measuring the metrics.
          format: date
        date_to:
          type: string
          description: The date up to which to measure the metrics.
          format: date
        granularity:
          $ref: "#/components/schemas/Granularity"
    CalculatedMetric:
      type: object
      required:
        - for
        - values
      properties:
        for:
          $ref: "#/components/schemas/ForSet"
        values:
          type: array
          items:
            type: object
            required:
              - date
              - values
            properties:
              date:
                type: string
                description: Where you should relate the metric value to on the time axis.
                format: date
              values:
                type: array
                description: The same order as `metrics`.
                items:
                  type: number
                  format: float
    CalculatedMetrics:
      type: object
      required:
        - calculated
        - matrics
        - date_from
        - date_to
        - granularity
      properties:
        calculated:
          type: array
          description: The values of the requested metrics through time.
          items:
            $ref: "#/components/schemas/CalculatedMetric"
        metrics:
          type: array
          description: Repeats `MetricsRequest.metrics`.
          items:
            $ref: "#/components/schemas/MetricID"
        date_from:
          type: string
          description: Repeats `MetricsRequest.date_from`.
          format: date
        date_to:
          type: string
          description: Repeats `MetricsRequest.date_to`.
          format: date
        granularity:
          $ref: "#/components/schemas/Granularity"