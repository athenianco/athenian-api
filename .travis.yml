language: python
python: 3.7
sudo: true
dist: bionic
branches:
  only:
  - master

env:
  global:
    - GOOGLE_DOCKER_IMAGE=gcr.io/athenian-1/api

cache:
  directories:
    - "$HOME/.cache/pip"
    - "$HOME/google-cloud-sdk/"
    - "$HOME/docker"

before_cache:
  - chown -R travis:travis $HOME/.cache/pip
  - docker save -o $HOME/docker/images.tar ${GOOGLE_DOCKER_IMAGE}:latest

stages:
  - main
  - bump-version

_install: &_install
  - sudo sed -i 's/-m 64/-m 128/g' /etc/memcached.conf
  - sudo sed -i 's/-I 1m/-I 64m/g' /etc/memcached.conf
  - sudo systemctl start memcached
  - cd server
  - pip install -r requirements.txt
  - pip install -r lint-requirements.txt
  - pip install -r test-requirements.txt
  - pip install -e .

_setup_postgres: &_setup_postgres
  - psql -c "create database state template 'template0' lc_collate 'C.UTF-8';" -U postgres
  - psql -c "create database metadata template 'template0' lc_collate 'C.UTF-8';" -U postgres
  - psql -c "create database precomputed template 'template0' lc_collate 'C.UTF-8';" -U postgres
  - export OVERRIDE_SDB=postgresql://postgres:postgres@0.0.0.0:5432/state
  - export OVERRIDE_MDB=postgresql://postgres:postgres@0.0.0.0:5432/metadata
  - export OVERRIDE_PDB=postgresql://postgres:postgres@0.0.0.0:5432/precomputed

matrix:
  fast_finish: true
  include:
    - if: commit_message !~ /Bump version/
      stage: main
      name: Unit tests (1/4 - sqlite, style checks)
      install: *_install
      script:
        - set -e
        - flake8
        - python3 -m athenian.api.models.web
        - git status --porcelain
        - test -z "$(git status --porcelain)"  # server/athenian/api/models/web/__init__.py must match the autogenerated code
        - (! grep -R 'athenian\.api\.models' athenian/api/models/state/versions)
        - (! grep -R 'athenian\.api\.models' athenian/api/models/precomputed/versions)
        - PYTHONPATH=. python3 tests/gen_sqlite_db.py
        - coverage run --source athenian.api -m athenian.api.hacks.heat_cache --metadata-db=sqlite:///tests/mdb.sqlite --state-db=sqlite:///tests/sdb.sqlite --precomputed-db=sqlite:///tests/pdb.sqlite --memcached=0.0.0.0:11211
        - coverage xml
        - pytest --cov-report=xml --cov=athenian.api --cov-append --ignore=tests/controllers/test_filter_controller.py --ignore=tests/controllers/test_metrics_controller.py
        - set +e
      after_success:
        - codecov
    - if: commit_message !~ /Bump version/
      stage: main
      name: Unit tests (2/4 - postgresql)
      services:
        - postgresql
      install: *_install
      before_script: *_setup_postgres
      script:
        - set -e
        - export SLACK_API_TOKEN=xxx
        - pytest --cov-report=xml --cov=athenian.api --ignore=tests/controllers/test_filter_controller.py --ignore=tests/controllers/test_metrics_controller.py
        - set +e
      after_success:
        - codecov
    - if: commit_message !~ /Bump version/
      stage: main
      name: Unit tests (3/4 - sqlite)
      install: *_install
      script:
        - set -e
        - pytest --cov-report=xml --cov=athenian.api tests/controllers/test_filter_controller.py tests/controllers/test_metrics_controller.py
        - set +e
      after_success:
        - codecov
    - if: commit_message !~ /Bump version/
      stage: main
      name: Unit tests (4/4 - postgresql)
      services:
        - postgresql
      install: *_install
      before_script: *_setup_postgres
      script:
        - set -e
        - export SLACK_API_TOKEN=
        - pytest --cov-report=xml --cov=athenian.api tests/controllers/test_filter_controller.py tests/controllers/test_metrics_controller.py
        - set +e
      after_success:
        - codecov
    - if: commit_message !~ /Bump version/
      stage: main
      name: Auto generated js client tests
      script:
        - docker run --rm -v `pwd`:/local --user `id -u`:`id -g` openapitools/openapi-generator-cli generate --input-spec=/local/spec/openapi.yaml --generator-name=javascript --output=/local/js-client
        - npm --prefix js-client install
        - npm --prefix js-client test
    - if: commit_message !~ /Bump version/
      stage: main
      name: Docker build/env setup tests
      services:
        - postgresql
      before_install:
        - docker load -i $HOME/docker/images.tar || true
        - docker image list
      install:
        - pip3 install codecov coverage
        - docker build --cache-from ${GOOGLE_DOCKER_IMAGE}:latest --build-arg COMMIT=$TRAVIS_COMMIT -t ${GOOGLE_DOCKER_IMAGE} .
      before_script: *_setup_postgres
      script:
        - docker run --rm ${GOOGLE_DOCKER_IMAGE} --help
        - docker build -t test --build-arg base=${GOOGLE_DOCKER_IMAGE} server/tests
        - run="docker run --network=host --rm -v $(pwd):/io -w /io --entrypoint python3 -e ATHENIAN_INVITATION_KEY=777 -e ATHENIAN_INVITATION_URL_PREFIX=https://app.athenian.co/i/ test -m coverage"
        - $run run -a -m athenian.api.models.state postgres://postgres:@0.0.0.0:5432/state
        - $run run -a -m athenian.api.invite_admin postgres://postgres:@0.0.0.0:5432/state
        - $run run -a /usr/local/bin/alembic downgrade 34eafe9e7cd9
        - $run run -a -m athenian.api.models.precomputed postgres://postgres:@0.0.0.0:5432/precomputed
        - $run run -a /usr/local/bin/alembic downgrade c863ffad47fb
        - $run combine
        - $run xml
        - docker rmi test
        - sed -i 's/[\./]server[\./]//g' coverage.xml
      after_success:
        - codecov
    - if: branch = master AND type != pull_request AND commit_message !~ /Bump version/
      stage: bump-version
      name: Bump the version
      install:
        - git config --global user.name "Groundskeeper Willie"
        - git config --global user.email "bot@athenian.co"
        - pip install bump2version
      script:
        - set -e
        - if git diff --name-only HEAD^...HEAD | grep openapi.yaml; then spec_bump=required; fi
        - git pull --no-edit origin master
        - if [ "$spec_bump" = "required" ]; then
            version_file=spec/openapi.yaml;
            current_version=$(grep -m1 '^  version:' $version_file | cut -d" " -f4);
            bumpversion --current-version $current_version patch $version_file;
            spec_bump=$(grep -m1 '^  version:' $version_file | cut -d" " -f4);
          fi
        - version_file=server/athenian/api/metadata.py
        - current_version=$(grep __version__ $version_file | cut -d\" -f2)
        - bumpversion --tag --current-version $current_version --commit --allow-dirty --commit-args="-a" patch $version_file
        - if [ ! -z "$spec_bump" ]; then git tag "spec-$spec_bump"; fi
        - git remote add gkwillie https://gkwillie:${GKWILLIE_TOKEN}@github.com/$TRAVIS_REPO_SLUG
        - git push --tags gkwillie HEAD:master
        - set +e
    - if: branch = master AND type != pull_request AND commit_message =~ /^Bump version/
      stage: main
      name: Deploy
      install:
        - curl -sL https://sentry.io/get-cli/ | bash
      script:
        - set -e
        - version_file=server/athenian/api/metadata.py
        - current_version=$(grep __version__ $version_file | cut -d\" -f2)
        - sentry-cli releases new -p $SENTRY_PROJECT $current_version
        - sentry-cli releases set-commits --auto $current_version
        - export IMAGE=${GOOGLE_DOCKER_IMAGE}:$current_version
        - make gcloud-login
        - docker load -i $HOME/docker/images.tar || true
        - docker image list
        - docker build --cache-from ${GOOGLE_DOCKER_IMAGE}:latest --build-arg COMMIT=$TRAVIS_COMMIT -t $IMAGE .
        - make docker-push
        - make pubsub-publish
        - docker tag $IMAGE ${GOOGLE_DOCKER_IMAGE}
        - IMAGE=${GOOGLE_DOCKER_IMAGE} make docker-push
        - sentry-cli releases finalize $current_version
        - set +e

notifications:
  email: false