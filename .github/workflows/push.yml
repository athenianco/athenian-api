name: Push

on:
  push:
    branches:
    - master
    - legacy
  pull_request_target:

env:
  PIP_CACHE: |
    ~/.cache/pip
    ~/.local/bin
    ~/.local/lib/python3.*/site-packages

jobs:
  flake8:
    name: flake8 + semgrep
    if: "!contains(github.event.head_commit.message, 'Bump version') || github.event_name != 'push'"
    runs-on: ubuntu-20.04
    steps:
    - uses: tspascoal/get-user-teams-membership@v1
      id: membership
      if: ${{ github.actor != 'dependabot[bot]' }}
      with:
        username: ${{ github.actor }}
        team: 'team'
        GITHUB_TOKEN: ${{ secrets.READ_ORG_TOKEN }}
    - name: actions/checkout
      uses: actions/checkout@v2
      if: ${{ github.event_name != 'pull_request_target' }}
      with:
        submodules: true
    - name: actions/checkout
      uses: actions/checkout@v2
      if: ${{ github.event_name == 'pull_request_target' && (github.actor == 'dependabot[bot]' || steps.membership.outputs.isTeamMember) }}
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        submodules: true
    - name: actions/cache
      uses: actions/cache@v2
      with:
        path: ${{ env.PIP_CACHE }}
        key: ubuntu-20.04-pip-lint-${{ hashFiles('server/requirements-lint.txt') }}
        restore-keys: ubuntu-20.04-pip-lint-
    - name: pip
      run: |
        pip3 install -r server/requirements-lint.txt --no-warn-script-location
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    - name: flake8
      working-directory: server
      run: flake8
    - name: semgrep security
      working-directory: server
      run: semgrep --config p/r2c-security-audit --severity ERROR --disable-version-check --error
  custom_checks:
    name: custom checks
    if: "!contains(github.event.head_commit.message, 'Bump version') || github.event_name != 'push'"
    runs-on: ubuntu-20.04
    steps:
    - uses: tspascoal/get-user-teams-membership@v1
      id: membership
      if: ${{ github.actor != 'dependabot[bot]' }}
      with:
        username: ${{ github.actor }}
        team: 'team'
        GITHUB_TOKEN: ${{ secrets.READ_ORG_TOKEN }}
    - name: actions/checkout
      uses: actions/checkout@v2
      if: ${{ github.event_name != 'pull_request_target' }}
      with:
        submodules: true
    - name: actions/checkout
      uses: actions/checkout@v2
      if: ${{ github.event_name == 'pull_request_target' && (github.actor == 'dependabot[bot]' || steps.membership.outputs.isTeamMember) }}
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        submodules: true
    - name: actions/cache
      uses: actions/cache@v2
      with:
        path: ${{ env.PIP_CACHE }}
        key: ubuntu-20.04-pip-main-${{ hashFiles('server/requirements.txt') }}
        restore-keys: ubuntu-20.04-pip-main-
    - name: pip
      run: |
        set -x
        sed -i "s/git+ssh:\/\/git@/git+https:\/\/gkwillie:${{ secrets.GKWILLIE_TOKEN }}@/g" server/requirements.txt
        pip3 install -r server/requirements.txt --no-warn-script-location
        git checkout -f server/requirements.txt
        sudo pip3 install -e server/
    - name: web models
      working-directory: server
      run: |
        set -x
        python3 -m athenian.api.models.web
        git status --porcelain
        test -z "$(git status --porcelain)"
    - name: migrations
      working-directory: server
      run: |
        (! grep -R 'athenian\.api\.models' athenian/api/models/state/versions)
  test:
    name: test
    if: "!contains(github.event.head_commit.message, 'Bump version') || github.event_name != 'push'"
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        db: [sqlite, postgres]
        type: [heater, slim, fat, fat-metrics, fat-preloading]
      fail-fast: false
    services:
      memcached:
        image: bitnami/memcached:latest
        ports:
        - 11211:11211
        env:
          MEMCACHED_EXTRA_FLAGS: -m 128 -I 64m
      postgres:
        image: postgres:11.8
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
        - 5432:5432
        options: >-
          --mount type=tmpfs,destination=/var/lib/postgresql/data
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 1s
          --health-retries 10
          --health-start-period 2s
    env:
      SDB: sqlite:///tests/sdb-master.sqlite
      MDB: sqlite:///tests/mdb-master.sqlite
      PDB: sqlite:///tests/pdb-master.sqlite
      RDB: sqlite:///tests/rdb-master.sqlite
    steps:
    - uses: tspascoal/get-user-teams-membership@v1
      id: membership
      if: ${{ github.actor != 'dependabot[bot]' }}
      with:
        username: ${{ github.actor }}
        team: 'team'
        GITHUB_TOKEN: ${{ secrets.READ_ORG_TOKEN }}
    - name: actions/checkout
      uses: actions/checkout@v2
      if: ${{ github.event_name != 'pull_request_target' }}
      with:
        submodules: true
    - name: actions/checkout
      uses: actions/checkout@v2
      if: ${{ github.event_name == 'pull_request_target' && (github.actor == 'dependabot[bot]' || steps.membership.outputs.isTeamMember) }}
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        submodules: true
    - name: actions/cache pip
      uses: actions/cache@v2
      with:
        path: ${{ env.PIP_CACHE }}
        key: ubuntu-20.04-pip-main-${{ hashFiles('server/requirements.txt', 'requirements-test.txt') }}
        restore-keys: ubuntu-20.04-pip-main-
    - name: godotenv
      run: |
        set -x
        if [ ! -e $HOME/.local/bin/godotenv ]; then \
          mkdir -p $HOME/.local/bin && ls $HOME/.local/bin && \
          wget -O - https://github.com/athenianco/godotenv/releases/download/1.3.0-secure/godotenv.gz | gzip -d >$HOME/.local/bin/godotenv && \
          chmod +x $HOME/.local/bin/godotenv; \
        fi
    - name: pip
      run: |
        set -x
        sed -i "s/git+ssh:\/\/git@/git+https:\/\/gkwillie:${{ secrets.GKWILLIE_TOKEN }}@/g" server/requirements.txt
        pip3 install -r server/requirements.txt --no-warn-script-location
        pip3 install -r server/requirements-test.txt --no-warn-script-location
        sudo pip3 install -e server/
        patch --forward $HOME/.local/lib/python3.*/site-packages/aiomcache/client.py patches/aiomcache_version.patch || true
        patch --forward $HOME/.local/lib/python3.*/site-packages/prometheus_client/exposition.py patches/prometheus_client.patch || true
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    - name: setup postgres
      if: matrix.db == 'postgres'
      env:
        PGPASSWORD: postgres
        SDB: postgresql://postgres:postgres@0.0.0.0:5432/state_%s?min_size=2&max_size=3
        MDB: postgresql://postgres:postgres@0.0.0.0:5432/metadata_%s?min_size=2&max_size=8
        PDB: postgresql://postgres:postgres@0.0.0.0:5432/precomputed_%s?min_size=2&max_size=6
        RDB: postgresql://postgres:postgres@0.0.0.0:5432/persistentdata_%s?min_size=2&max_size=5
      run: |
        set -x
        for db in state metadata precomputed persistentdata; do
          for i in $(seq 0 3); do
            psql -c "create database ${db}_gw$i template 'template0' lc_collate 'C.UTF-8';" -U postgres -h 0.0.0.0 -p 5432
          done
          psql -c "create database ${db}_master template 'template0' lc_collate 'C.UTF-8';" -U postgres -h 0.0.0.0 -p 5432
        done
        echo "SDB=$SDB" >> $GITHUB_ENV
        echo "MDB=$MDB" >> $GITHUB_ENV
        echo "PDB=$PDB" >> $GITHUB_ENV
        echo "RDB=$RDB" >> $GITHUB_ENV
        echo "OVERRIDE_SDB=$SDB" >> $GITHUB_ENV
        echo "OVERRIDE_MDB=$MDB" >> $GITHUB_ENV
        echo "OVERRIDE_PDB=$PDB" >> $GITHUB_ENV
        echo "OVERRIDE_RDB=$RDB" >> $GITHUB_ENV
    - name: setup Google KMS
      run: |
        echo '${{ secrets.GOOGLE_KMS_SERVICE_ACCOUNT_B64 }}' | base64 -d > google_service.json
        echo "GOOGLE_KMS_SERVICE_ACCOUNT_JSON=`pwd`/google_service.json" >> $GITHUB_ENV
    - name: setup env
      working-directory: server
      run: |
        echo 'AUTH0_AUDIENCE=${{ secrets.AUTH0_AUDIENCE }}' >>.env
        echo 'AUTH0_CLIENT_ID=${{ secrets.AUTH0_CLIENT_ID }}' >>.env
        echo 'AUTH0_CLIENT_SECRET=${{ secrets.AUTH0_CLIENT_SECRET }}' >>.env
        echo 'AUTH0_DOMAIN=${{ secrets.AUTH0_DOMAIN }}' >>.env
        echo 'GOOGLE_KMS_KEYNAME=${{ secrets.GOOGLE_KMS_KEYNAME }}' >>.env
        echo 'GOOGLE_KMS_KEYRING=${{ secrets.GOOGLE_KMS_KEYRING }}' >>.env
        echo 'GOOGLE_KMS_PROJECT=${{ secrets.GOOGLE_PROJECT }}' >>.env
        echo 'SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}' >>.env
        echo 'SENTRY_ORG=${{ secrets.SENTRY_ORG }}' >>.env
        echo 'SENTRY_PROJECT=${{ secrets.SENTRY_PROJECT }}' >>.env
        echo 'SLACK_API_TOKEN=${{ secrets.SLACK_API_TOKEN }}' >>.env
        echo 'SLACK_CHANNEL="${{ secrets.SLACK_CHANNEL }}"' >>.env
    - name: test slim
      if: matrix.type == 'slim'
      working-directory: server
      run: |
        set -x
        if [ ${{ matrix.db }} = "postgres" ]; then
          export SLACK_API_TOKEN=xxx
        fi
        godotenv -s pytest -n 4 --log-level=info --benchmark-skip --cov-report=xml --cov=athenian.api --ignore=tests/controllers/test_filter_controller.py --ignore=tests/controllers/test_metrics_controller.py --ignore=tests/controllers/test_histograms_controller.py --ignore=tests/controllers/test_pagination_controller.py --ignore=tests/controllers/test_jira_controller.py
    - name: test fat
      if: matrix.type == 'fat'
      working-directory: server
      run: |
        set -x
        # if [ ${{ matrix.db }} = "sqlite" ]; then
        #   export LIMIT="--limit 0.9"
        # fi
        if [ ${{ matrix.db }} = "postgres" ]; then
          export SLACK_API_TOKEN=
        else
          # SQLite tests execute faster than Postgres
          metrics_test=tests/controllers/test_metrics_controller.py
        fi
        godotenv -s pytest -n 4 $LIMIT --log-level=info --cov-report=xml --cov=athenian.api tests/controllers/test_filter_controller.py $metrics_test tests/controllers/test_histograms_controller.py tests/controllers/test_pagination_controller.py tests/controllers/test_jira_controller.py
    - name: test fat-metrics
      if: matrix.type == 'fat-metrics' && matrix.db == 'postgres'
      working-directory: server
      run: |
        set -x
        export SLACK_API_TOKEN=
        godotenv -s pytest -n 4 $LIMIT --log-level=info --cov-report=xml --cov=athenian.api tests/controllers/test_metrics_controller.py
    - name: test fat with preloading
      if: matrix.type == 'fat-preloading'
      working-directory: server
      run: |
        set -x
        export WITH_PRELOADING=1
        export SLACK_API_TOKEN=
        godotenv -s pytest -n 4 $LIMIT --log-level=info --benchmark-skip --cov-report=xml --cov=athenian.api tests/controllers/test_metrics_controller.py tests/controllers/test_histograms_controller.py tests/controllers/miners
    - name: test heater
      if: matrix.type == 'heater'
      working-directory: server
      env:
        ATHENIAN_JIRA_INSTALLATION_URL_TEMPLATE: https://whatever-jira/%s
      run: |
        set -x
        export SDB=${SDB/\%s/master}
        export MDB=${MDB/\%s/master}
        export PDB=${PDB/\%s/master}
        export RDB=${RDB/\%s/master}
        export OVERRIDE_SDB=$SDB
        export OVERRIDE_PDB=$PDB
        export OVERRIDE_RDB=$RDB
        PYTHONPATH=. PRECOMPUTED=0 godotenv -s python3 tests/gen_mock_db.py
        godotenv -s coverage run --source athenian.api -m athenian.api.hacks.heat_cache --metadata-db=$MDB --state-db=$SDB --precomputed-db=$PDB --persistentdata-db=$RDB --memcached=0.0.0.0:11211
        # the second run should not crash
        godotenv -s python3 -m athenian.api.hacks.heat_cache --metadata-db=$MDB --state-db=$SDB --precomputed-db=$PDB --persistentdata-db=$RDB --memcached=0.0.0.0:11211
        coverage xml
    - name: clear env
      working-directory: server
      run: |
        set -x
        rm .env
    - uses: codecov/codecov-action@v1
      name: codecov
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
  docker:
    name: docker
    if: "!contains(github.event.head_commit.message, 'Bump version') || github.event_name != 'push'"
    runs-on: ubuntu-20.04
    services:
      postgres:
        image: postgres:11.8
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
        - 5432:5432
        options: >-
          --mount type=tmpfs,destination=/var/lib/postgresql/data
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 1s
          --health-retries 10
          --health-start-period 2s
    steps:
    - uses: tspascoal/get-user-teams-membership@v1
      id: membership
      if: ${{ github.actor != 'dependabot[bot]' }}
      with:
        username: ${{ github.actor }}
        team: 'team'
        GITHUB_TOKEN: ${{ secrets.READ_ORG_TOKEN }}
    - name: actions/checkout
      uses: actions/checkout@v2
      if: ${{ github.event_name != 'pull_request_target' }}
      with:
        submodules: true
    - name: actions/checkout
      uses: actions/checkout@v2
      if: ${{ github.event_name == 'pull_request_target' && (github.actor == 'dependabot[bot]' || steps.membership.outputs.isTeamMember) }}
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        submodules: true
    - uses: satackey/action-docker-layer-caching@v0.0.11
      continue-on-error: true
    - name: setup postgres
      env:
        PGPASSWORD: postgres
      run: |
        psql -c "create database state template 'template0' lc_collate 'C.UTF-8';" -U postgres -h 0.0.0.0 -p 5432
        psql -c "create database metadata template 'template0' lc_collate 'C.UTF-8';" -U postgres -h 0.0.0.0 -p 5432
        psql -c "create database precomputed template 'template0' lc_collate 'C.UTF-8';" -U postgres -h 0.0.0.0 -p 5432
    - name: docker build
      run: |
        set -x
        pip3 install --no-cache-dir py-cpuinfo resolve-march-native && \
        cpuinfo && \
        resolve-march-native --vertical && \
        docker build --pull --cache-from gcr.io/${{ secrets.GOOGLE_PROJECT }}/api:latest --build-arg COMMIT=$GITHUB_SHA --build-arg GKWILLIE_TOKEN=${{ secrets.GKWILLIE_TOKEN }} -t gcr.io/${{ secrets.GOOGLE_PROJECT }}/api .
        docker run --rm gcr.io/${{ secrets.GOOGLE_PROJECT }}/api --help
        docker build -t test --build-arg base=gcr.io/${{ secrets.GOOGLE_PROJECT }}/api server/tests
        run="docker run --network=host --rm -v $(pwd):/io -w /io --entrypoint python3 -e ATHENIAN_INVITATION_KEY=777 -e ATHENIAN_INVITATION_URL_PREFIX=https://app.athenian.co/i/ -e ATHENIAN_JIRA_INSTALLATION_URL_TEMPLATE=https://installation.athenian.co/jira/%s/atlassian-connect.json test -m coverage"
        $run run -a -m athenian.api.models.state postgresql://postgres:postgres@0.0.0.0:5432/state
        $run run -a -m athenian.api.invite_admin postgresql://postgres:postgres@0.0.0.0:5432/state
        $run run -a /usr/local/bin/alembic downgrade 34eafe9e7cd9
        $run combine
        $run xml
        docker rmi test
        sed -i 's/[\./]server[\./]//g' coverage.xml
        workspace=${GITHUB_WORKSPACE//\//\\\/}
        sed -i "s/<source><\/source>/<source>$workspace\/server<\/source>/g" coverage.xml
        rm .coverage
    - uses: codecov/codecov-action@v1
      name: codecov
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
    - name: docker prune
      run: |
        (docker image ls -a | grep -v gcr.io/${{ secrets.GOOGLE_PROJECT }}/api | tail -n +2 |  awk '{print $3}' | xargs docker rmi) || true
        (docker image ls -a | grep -v latest | tail -n +2 |  awk '{print $3}' | xargs docker rmi) || true
  bump_version:
    name: Bump the version
    needs: [flake8, custom_checks, test, docker]
    if: "!contains(github.event.head_commit.message, 'Bump version') && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/legacy') && github.event_name == 'push'"
    runs-on: ubuntu-20.04
    steps:
    - name: actions/checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 100
        persist-credentials: false
        submodules: true
    - name: current_version
      run: echo "current_version=$(grep '__version__' server/athenian/api/metadata.py | cut -d\" -f2)" >> $GITHUB_ENV
    - name: FragileTech/bump-version
      uses: FragileTech/bump-version@main
      with:
        current_version: "${{ env.current_version }}"
        files: server/athenian/api/metadata.py
        commit_name: Groundskeeper Willie
        commit_email: bot@athenian.co
        login: gkwillie
        token: ${{ secrets.GKWILLIE_TOKEN }}
  deploy:
    name: Deploy
    if: "contains(github.event.head_commit.message, 'Bump version') && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/legacy') && github.event_name == 'push'"
    runs-on: ubuntu-20.04
    steps:
    - name: actions/checkout
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: install
      run: |
        curl -sL https://sentry.io/get-cli/ | bash
    - uses: satackey/action-docker-layer-caching@v0.0.11
      continue-on-error: true
    - name: actions/cache google-cloud-sdk
      uses: actions/cache@v2
      with:
        path: ~/google-cloud-sdk
        key: ubuntu-20.04-google-cloud-sdk
    - name: actions/cache godotenv
      uses: actions/cache@v2
      with:
        path: ~/.local/bin/godotenv
        key: ubuntu-20.04-godotenv
    - name: godotenv
      run: |
        set -x
        if [ ! -e $HOME/.local/bin/godotenv ]; then \
          mkdir -p $HOME/.local/bin && \
          wget -O - https://github.com/athenianco/godotenv/releases/download/1.3.0-secure/godotenv.gz | gzip -d >$HOME/.local/bin/godotenv && \
          chmod +x $HOME/.local/bin/godotenv; \
        fi
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo 'SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
              SENTRY_ORG=${{ secrets.SENTRY_ORG }}
              SENTRY_PROJECT=${{ secrets.SENTRY_PROJECT }}' >.env
    - name: deploy
      run: |
        set -x
        version_file=server/athenian/api/metadata.py
        current_version=$(grep __version__ $version_file | cut -d\" -f2)
        godotenv -s sentry-cli releases new -p ${{ secrets.SENTRY_PROJECT }} $current_version
        godotenv -s sentry-cli releases set-commits --auto $current_version
        export IMAGE=gcr.io/${{ secrets.GOOGLE_PROJECT }}/api:$current_version
        GOOGLE_CREDENTIALS=${{ secrets.GOOGLE_CREDENTIALS }} \
        GOOGLE_PROJECT=${{ secrets.GOOGLE_PROJECT }} \
        make gcloud-login
        docker build --pull --cache-from gcr.io/${{ secrets.GOOGLE_PROJECT }}/api:latest --build-arg COMMIT=$GITHUB_SHA --build-arg GKWILLIE_TOKEN=${{ secrets.GKWILLIE_TOKEN }} -t $IMAGE .
        make docker-push
        GOOGLE_CREDENTIALS=${{ secrets.GOOGLE_CREDENTIALS }} \
        GOOGLE_PROJECT=${{ secrets.GOOGLE_PROJECT }} \
        GOOGLE_PUBSUB_TOPIC=${{ secrets.GOOGLE_PUBSUB_TOPIC }} \
        if [ $GITHUB_REF == "refs/heads/master" ]; then make pubsub-publish; fi \
        docker tag $IMAGE gcr.io/${{ secrets.GOOGLE_PROJECT }}/api
        IMAGE=gcr.io/${{ secrets.GOOGLE_PROJECT }}/api make docker-push
        godotenv -s sentry-cli releases finalize $current_version
    - name: clear env
      run: |
        set -x
        rm .env
    - name: docker prune
      run: |
        (docker image ls -a | grep -v gcr.io/${{ secrets.GOOGLE_PROJECT }}/api | tail -n +2 |  awk '{print $3}' | xargs docker rmi) || true
        (docker image ls -a | grep -v latest | tail -n +2 |  awk '{print $3}' | xargs docker rmi) || true
