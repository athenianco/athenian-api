from datetime import datetime, timedelta, timezone
from random import choice, randint, random, sample, seed, shuffle

from athenian.api.internal.datasources import AccountDatasources
from athenian.api.internal.pentest_data import *  # noqa: F403
from athenian.api.models.web import Account, JIRAInstallation, Organization, User


def _verb() -> str:
    return choice(verbs)


def _noun() -> str:
    return choice(nouns)


def _common_word() -> str:
    return choice([_verb(), _noun()])


def _capitalize_first(word: str) -> str:
    return word[0].upper() + word[1:]


def _remove_last_vowel() -> str:
    word = _common_word()
    if len(word) <= 4:
        return word
    last_vowel = -1
    for i, c in enumerate(word):
        if c == "a" or c == "e" or c == "i" or c == "o" or c == "u":
            last_vowel = i
    if last_vowel > -1:
        return word[:last_vowel] + word[last_vowel + 1 :]
    return word


def _startupify() -> str:
    """
    Generate a startup name.

    Copied from https://github.com/tiffz/startup (MIT).
    """
    results = [
        _common_word() + "r",
        _common_word() + "it",
        _common_word() + "ly",
        _common_word() + "ify",
        _common_word() + "hub",
        _common_word() + "y",
        _common_word(),
        _common_word() + "me",
        "you" + _common_word(),
        _common_word() + "n",
        _common_word() + "str",
        _remove_last_vowel(),
        _common_word() + "Now",
        _common_word() + "Link",
        _common_word() + "in",
        _common_word() + "able",
        "Smart" + _common_word(),
        _common_word() + _capitalize_first(_common_word()),
    ]
    return _capitalize_first(choice(results))


def _male_name():
    return sample(male_names, 1, counts=male_weights)[0]


def _female_name():
    return sample(female_names, 1, counts=female_weights)[0]


def _last_name():
    return sample(last_names, 1, counts=last_weights)[0]


def _github_id() -> int:
    return randint(100000, 60000000)


def _github_avatar(id: int) -> str:
    return f"https://avatars.githubusercontent.com/u/{id}"


def _fake_user(male: bool, domain: str, company: str) -> User:
    name = _male_name() if male else _female_name()
    last = _last_name()
    if random() > 0.6:
        login = name.lower() + "-" + company.lower()
    else:
        login = name[0].lower() + last.lower()
    ghid = _github_id()
    return User(
        login=login,
        id=f"github|{ghid}",
        native_id=str(ghid),
        name=f"{name} {last}",
        email=f"{name.lower()}@{domain}",
        picture=_github_avatar(ghid),
    )


def generate_fake_account(account: int) -> Account:
    """Generate a fake account model."""
    seed(account)
    company = _startupify()
    caps_pos = 0
    for i, c in enumerate(company):
        if c.lower() != c:
            caps_pos = i
            break
    if caps_pos > 0:
        login = company[:caps_pos].lower() + "-" + company[caps_pos:].lower()
    else:
        login = company.lower()
    domain = company.lower() + "." + choice(domains)
    ratio = min(random(), random())
    size = randint(11, 68)
    girl_count = int(size * ratio)
    guy_count = size - girl_count
    updated = datetime.now(timezone.utc) - timedelta(days=randint(10, 24) ** 2)
    users = [_fake_user(True, domain, company) for _ in range(guy_count)] + [
        _fake_user(False, domain, company) for _ in range(girl_count)
    ]
    shuffle(users)
    for u in users:
        u.updated = updated
    rickroll = users[randint(4, len(users) - 4)]
    rickroll.name = "Nevergonna Giveyoup Jr"
    rickroll.email = f"rickroll@{domain}"
    rickroll.picture = f"https://rickrollredirect.github.io?u={rickroll.native_id}"
    admins = randint(1, len(users) // 10)
    if random() > 0.4:
        jira = JIRAInstallation(
            url=f"https://{login}.atlassian.net",
            projects=sorted(
                set(
                    sample(
                        jira_projects, randint(4, len(jira_projects)), counts=jira_project_weights,
                    ),
                ),
            ),
        )
    else:
        jira = None
    return Account(
        regulars=users[admins:],
        admins=users[:admins],
        organizations=[
            Organization(
                name=company,
                avatar_url=_github_avatar(_github_id()),
                login=login,
            ),
        ],
        jira=jira,
        datasources=list(AccountDatasources([AccountDatasources.GITHUB])),
    )
