openapi: 3.0.3
info:
  contact:
    email: admin@athenian.co
    name: the admins by email
  description: |-
    Server version: {{ server_version }} built on {{ build_date }} @ [{{ commit }}](https://github.com/athenianco/athenian-api/commit/{{ commit }})
  license:
    name: CC-BY-4.0
  title: '{{ title }}'
  version: 1.6.0
servers:
- description: '{{ server_description }} - {{ server_url }}'
  url: '{{ server_url }}/v1'
paths:
  /account/user:
    put:
      operationId: change_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUserChangeRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Effective account members.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Requesting user is not an admin of the account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account was not found.
      security:
      - bearerAuth: []
      summary: 'Change the status of an account member: regular, admin, or banished
        (deleted). This endpoint is allowed only for account admins.'
      tags:
      - user
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.user_controller
      x-codegen-request-body-name: body
  /account/{id}/details:
    get:
      operationId: get_account_details
      parameters:
      - description: Numeric identifier of the account. The user must belong to that
          account. To find out which accounts the user belongs to, see `/user`.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: List of the account members and installed GitHub and JIRA organizations.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user does not have access to this account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account was not found.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: List the calling user's account members and installed GitHub and JIRA
        organizations.
      tags:
      - user
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.user_controller
      x-codegen-request-body-name: body
  /account/{id}/features:
    get:
      operationId: get_account_features
      parameters:
      - description: Numeric identifier of the account. The user must belong to that
          account. To find out which accounts the user belongs to, see `/user`.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFeatures'
          description: List of the enabled product features for the account.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user does not have access to this account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account was not found.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: List the product features enabled for the account.
      tags:
      - user
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.user_controller
      x-codegen-request-body-name: body
  /become:
    get:
      operationId: become_user
      parameters:
      - description: Numeric identifier of the user to turn into.
        explode: false
        in: query
        name: id
        required: false
        schema:
          type: string
        style: form
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Details of the new active user, the same as `/user`.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Calling user is not allowed to mutate.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Requested user does not exist.
      security:
      - bearerAuth: []
      summary: '"God mode" ability to turn into any user. The calling user must be
        marked internally as a super admin.'
      tags:
      - user
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.user_controller
  /diff/releases:
    post:
      operationId: diff_releases
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiffReleasesRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiffedReleases'
          description: Releases between the two specified borders, excluding the first
            one and including the second one. Triaged by repository.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Calling user is not allowed to access the specified repositories.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified account does not exist or the user is not a member.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account's installation has not finished yet.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: Find releases between the two given ones per repository.
      tags:
      - filter
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.filter_controller
      x-codegen-request-body-name: body
  /events/clear_cache:
    post:
      operationId: clear_precomputed_events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteEventsCacheRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
          description: Empty response indicates a successful operation.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Calling user is not allowed to access the specified repositories.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user does not belong to the specified account.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account's installation has not finished yet.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: Reset the precomputed data related to the pushed events.
      tags:
      - events
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.events_controller
      x-codegen-request-body-name: body
  /events/releases:
    post:
      operationId: notify_release
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotifyReleaseRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
          description: Empty object indicates a successful notification.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Calling user is not allowed to access the specified repositories.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified account does not exist or the user is not a member.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account's installation has not finished yet.
      security:
      - apiKeyAuth: []
      summary: Notify about new releases. The release settings must be set to "event".
      tags:
      - events
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.events_controller
      x-codegen-request-body-name: body
  /filter/code_checks:
    post:
      operationId: filter_code_checks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterCodeChecksRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilteredCodeCheckRuns'
          description: Code check runs that satisfy the specified filters.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Calling user is not allowed to access the specified repositories.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified account does not exist or the user is not a member.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account's installation has not finished yet.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: Find code check runs that match the specified query. [What a code check
        run is exactly.](https://docs.github.com/en/rest/guides/getting-started-with-the-checks-api#about-check-runs)
      tags:
      - filter
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.filter_controller
      x-codegen-request-body-name: body
  /filter/commits:
    post:
      operationId: filter_commits
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterCommitsRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitsList'
          description: Commits that satisfy the specified filters grouped by date.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Calling user is not allowed to access the specified repositories.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified account does not exist or the user is not a member.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account's installation has not finished yet.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: Find commits that match the specified query.
      tags:
      - filter
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.filter_controller
      x-codegen-request-body-name: body
  /filter/contributors:
    post:
      operationId: filter_contributors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterContributorsRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeveloperSummaries'
          description: Repositories that were updated within the given timeframe.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Calling user is not allowed to access the specified repositories.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified account does not exist or the user is not a member.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account's installation has not finished yet.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: Find developers that made an action within the given timeframe.
      tags:
      - filter
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.filter_controller
      x-codegen-request-body-name: body
  /filter/jira:
    post:
      operationId: filter_jira_stuff
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterJIRAStuff'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilteredJIRAStuff'
          description: List of found JIRA entities, ordered by the last usage time.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is not an account member.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account was not found.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: Find various JIRA entities relevant to the specified date interval.
      tags:
      - filter
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.jira_controller
      x-codegen-request-body-name: body
  /filter/labels:
    post:
      operationId: filter_labels
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterLabelsRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilteredLabels'
          description: List of labels.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Calling user is not allowed to access the specified repositories.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified account does not exist or the user is not a member.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account's installation has not finished yet.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: Find labels used in the given repositories.
      tags:
      - filter
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.filter_controller
      x-codegen-request-body-name: body
  /filter/pull_requests:
    post:
      operationId: filter_prs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterPullRequestsRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestSet'
          description: List of pull requests satisfying the specified filters.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Calling user is not allowed to access the specified repositories.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified account does not exist or the user is not a member.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account's installation has not finished yet.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: List pull requests that satisfy the query.
      tags:
      - filter
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.filter_controller
  /filter/releases:
    post:
      operationId: filter_releases
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterReleasesRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseSet'
          description: Repositories that were updated within the given timeframe.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Calling user is not allowed to access the specified repositories.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified account does not exist or the user is not a member.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account's installation has not finished yet.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: Find releases that were published in the given time fram in the given
        repositories.
      tags:
      - filter
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.filter_controller
      x-codegen-request-body-name: body
  /filter/repositories:
    post:
      operationId: filter_repositories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRepositoriesRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositorySet'
          description: Repositories that were updated within the given timeframe.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Calling user is not allowed to access the specified repositories.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified account does not exist or the user is not a member.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account's installation has not finished yet.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: Find repositories that were updated within the given timeframe.
      tags:
      - filter
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.filter_controller
      x-codegen-request-body-name: body
  /get/contributors/{id}:
    get:
      operationId: get_contributors
      parameters:
      - description: Numeric identifier of the account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contributors'
          description: List of all contributors belonging to the specified account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user does not belong to the specified account.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The installation has not started yet.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: List all the contributors belonging to the specified account.
      tags:
      - get
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.contributors_controller
      x-codegen-request-body-name: body
  /get/export:
    get:
      operationId: get_everything
      parameters:
      - description: Numeric identifier of the account. Raises HTTP 400 if the user
          belongs to more than one account.
        explode: false
        in: query
        name: account
        required: false
        schema:
          type: integer
        style: form
      - description: Output file format. The default is `parquet`.
        explode: false
        in: query
        name: format
        required: false
        schema:
          enum:
          - parquet
          type: string
        style: form
      responses:
        200:
          content:
            application/zip:
              schema:
                format: binary
                type: string
          description: Uncompressed ZIP archive with binary files in the configured
            format.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Invalid query parameter values.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user does not belong to the specified account.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The installation has not started yet.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: Download all the data collected by Athenian for custom analysis.
      tags:
      - integrations
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.integrations_controller
  /get/pull_requests:
    post:
      operationId: get_prs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPullRequestsRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestSet'
          description: List of pull requests satisfying the specified filters.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Calling user is not allowed to access the specified pull requests.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified account does not exist or the user is not a member.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account's installation has not finished yet.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: List pull requests by repository and number.
      tags:
      - get
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.filter_controller
  /get/releases:
    post:
      operationId: get_releases
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetReleasesRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseSet'
          description: List of releases satisfying the specified filters.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Calling user is not allowed to access the specified pull requests.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified account does not exist or the user is not a member.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account's installation has not finished yet.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: List releases by repository and name.
      tags:
      - get
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.filter_controller
  /histograms/code_checks:
    post:
      operationId: calc_histogram_code_checks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodeCheckHistogramsRequest'
        description: Select the check runs of interest and the metrics to calculate.
        required: true
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalculatedCodeCheckHistograms'
          description: Calculated histograms.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to access the specified repositories
            on behalf of the specified account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified account does not exist or the user is not a member.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account's installation has not finished yet.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: Calculate histograms on continuous integration runs, such as GitHub
        Actions, Jenkins, Circle, etc.
      tags:
      - histograms
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.histograms_controller
      x-codegen-request-body-name: body
  /histograms/jira:
    post:
      operationId: calc_histogram_jira
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JIRAHistogramsRequest'
        description: Query for selecting JIRA issues and binned activities.
        required: true
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalculatedJIRAHistograms'
          description: Calculated histograms.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to access the specified repositories
            on behalf of the specified account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified account does not exist or the user is not a member.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account's installation has not finished yet.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: Calculate histograms over JIRA issue activities.
      tags:
      - histograms
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.jira_controller
      x-codegen-request-body-name: body
  /histograms/prs:
    post:
      operationId: calc_histogram_prs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PullRequestHistogramsRequest'
        description: Desired histogram definitions.
        required: true
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalculatedPullRequestHistograms'
          description: Calculated histograms.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to calculate metrics on behalf of the
            specified account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified account does not exist or the user is not a member.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoSourceDataError'
          description: No data is available to calculate histograms for the given
            repositories.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: Calculate histograms over PR distributions.
      tags:
      - histograms
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.histograms_controller
      x-codegen-request-body-name: body
  /invite/accept:
    put:
      operationId: accept_invitation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationLink'
        description: Accepted invitation details.
        required: true
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitedUser'
          description: Details about the new user.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Something is wrong with the invitation URL.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Invitation is disabled or user is not a member of the GitHub
            organization.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Invitation was not found.
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Concurrent requests.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Account's installation has not finished yet.
      security:
      - bearerAuth: []
      summary: Accept the account membership invitation and finish registration. The
        user must be already authorized in Auth0.
      tags:
      - registration
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.invitation_controller
      x-codegen-request-body-name: body
  /invite/check:
    post:
      operationId: check_invitation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationLink'
        description: Checked invitation details.
        required: true
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationCheckResult'
          description: 'Result of checking an invitation URL: invitation type, whether
            it is correctly formed and is enabled.'
      summary: Given an invitation URL, get its type (admin or regular account member)
        and find whether it is correctly formed and is enabled or disabled.
      tags:
      - registration
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.invitation_controller
      x-codegen-request-body-name: body
  /invite/generate/{id}:
    get:
      operationId: gen_invitation
      parameters:
      - description: Numeric identifier of the account where to invite new users.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationLink'
          description: The invitation link has been generated successfully.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to invite for this account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account was not found.
      security:
      - bearerAuth: []
      summary: Generate an account invitation link for regular users. The caller must
        be an admin of the specified account.
      tags:
      - registration
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.invitation_controller
      x-codegen-request-body-name: body
  /invite/jira/{id}:
    get:
      operationId: gen_jira_link
      parameters:
      - description: Numeric identifier of the account who is installing JIRA integration.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationLink'
          description: The invitation link has been generated successfully.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to invite for this account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account was not found.
      security:
      - bearerAuth: []
      summary: Generate a JIRA integration installation link. The caller must be an
        admin of the specified account.
      tags:
      - registration
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.invitation_controller
      x-codegen-request-body-name: body
  /invite/progress/{id}:
    get:
      operationId: eval_invitation_progress
      parameters:
      - description: Numeric identifier of the account which the user has joined.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallationProgress'
          description: Status of installing Athenian for the calling user and the
            given account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account does not exist or the user is not its member.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The installation has not started yet.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: Return the current Athenian GitHub app installation progress.
      tags:
      - registration
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.invitation_controller
  /match/identities:
    post:
      operationId: match_identities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchIdentitiesRequest'
        required: true
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchedIdentities'
          description: Computed identities mapping.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request is invalid.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified account does not exist or the user is not a member.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account's installation has not finished yet.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: Match provided people names/logins/emails to the account's GitHub organization
        members.
      tags:
      - integrations
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.integrations_controller
      x-codegen-request-body-name: body
  /metrics/code_bypassing_prs:
    post:
      operationId: calc_code_bypassing_prs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodeFilter'
        description: Query for measuring the amount of code that was pushed outside
          of pull requests.
        required: true
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeasuredCodeBypassingPRs'
          description: Calculated metrics.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to access the specified repositories
            on behalf of the specified account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified account does not exist or the user is not a member.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account's installation has not finished yet.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: Measure the amount of code that was pushed outside of pull requests.
      tags:
      - metrics
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.metrics_controller
      x-codegen-request-body-name: body
  /metrics/code_checks:
    post:
      operationId: calc_metrics_code_checks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodeCheckMetricsRequest'
        description: Select the check runs of interest and the metrics to calculate.
        required: true
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalculatedCodeCheckMetrics'
          description: Calculated metrics.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to access the specified repositories
            on behalf of the specified account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified account does not exist or the user is not a member.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account's installation has not finished yet.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: Calculate metrics on continuous integration runs, such as GitHub Actions,
        Jenkins, Circle, etc.
      tags:
      - metrics
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.metrics_controller
      x-codegen-request-body-name: body
  /metrics/developers:
    post:
      operationId: calc_metrics_developers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeveloperMetricsRequest'
        description: Query for selecting developers and measured activities.
        required: true
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalculatedDeveloperMetrics'
          description: Calculated metrics.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to access the specified repositories
            on behalf of the specified account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified account does not exist or the user is not a member.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account's installation has not finished yet.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: Calculate metrics over developer activities.
      tags:
      - metrics
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.metrics_controller
      x-codegen-request-body-name: body
  /metrics/jira:
    post:
      operationId: calc_metrics_jira_linear
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JIRAMetricsRequest'
        description: Query for selecting JIRA issues and measured activities.
        required: true
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalculatedJIRAMetrics'
          description: Calculated metrics.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to access the specified repositories
            on behalf of the specified account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified account does not exist or the user is not a member.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account's installation has not finished yet.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: Calculate metrics over JIRA issue activities.
      tags:
      - metrics
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.jira_controller
      x-codegen-request-body-name: body
  /metrics/prs:
    post:
      operationId: calc_metrics_prs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PullRequestMetricsRequest'
        description: Desired metric definitions.
        required: true
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalculatedPullRequestMetrics'
          description: Calculated metrics.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to calculate metrics on behalf of the
            specified account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified account does not exist or the user is not a member.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoSourceDataError'
          description: No data is available to calculate metrics for the given repositories.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: Calculate linear metrics over PRs.
      tags:
      - metrics
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.metrics_controller
      x-codegen-request-body-name: body
  /metrics/releases:
    post:
      operationId: calc_metrics_releases
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReleaseMetricsRequest'
        description: Desired metric definitions.
        required: true
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalculatedReleaseMetrics'
          description: Calculated metrics.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to calculate metrics on behalf of the
            specified account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified account does not exist or the user is not a member.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoSourceDataError'
          description: No data is available to calculate metrics for the given repositories.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: Calculate linear metrics over releases.
      tags:
      - metrics
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.metrics_controller
      x-codegen-request-body-name: body
  /paginate/pull_requests:
    post:
      operationId: paginate_prs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaginatePullRequestsRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestPaginationPlan'
          description: Identifier of the created repository set.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Calling user is not allowed to access the specified repositories.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified account does not exist or the user is not a member.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account's installation has not finished yet.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: Compute the balanced pagination plan for `/filter/pull_requests`.
      tags:
      - pagination
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.pagination_controller
      x-codegen-request-body-name: body
  /reposet/create:
    post:
      operationId: create_reposet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositorySetCreateRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedIdentifier'
          description: Identifier of the created repository set.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to create a repository set from the specified
            items.
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: There is an existing reposet with the same contents.
      security:
      - bearerAuth: []
      summary: Create a repository set.
      tags:
      - reposet
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.reposet_controller
      x-codegen-request-body-name: body
  /reposet/{id}:
    delete:
      operationId: delete_reposet
      parameters:
      - description: Numeric identifier of the repository set to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
          description: Empty object indicates a successful removal.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to delete the specified repository set.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified repository set was not found.
      security:
      - bearerAuth: []
      summary: Delete a repository set. The user must be an admin of the account that
        owns the reposet.
      tags:
      - reposet
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.reposet_controller
      x-codegen-request-body-name: body
    get:
      operationId: get_reposet
      parameters:
      - description: Numeric identifier of the repository set to list.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositorySetWithName'
          description: List of repositories in the specified set.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to list the specified repository set.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified repository set was not found.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: List a repository set. The user must be in the account that owns the
        reposet.
      tags:
      - reposet
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.reposet_controller
      x-codegen-request-body-name: body
    put:
      operationId: update_reposet
      parameters:
      - description: Numeric identifier of the repository set to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositorySetWithName'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
          description: Empty object indicates a successful update.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to update the specified repository set.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified repository set was not found.
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: There is an existing reposet with the same contents.
      security:
      - bearerAuth: []
      summary: Update a repository set. The user must be an admin of the account that
        owns the reposet.
      tags:
      - reposet
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.reposet_controller
      x-codegen-request-body-name: body
  /reposets/{id}:
    get:
      operationId: list_reposets
      parameters:
      - description: Numeric identifier of the account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositorySetList'
          description: List the repository sets belonging to the specified account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user does not belong to the specified account.
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Concurrent requests that are finishing the account registration.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: List the repository sets belonging to the calling user.
      tags:
      - reposet
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.reposet_controller
      x-codegen-request-body-name: body
  /settings/jira/identities:
    patch:
      operationId: set_jira_identities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetMappedJIRAIdentitiesRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappedJIRAIdentities'
          description: List with the Github<>JIRA identity mapping.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is not an admin of this account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user or the account was not found.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The JIRA installation does not exist.
      security:
      - bearerAuth: []
      summary: Add or override GitHub<>JIRA user identity mapping.
      tags:
      - settings
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.settings_controller
      x-codegen-request-body-name: body
  /settings/jira/identities/{id}:
    get:
      operationId: get_jira_identities
      parameters:
      - description: Numeric identifier of the account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappedJIRAIdentities'
          description: List with the Github<>JIRA identity mapping.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is not an admin of this account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user or the account was not found.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The JIRA installation does not exist.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: Fetch the GitHub<>JIRA user identity mapping.
      tags:
      - settings
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.settings_controller
      x-codegen-request-body-name: body
  /settings/jira/projects:
    put:
      operationId: set_jira_projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JIRAProjectsRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JIRAProjects'
          description: Current JIRA project settings.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is not an admin of this account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user or the account was not found.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The JIRA installation does not exist.
      security:
      - bearerAuth: []
      summary: Set the enabled JIRA projects.
      tags:
      - settings
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.settings_controller
      x-codegen-request-body-name: body
  /settings/jira/projects/{id}:
    get:
      operationId: get_jira_projects
      parameters:
      - description: Numeric identifier of the account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JIRAProjects'
          description: Current JIRA project settings.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user does not belong to the specified account or account
            not found.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The JIRA installation does not exist.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: List the currently enabled JIRA project settings.
      tags:
      - settings
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.settings_controller
      x-codegen-request-body-name: body
  /settings/release_match:
    put:
      operationId: set_release_match
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReleaseMatchRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositorySet'
          description: List the repositories affected.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is not an admin of this account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user or the account was not found.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The installation has not started yet.
      security:
      - bearerAuth: []
      summary: Set the release matching rule for a list of repositories. Only for
        account admins.
      tags:
      - settings
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.settings_controller
      x-codegen-request-body-name: body
  /settings/release_match/{id}:
    get:
      operationId: list_release_match_settings
      parameters:
      - description: Numeric identifier of the account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseMatchSettings'
          description: Current release matching settings per repo.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user does not belong to the specified account.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The installation has not started yet.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: List the current release matching settings.
      tags:
      - settings
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.settings_controller
      x-codegen-request-body-name: body
  /team/create:
    post:
      operationId: create_team
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamCreateRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedIdentifier'
          description: Identifier of the created team.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request is invalid.
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: There is an existing team with the same name.
      security:
      - bearerAuth: []
      summary: Create a team. Admin is not required.
      tags:
      - team
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.team_controller
      x-codegen-request-body-name: body
  /team/{id}:
    delete:
      operationId: delete_team
      parameters:
      - description: Numeric identifier of the team to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
          description: Empty object indicates a successful removal.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to delete the specified team.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified team was not found.
      security:
      - bearerAuth: []
      summary: Delete a team.
      tags:
      - team
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.team_controller
      x-codegen-request-body-name: body
    get:
      operationId: get_team
      parameters:
      - description: Numeric identifier of the team to list.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: List of the members in the specified team.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to list the specified team.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified team was not found.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: List the team's members. The user must belong to the account that owns
        the team.
      tags:
      - team
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.team_controller
      x-codegen-request-body-name: body
    put:
      operationId: update_team
      parameters:
      - description: Numeric identifier of the team to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamUpdateRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
          description: Empty object indicates a successful operation.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to update the specified team.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified team was not found.
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: There is an existing team with the same contents.
      security:
      - bearerAuth: []
      summary: Update a team.
      tags:
      - team
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.team_controller
      x-codegen-request-body-name: body
  /teams/{id}:
    get:
      operationId: list_teams
      parameters:
      - description: Numeric identifier of the account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamList'
          description: List the teams belonging to the specified account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user does not belong to the specified account.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: List the teams belonging to the calling user.
      tags:
      - team
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.team_controller
      x-codegen-request-body-name: body
  /token/create:
    post:
      operationId: create_token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTokenRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedToken'
          description: Value and ID of the generated Personal Access Token.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user does not belong to the specified account or no such
            account exists.
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: There is another token with the same name belonging to the
            user in the account.
      security:
      - bearerAuth: []
      summary: Create a new Personal Access Token for the calling user and the specified
        account.
      tags:
      - security
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.security_controller
      x-codegen-request-body-name: body
  /token/{id}:
    delete:
      operationId: delete_token
      parameters:
      - description: Numeric identifier of the token.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
          description: Empty object indicates a successful removal.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user does not own the token.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The token does not exist.
      security:
      - bearerAuth: []
      summary: Delete a Personal Access Token belonging to the user.
      tags:
      - security
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.security_controller
      x-codegen-request-body-name: body
    patch:
      operationId: patch_token
      parameters:
      - description: Numeric identifier of the token.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchTokenRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
          description: Empty object indicates a successful patch operation.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user does not own the token.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The token does not exist.
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: There is another token with the same name belonging to the
            user in the account.
      security:
      - bearerAuth: []
      summary: Change Personal Access Token's details.
      tags:
      - security
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.security_controller
      x-codegen-request-body-name: body
  /tokens/{id}:
    get:
      operationId: list_tokens
      parameters:
      - description: Numeric identifier of the account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListedTokens'
          description: List of Personal Access Tokens belonging to the user in the
            specified account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user does not belong to the specified account or no such
            account exists.
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: List Personal Access Tokens of the user in the account.
      tags:
      - security
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.security_controller
      x-codegen-request-body-name: body
  /user:
    get:
      operationId: get_user
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: 'Information about the calling user: name, email, login, etc.'
      security:
      - bearerAuth: []
      - apiKeyAuth: []
      summary: Show details about the calling user.
      tags:
      - user
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.user_controller
      x-codegen-request-body-name: body
  /versions:
    get:
      operationId: get_versions
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Versions'
          description: Versions of the backend components.
      security: []
      summary: Query the versions of the backend components.
      tags:
      - version
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.status_controller
components:
  securitySchemes:
    bearerAuth:
      description: |-
        Regular JSON Web Token authorization powered by Auth0.
        The server expects an `Authorization: Bearer <token>` header and checks `<token>` by
        sending it to Auth0. Visit [{{ server_url | replace("api", "app") }}/bearer]({{ server_url | replace("api", "app") }}/bearer)
        to copy your current JWT that will expire within 24 hours.
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: athenian.api.controllers.security_controller.info_from_bearerAuth
    apiKeyAuth:
      description: |-
        Authorization by the value of `X-API-Key` header aka API token.
        The tokens are user- and account-specific. Create them by calling `/token/create`.
        The server automatically inserts `account` in the request's body if it was not
        supplied by the user.
      type: apiKey
      in: header
      name: X-API-Key
      x-apikeyInfoFunc: athenian.api.controllers.security_controller.info_from_apiKeyAuth
  schemas:
    CreatedIdentifier:
      additionalProperties: false
      example:
        id: 777
      properties:
        id:
          description: Identifier of the created entity.
          example: 777
          type: integer
      required:
      - id
      type: object
    GenericError:
      properties:
        type:
          description: URI reference that identifies the problem type (RFC 7807).
          example: /errors/metrics/pr_linear/InvalidRequestError
          type: string
        title:
          description: Short, human-readable summary of the problem type.
          example: Validation failed
          type: string
        status:
          description: Duplicated HTTP status code.
          example: 400
          type: integer
        detail:
          description: Human-readable explanation specific to this occurrence of the
            problem.
          example: '"pr-slave-time" is not one of [...].'
          type: string
        instance:
          description: URI reference that identifies the specific occurrence of the
            problem.
          example: https://sentry.io/athenian/api/?query=2763c4eabd7240f59829ee1a02546293
          type: string
      required:
      - title
      - type
      type: object
    InvalidRequestError:
      allOf:
      - $ref: '#/components/schemas/GenericError'
      - properties:
          pointer:
            description: Path to the offending request item.
            example: .granularity
            type: string
        type: object
    NoSourceDataError:
      $ref: '#/components/schemas/GenericError'
    PullRequestMetricID:
      description: |-
        Currently supported PR metric types.
        * `pr-wip-time`: average time spent in Work In Progress stage.
        * `pr-wip-count`: number of PRs used to calculate `pr-wip-time` disregarding the quantiles.
        * `pr-wip-count-q`: number of PRs used to calculate `pr-wip-time` after applying the quantiles.
        * `pr-review-time`: average time spent in Review stage.
        * `pr-review-count`: number of PRs used to calculate `pr-review-time` disregarding the quantiles.
        * `pr-review-count-q`: number of PRs used to calculate `pr-review-time` after applying the quantiles.
        * `pr-merging-time`: average time spent in Merge stage.
        * `pr-merging-count`: number of PRs used to calculate `pr-merging-time` disregarding the quantiles.
        * `pr-merging-count-q`: number of PRs used to calculate `pr-merging-time` after applying the quantiles.
        * `pr-release-time`: average time spent in Release stage.
        * `pr-release-count`: number of PRs used to calculate `pr-release-time` disregarding the quantiles.
        * `pr-release-count-q`: number of PRs used to calculate `pr-release-time` after applying the quantiles.
        * `pr-lead-time`: average Lead Time - time between the work started and the release.
        * `pr-lead-count`: number of PRs used to calculate `pr-lead-time` disregarding the quantiles. It should be the same as `pr-release-count`.
        * `pr-lead-count-q`: number of PRs used to calculate `pr-lead-time` after applying the quantiles.
        * `pr-cycle-time`: Cycle Time - sum of correspodning `pr-wip-time`, `pr-review-time`, `pr-merging-time`, and `pr-release-time`.
        * `pr-cycle-count`: number of PRs used to calculate `pr-cycle-time` disregarding the quantiles. It equals to the overall number of PRs observed in the given time window.
        * `pr-cycle-count-q`: number of PRs used to calculate `pr-cycle-time` after applying the quantiles.
        * `pr-all-count`: equals to the sum of `pr-cycle-count` with the number of PRs which are still not done on the specified time interval but don't have any stage-changing events. This metric should be exactly the same as the number of PRs returned by `/filter/prs`. The quantiles are ignored.
        * `pr-wait-first-review-time`: average time of waiting for the first review.
        * `pr-wait-first-review-count`: number of PRs used to calculate `pr-wait-first-review`. Note: this is *not* the same as the number of PRs waiting for the first review.
        * `pr-wait-first-review-count-q`: number of PRs used to calculate `pr-wait-first-review after applying the quantiles.
        * `pr-flow-ratio`: ratio of opened to closed PRs.
        * `pr-opened`: number of opened PRs.
        * `pr-reviewed`: number of PRs which received a review.
        * `pr-not-reviewed`: number of PRs merged or closed but without any review.
        * `pr-merged`: number of merged PRs.
        * `pr-rejected`: number of rejected PRs.
        * `pr-closed`: number of closed PRs.
        * `pr-done`: number of released, closed unmerged, and force push dropped PRs.
        * `pr-size`: average size of PRs (added + deleted lines) which are active on the time interval after applying the quantiles.
        * `pr-median-size`: median size of PRs (added + deleted lines) which are active on the time interval ignoring the quantiles.
        * `pr-wip-pending-count`: number of PRs currently in Work In Progress stage.
        * `pr-review-pending-count`: number of PRs currently in Review stage.
        * `pr-merging-pending-count`: number of PRs currently in Merge stage.
        * `pr-release-pending-count`: number of PRs currently in Release stage.
        * `pr-opened-mapped-to-jira`: ratio of created PRs that are mapped to JIRA issues.
        * `pr-done-mapped-to-jira`: ratio of rejected or released PRs that are mapped to JIRA issues.
        * `pr-all-mapped-to-jira`: ratio of all observed PRs that are mapped to JIRA issues.
        * `pr-participants-per`: average number of PR particpants excluding the releasers and the bots.
        * `pr-review-comments-per`: average number of PR review comments for reviewed PRs, bots excluded.
        * `pr-reviews-per`: average number of PR reviews for reviewed PRs, bots excluded.
      enum:
      - pr-wip-time
      - pr-wip-count
      - pr-wip-count-q
      - pr-review-time
      - pr-review-count
      - pr-review-count-q
      - pr-merging-time
      - pr-merging-count
      - pr-merging-count-q
      - pr-release-time
      - pr-release-count
      - pr-release-count-q
      - pr-lead-time
      - pr-lead-count
      - pr-lead-count-q
      - pr-cycle-time
      - pr-cycle-count
      - pr-cycle-count-q
      - pr-all-count
      - pr-wait-first-review-time
      - pr-wait-first-review-count
      - pr-wait-first-review-count-q
      - pr-flow-ratio
      - pr-opened
      - pr-reviewed
      - pr-not-reviewed
      - pr-merged
      - pr-rejected
      - pr-closed
      - pr-done
      - pr-size
      - pr-median-size
      - pr-wip-pending-count
      - pr-review-pending-count
      - pr-merging-pending-count
      - pr-release-pending-count
      - pr-opened-mapped-to-jira
      - pr-done-mapped-to-jira
      - pr-all-mapped-to-jira
      - pr-participants-per
      - pr-review-comments-per
      - pr-reviews-per
      example: pr-lead-time
      type: string
    DeveloperID:
      description: |
        User name which uniquely identifies any developer on any service provider.
        The format matches the profile URL without the protocol part.
      example: github.com/vmarkovtsev
      type: string
    RepositoryID:
      description: |
        Repository name which uniquely identifies any repository in any service provider.
        The format matches the repository URL without the protocol part. No ".git" should be appended.
        We support a special syntax for repository sets: "{reposet id}" adds all the repositories
        from the given set.
      example: github.com/athenianco/athenian-webapp
      type: string
    DeveloperSet:
      description: A set of developers. An empty list disables the filter and includes
        everybody. Duplicates are automatically ignored.
      example:
      - github.com/vmarkovtsev
      - github.com/dpordomingo
      items:
        $ref: '#/components/schemas/DeveloperID'
      type: array
    Contributors:
      description: List of contributors.
      example:
      - login: github.com/gkwillie
        name: Groundskeeper Willie
        email: bot@athenian.co
        picture: https://avatars0.githubusercontent.com/u/60340680?v=4
      - login: github.com/se7entyse7en
        name: Lou Marvin Caraig
        email: loumarvincaraig@gmail.com
        picture: https://avatars1.githubusercontent.com/u/5599208?v=4
      items:
        $ref: '#/components/schemas/Contributor'
      type: array
    Contributor:
      additionalProperties: false
      description: Details about a developer who contributed to some repositories
        owned by the account.
      example:
        login: github.com/gkwillie
        name: Groundskeeper Willie
        email: bot@athenian.co
        picture: https://avatars0.githubusercontent.com/u/60340680?v=4
      properties:
        login:
          $ref: '#/components/schemas/DeveloperID'
        name:
          description: Full name of the contributor.
          type: string
        email:
          description: Email of the conributor.
          type: string
        picture:
          description: Avatar URL of the contributor.
          type: string
        jira_user:
          description: Mapped JIRA user name.
          type: string
      required:
      - login
      type: object
    TeamCreateRequest:
      additionalProperties: false
      description: Team creation request.
      example:
        account: 1
        name: Engineering
        members:
        - github.com/gkwillie
        - github.com/se7entyse7en
      properties:
        account:
          description: Account identifier. That account will own the created team.
          type: integer
        name:
          description: Name of the team.
          type: string
        members:
          $ref: '#/components/schemas/DeveloperSet'
        parent:
          description: Identifier of the higher level team.
          nullable: true
          type: integer
      required:
      - account
      - members
      - name
      - parent
      type: object
    TeamUpdateRequest:
      additionalProperties: false
      description: Team update request.
      example:
        name: Engineering
        members:
        - github.com/gkwillie
        - github.com/se7entyse7en
      properties:
        name:
          description: New name of the team.
          type: string
        members:
          $ref: '#/components/schemas/DeveloperSet'
        parent:
          description: New identifier of the higher level team.
          nullable: true
          type: integer
      required:
      - members
      - name
      - parent
      type: object
    Team:
      description: Definition of a team of several developers.
      example:
        id: 1
        name: Engineering
        parent: 3
        members:
        - login: github.com/gkwillie
          name: Groundskeeper Willie
          email: bot@athenian.co
          picture: https://avatars0.githubusercontent.com/u/60340680?v=4
        - login: github.com/se7entyse7en
          name: Lou Marvin Caraig
          email: loumarvincaraig@gmail.com
          picture: https://avatars1.githubusercontent.com/u/5599208?v=4
      properties:
        id:
          description: Team identifier.
          type: integer
        name:
          description: Name of the team.
          type: string
        members:
          $ref: '#/components/schemas/Contributors'
        parent:
          description: Identifier of the higher level team.
          nullable: true
          type: integer
      required:
      - id
      - members
      - name
      - parent
      type: object
    TeamList:
      description: List of teams of an account.
      example:
      - id: 1
        name: Engineering
        parent: 3
        members:
        - login: github.com/vmarkovtsev
          name: Vadim Markovtsev
          email: vadim@athenian.co
          picture: https://avatars3.githubusercontent.com/u/2793551?v=4
        - login: github.com/se7entyse7en
          name: Lou Marvin Caraig
          email: waren@athenian.co
          picture: https://avatars1.githubusercontent.com/u/5599208?v=4
      - id: 2
        name: Product
        parent: 3
        members:
        - login: github.com/warenlg
          name: Waren Long
          email: waren@athenian.co
          picture: https://avatars2.githubusercontent.com/u/24694845?v=4
      - id: 3
        name: Management
        members:
        - login: github.com/eiso
          name: Eiso Kant
          email: eiso@athenian.co
          picture: https://avatars2.githubusercontent.com/u/1247608?v=4
      items:
        $ref: '#/components/schemas/Team'
      type: array
    RepositorySet:
      description: Set of repositories. An empty list raises a bad response 400. Duplicates
        are automatically ignored.
      example:
      - github.com/athenianco/athenian-webapp
      - github.com/athenianco/athenian-api
      items:
        $ref: '#/components/schemas/RepositoryID'
      type: array
    RepositorySetWithName:
      additionalProperties: false
      description: A set of repositories. An empty list results an empty response
        in contrary to DeveloperSet. Duplicates are automatically ignored.
      example:
        name: all
        items:
        - github.com/athenianco/athenian-webapp
        - github.com/athenianco/athenian-api
        precomputed: true
      properties:
        name:
          type: string
        items:
          items:
            $ref: '#/components/schemas/RepositoryID'
          type: array
        precomputed:
          type: boolean
      type: object
    RepositorySetList:
      description: List of repository sets owned by a user.
      items:
        $ref: '#/components/schemas/RepositorySetListItem'
      type: array
    RepositorySetCreateRequest:
      additionalProperties: false
      description: Repository set creation request.
      example:
        account: 1
        items:
        - github.com/athenianco/athenian-webapp
        - github.com/athenianco/athenian-api
        name: users
      properties:
        account:
          description: Account identifier. That account will own the created repository
            set. The user must be an admin of the account.
          type: integer
        items:
          items:
            $ref: '#/components/schemas/RepositoryID'
          type: array
        name:
          description: Unique editable identifier of the repository set.
          type: string
      required:
      - account
      - items
      - name
      type: object
    RepositorySetListItem:
      additionalProperties: false
      description: Element of RepositorySetList.
      example:
        items_count: 6
        created: 2020-01-23T04:56:07.000+00:00
        id: 1
        name: all
        updated: 2020-01-23T04:56:07.000+00:00
      properties:
        id:
          description: Repository set identifier.
          type: integer
        name:
          description: Repository set name.
          type: string
        created:
          description: Date and time of creation of the repository set.
          format: date-time
          type: string
        updated:
          description: Date and time of the last change of the repository set.
          format: date-time
          type: string
        items_count:
          description: Number of repositories in the set.
          minimum: 1
          type: integer
      type: object
    User:
      additionalProperties: false
      description: User details. "updated" and "accounts" are populated only for the
        calling user.
      example:
        id: github|60340680
        native_id: 60340680
        login: gkwillie
        name: Groundskeeper Willie
        email: bot@athenian.co
        picture: https://avatars0.githubusercontent.com/u/60340680?v=4
        updated: 2020-01-23T12:00:00Z
        accounts:
          1:
            is_admin: true
            expired: false
          2:
            is_admin: false
            expired: false
      properties:
        id:
          description: Auth0 user identifier.
          type: string
        native_id:
          description: Auth backend user identifier.
          type: string
        login:
          description: Auth backend user login name.
          type: string
        name:
          description: Full name of the user.
          type: string
        email:
          description: Email of the user.
          type: string
        picture:
          description: Avatar URL of the user.
          type: string
        updated:
          description: Date and time of the last profile update.
          format: date-time
          type: string
        accounts:
          additionalProperties:
            $ref: '#/components/schemas/AccountStatus'
          description: Mapping from user's account ID the membership status.
          type: object
        impersonated_by:
          description: Identifier of the god user who is acting on behalf of.
          type: string
      required:
      - id
      - login
      - native_id
      type: object
    AccountStatus:
      additionalProperties: false
      description: Status of the user's account membership.
      example:
        is_admin: true
        expired: false
      properties:
        is_admin:
          description: Indicates whether the user is an account administrator.
          type: boolean
        expired:
          description: Indicates whether the account is disabled.
          type: boolean
      required:
      - expired
      - is_admin
      type: object
    InvitedUser:
      additionalProperties: false
      description: Details about the user who has accepted an invitation.
      example:
        user:
          id: github|60340680
          native_id: 60340680
          login: gkwillie
          name: Groundskeeper Willie
          email: bot@athenian.co
          picture: https://avatars0.githubusercontent.com/u/60340680?v=4
          updated: 2020-01-23T12:00:00Z
        account: 0
      properties:
        account:
          description: Joined account ID.
          type: integer
        user:
          $ref: '#/components/schemas/User'
      required:
      - account
      - user
      type: object
    Account:
      additionalProperties: false
      description: Account members ("updated" and "accounts" are not populated) and
        installed GitHub organizations.
      example:
        regulars:
        - id: github|24828976
          native_id: 24828976
          login: jjdoe
          name: Jane Josephine Doe
          email: janedoe@exampleco.com
          picture: http://exampleco.com/janedoe/me.jpg
          updated: 2020-01-23T12:00:00Z
        - id: github|24828976
          native_id: 24828976
          login: jjdoe
          name: Jane Josephine Doe
          email: janedoe@exampleco.com
          picture: http://exampleco.com/janedoe/me.jpg
          updated: 2020-01-23T12:00:00Z
        admins:
        - id: github|24828976
          native_id: 24828976
          login: jjdoe
          name: Jane Josephine Doe
          email: janedoe@exampleco.com
          picture: http://exampleco.com/janedoe/me.jpg
          updated: 2020-01-23T12:00:00Z
        - id: github|24828976
          native_id: 24828976
          login: jjdoe
          name: Jane Josephine Doe
          email: janedoe@exampleco.com
          picture: http://exampleco.com/janedoe/me.jpg
          updated: 2020-01-23T12:00:00Z
        organizations:
        - name: Athenian
          login: athenianco
          avatar_url: https://avatars3.githubusercontent.com/u/58329504?s=200&v=4
        jira:
          url: https://athenianco.atlassian.net
          projects:
          - DEV
          - ENG
      properties:
        admins:
          description: List of admin users.
          items:
            $ref: '#/components/schemas/User'
          type: array
        regulars:
          description: List of non-admin users.
          items:
            $ref: '#/components/schemas/User'
          type: array
        organizations:
          description: List of installed GitHub organizations.
          items:
            $ref: '#/components/schemas/Organization'
          type: array
        jira:
          $ref: '#/components/schemas/JIRAInstallation'
      required:
      - admins
      - organizations
      - regulars
      type: object
    Organization:
      additionalProperties: false
      description: GitHub organization details.
      example:
        name: Athenian
        login: athenianco
        avatar_url: https://avatars3.githubusercontent.com/u/58329504?s=200&v=4
      properties:
        name:
          type: string
        avatar_url:
          type: string
        login:
          type: string
      required:
      - avatar_url
      - login
      - name
      type: object
    JIRAInstallation:
      additionalProperties: false
      description: Information about a link with JIRA.
      example:
        url: https://athenianco.atlassian.net
        projects:
        - DEV
        - ENG
      properties:
        url:
          description: JIRA base URL.
          format: url
          type: string
        projects:
          description: List of accessible project keys.
          items:
            type: string
          type: array
      required:
      - projects
      - url
      type: object
    InvitationLink:
      additionalProperties: false
      example:
        url: https://app.athenian.co/i/deadf88d
      properties:
        url:
          description: Invitation URL. Users are supposed to click it and become admins
            or regular account members.
          format: url
          type: string
      required:
      - url
      type: object
    InvitationCheckResult:
      additionalProperties: false
      example:
        active: true
        type: regular
        valid: true
      properties:
        active:
          description: Value indicating whether the invitation is still enabled.
          type: boolean
        type:
          description: Invited user's account membership status.
          enum:
          - admin
          - regular
          type: string
        valid:
          description: Value indicating whether the invitation URL is correctly formed.
          type: boolean
      required:
      - valid
      type: object
    InstallationProgress:
      additionalProperties: false
      description: Data fetching progress of the Athenian metadata retrieval app.
      example:
        tables:
        - fetched: 50
          name: Commit
          total: 100
        - fetched: 0
          name: PullRequest
          total: 20
        finished_date: 2020-01-23T04:56:07Z
        started_date: 2020-01-23T06:56:07Z
        owner: vmarkovtsev
        repositories: 30
      properties:
        started_date:
          description: Date and time when the historical data collection began.
          format: date-time
          type: string
        finished_date:
          description: Date and time when the historical data collection ended.
          format: date-time
          nullable: true
          type: string
        owner:
          description: Login of the person who installed the metadata.
          type: string
        repositories:
          description: Number of discovered repositories.
          minimum: 0
          type: integer
        tables:
          example:
          - fetched: 50
            name: Commit
            total: 100
          - fetched: 0
            total: 200
            name: PullRequest
          items:
            $ref: '#/components/schemas/TableFetchingProgress'
          type: array
      required:
      - finished_date
      - owner
      - repositories
      - started_date
      - tables
      type: object
    TableFetchingProgress:
      additionalProperties: false
      description: Used in InstallationProgress.tables to indicate how much data has
        been loaded in each DB table.
      example:
        fetched: 50
        name: Commit
        total: 100
      properties:
        fetched:
          description: How many records have been stored in the DB table so far.
          minimum: 0
          type: integer
        name:
          description: DB table identifier.
          type: string
        total:
          description: How many records the DB table is expected to have.
          minimum: 1
          type: integer
      required:
      - fetched
      - name
      - total
      type: object
    ForSet:
      additionalProperties: false
      description: Filter for `/metrics/prs`.
      example:
        repositories:
        - github.com/athenianco/athenian-webapp
        - github.com/athenianco/athenian-api
        with:
          author:
          - github.com/vmarkovtsev
          - github.com/dpordomingo
        labels_include:
        - bug
      properties:
        repositories:
          $ref: '#/components/schemas/RepositorySet'
        repogroups:
          $ref: '#/components/schemas/IndexedGroups'
        with:
          $ref: '#/components/schemas/PullRequestWith'
        withgroups:
          description: |-
            Aggregate by groups of PR contributors.
            Currently, only the groupings by `author`, `merger`, and `releaser` are supported.
            People do not have to be mentioned in `with` in contrast to `repogroups`.
            We treat `with` as another group, if specified.
          items:
            $ref: '#/components/schemas/PullRequestWith'
          type: array
        labels_include:
          description: At least one of these labels must be present in each analyzed
            PR.
          items:
            type: string
          type: array
        labels_exclude:
          description: None of these labels must be present in each analyzed PR.
          items:
            type: string
          type: array
        jira:
          $ref: '#/components/schemas/JIRAFilter'
        lines:
          description: Split by changed number of lines (inserted + removed).
          items:
            minimum: 0
            type: integer
          minLength: 2
          type: array
      required:
      - repositories
      type: object
    ForSetDevelopers:
      additionalProperties: false
      description: Filter for `/metrics/developers`.
      example:
        repositories:
        - github.com/athenianco/athenian-webapp
        - github.com/athenianco/athenian-api
        developers:
        - github.com/vmarkovtsev
        - github.com/dpordomingo
      properties:
        repositories:
          $ref: '#/components/schemas/RepositorySet'
        developers:
          allOf:
          - description: List of developers. Must contain at least one item. Duplicates
              are not ignored.
          - $ref: '#/components/schemas/DeveloperSet'
        repogroups:
          allOf:
          - description: Split metrics per defined repository groups.
          - $ref: '#/components/schemas/IndexedGroups'
        aggregate_devgroups:
          allOf:
          - description: Aggregate metrics for each defined developer group.
          - $ref: '#/components/schemas/IndexedGroups'
        labels_include:
          description: PRs must be labeled with at least one name from this list so
            that the related metrics include them.
          items:
            type: string
          type: array
        labels_exclude:
          description: PRs must not be labeled with any name from this list so that
            the related metrics exclude them.
          items:
            type: string
          type: array
        jira:
          $ref: '#/components/schemas/JIRAFilter'
      required:
      - developers
      - repositories
      type: object
    Granularity:
      description: |-
        How often the metrics are reported. The value must satisfy the
        following regular expression: /^all|(([1-9]\d* )?(aligned )?(day|week|month|year))$/.
        "all" produces a single interval [`date_from`, `date_to`].
        "aligned week/month/year" produces intervals cut by calendar week/month/year borders,
        for example, when `date_from` is `2020-01-15` and `date_to` is `2020-03-10`,
        the intervals will be `2020-01-15` - `2020-02-01` - `2020-03-01` - `2020-03-10`.
      example: 2 week
      type: string
    PullRequestMetricsRequest:
      additionalProperties: false
      description: Request for calculating metrics on top of pull requests data.
      example:
        for:
        - repositories:
          - github.com/athenianco/athenian-webapp
          - github.com/athenianco/athenian-api
          with:
            author:
            - github.com/vmarkovtsev
            - github.com/dpordomingo
        - repositories:
          - github.com/athenianco/metadata
          - github.com/athenianco/athenian-api
          with:
            author:
            - github.com/vmarkovtsev
            - github.com/se7entyse7en
        metrics:
        - pr-lead-time
        - pr-wip-time
        date_from: 2020-01-23
        date_to: 2020-01-24
        granularities:
        - day
        account: 1
        exclude_inactive: true
      properties:
        for:
          description: |-
            Sets of developers and repositories for which to calculate the metrics.
            The aggregation is `AND` between repositories and developers.
            The aggregation is `OR` inside both repositories and developers.
          items:
            $ref: '#/components/schemas/ForSet'
          type: array
        metrics:
          description: Requested metric identifiers.
          items:
            $ref: '#/components/schemas/PullRequestMetricID'
          type: array
        date_from:
          description: Date from when to start measuring the metrics.
          format: date
          type: string
        date_to:
          description: Date up to which to measure the metrics.
          format: date
          type: string
        timezone:
          $ref: '#/components/schemas/TimeZone'
        granularities:
          items:
            $ref: '#/components/schemas/Granularity'
          type: array
        quantiles:
          $ref: '#/components/schemas/Quantiles'
        exclude_inactive:
          description: Value indicating whether PRs without events in the given time
            frame shall be ignored.
          type: boolean
        account:
          description: Session account ID.
          type: integer
        fresh:
          description: Force metrics calculation on the most up to date data.
          type: boolean
      required:
      - account
      - date_from
      - date_to
      - exclude_inactive
      - for
      - granularities
      - metrics
      type: object
    CalculatedPullRequestMetricsItem:
      additionalProperties: false
      description: Series of calculated metrics for a specific set of repositories
        and developers.
      example:
        values:
        - date: 2020-01-23
          values:
          - 0.8008282
          - 0.8008282
          confidence_mins:
          - 0.5
          - 0.5
          confidence_maxs:
          - 1.0
          - 1.0
          confidence_scores:
          - 75
          - 75
        - date: 2020-01-24
          values:
          - 0.8008282
          - 0.8008282
          confidence_mins:
          - 0.5
          - 0.5
          confidence_maxs:
          - 1.0
          - 1.0
          confidence_scores:
          - 75
          - 75
        for:
          repositories:
          - github.com/athenianco/athenian-webapp
          - github.com/athenianco/athenian-api
          developers:
          - github.com/vmarkovtsev
          - github.com/dpordomingo
        granularity: day
      properties:
        for:
          $ref: '#/components/schemas/ForSet'
        granularity:
          $ref: '#/components/schemas/Granularity'
        values:
          description: The sequence steps from `date_from` till `date_to` by `granularity`.
          items:
            $ref: '#/components/schemas/CalculatedLinearMetricValues'
          type: array
      required:
      - for
      - values
      type: object
    Quantiles:
      description: |-
        Cut the distributions at certain quantiles.
        The default values are [0, 1] which means no cutting.
      example:
      - 0
      - 0.95
      items:
        maximum: 1
        minimum: 0
        type: number
      maxItems: 2
      minItems: 2
      type: array
    CalculatedPullRequestMetrics:
      additionalProperties: false
      description: Response from `/metrics/pull_requests`. The dates start from `date_from`
        and end earlier or equal to `date_to`.
      example:
        metrics:
        - pr-lead-time
        - pr-wip-time
        date_from: 2020-01-23
        date_to: 2020-01-24
        granularities:
        - day
        exclude_inactive: true
        calculated:
        - values:
          - date: 2020-01-23
            values:
            - 0.8008282
            - 0.8008282
            confidence_mins:
            - 0.5
            - 0.5
            confidence_maxs:
            - 1.0
            - 1.0
            confidence_scores:
            - 75
            - 75
          - date: 2020-01-24
            values:
            - 0.8008282
            - 0.8008282
            confidence_mins:
            - 0.5
            - 0.5
            confidence_maxs:
            - 1.0
            - 1.0
            confidence_scores:
            - 75
            - 75
          for:
            developers:
            - github.com/vmarkovtsev
            - github.com/dpordomingo
            repositories:
            - github.com/athenianco/athenian-webapp
            - github.com/athenianco/athenian-api
        - values:
          - date: 2020-01-23
            values:
            - 0.8008282
            - 0.8008282
            confidence_mins:
            - 0.5
            - 0.5
            confidence_maxs:
            - 1.0
            - 1.0
            confidence_scores:
            - 75
            - 75
          - date: 2020-01-24
            values:
            - 0.8008282
            - 0.8008282
            confidence_mins:
            - 0.5
            - 0.5
            confidence_maxs:
            - 1.0
            - 1.0
            confidence_scores:
            - 75
            - 75
          for:
            developers:
            - github.com/vmarkovtsev
            - github.com/dpordomingo
            repositories:
            - github.com/athenianco/athenian-webapp
            - github.com/athenianco/athenian-api
      properties:
        calculated:
          description: Values of the requested metrics through time.
          items:
            $ref: '#/components/schemas/CalculatedPullRequestMetricsItem'
          type: array
        metrics:
          description: Repeats `PullRequestMetricsRequest.metrics`.
          items:
            $ref: '#/components/schemas/PullRequestMetricID'
          type: array
        date_from:
          description: Repeats `PullRequestMetricsRequest.date_from`.
          format: date
          type: string
        date_to:
          description: Repeats `PullRequestMetricsRequest.date_to`.
          format: date
          type: string
        timezone:
          $ref: '#/components/schemas/TimeZone'
        granularities:
          items:
            $ref: '#/components/schemas/Granularity'
          type: array
        quantiles:
          $ref: '#/components/schemas/Quantiles'
        exclude_inactive:
          description: Repeats `PullRequestMetricsRequest.exclude_inactive`.
          type: boolean
      required:
      - calculated
      - date_from
      - date_to
      - exclude_inactive
      - granularities
      - metrics
      type: object
    CalculatedLinearMetricValues:
      additionalProperties: false
      example:
        date: 2020-01-23
        values:
        - 0.8008282
        - 0.8008282
        confidence_mins:
        - 0.5
        - 0.5
        confidence_maxs:
        - 1.0
        - 1.0
        confidence_scores:
        - 75
        - 75
      properties:
        date:
          description: Where you should relate the metric value to on the time axis.
          format: date
          type: string
        values:
          description: Calculated metric values in the same order as `metrics`.
          items:
# {% if False %}
            allOf:
# {% else %}{{ "\n" }}            oneOf:{% endif %}
            - type: integer
            - format: float
              type: number
            - $ref: '#/components/schemas/TimeDuration'
            - type: object
          type: array
        confidence_mins:
          description: Confidence interval @ p=0.8, minimum. The same order as `metrics`.
            It is optional because there can be exact metrics like "count open PRs
            per month".
          items:
# {% if False %}
            allOf:
# {% else %}{{ "\n" }}            oneOf:{% endif %}
            - type: integer
            - format: float
              type: number
            - $ref: '#/components/schemas/TimeDuration'
            - nullable: true
          type: array
        confidence_maxs:
          description: Confidence interval @ p=0.8, maximum. The same order as `metrics`.
            It is optional because there can be exact metrics like "count open PRs
            per month".
          items:
# {% if False %}
            allOf:
# {% else %}{{ "\n" }}            oneOf:{% endif %}
            - type: integer
            - format: float
              type: number
            - $ref: '#/components/schemas/TimeDuration'
            - nullable: true
          type: array
        confidence_scores:
          description: Confidence score from 0 (random guess) to 100 (very confident).
            The same order as `metrics`. May be `null` for exact metrics.
          items:
# {% if False %}
            allOf:
# {% else %}{{ "\n" }}            oneOf:{% endif %}
            - type: integer
            - nullable: true
          type: array
      required:
      - date
      - values
      type: object
    FilterRepositoriesRequest:
      additionalProperties: false
      description: Filters for `/filter/repositories`.
      example:
        account: 1
        date_from: 2020-01-23
        date_to: 2020-05-23
        in:
        - '{1}'
      properties:
        account:
          description: Session account ID.
          type: integer
        date_from:
          description: Updates must be later than or equal to this date. An update
            is any action that influences the stage assignment.
          format: date
          type: string
        date_to:
          description: Updates must be earlier than or equal to this date. An update
            is any action that influences the stage assignment.
          format: date
          type: string
        timezone:
          $ref: '#/components/schemas/TimeZone'
        in:
          $ref: '#/components/schemas/RepositorySet'
        exclude_inactive:
          description: Value indicating whether PRs without events in the given time
            frame shall be ignored as repository triggers.
          type: boolean
      required:
      - account
      - date_from
      - date_to
      type: object
    FilterReleasesRequest:
      additionalProperties: false
      description: Filters for `/filter/releases`.
      example:
        account: 1
        date_from: 2020-01-23
        date_to: 2020-05-23
        in:
        - '{1}'
        with:
          pr_author:
          - github.com/vmarkovtsev
      properties:
        account:
          description: Session account ID.
          type: integer
        date_from:
          description: Updates must be later than or equal to this date. An update
            is any action that influences the stage assignment.
          format: date
          type: string
        date_to:
          description: Updates must be earlier than or equal to this date. An update
            is any action that influences the stage assignment.
          format: date
          type: string
        timezone:
          $ref: '#/components/schemas/TimeZone'
        in:
          $ref: '#/components/schemas/RepositorySet'
        with:
          $ref: '#/components/schemas/ReleaseWith'
        labels_include:
          description: At least one of these labels must be present in at least one
            released PR.
          items:
            type: string
          type: array
        labels_exclude:
          description: None of these labels must be present in each released PR.
          items:
            type: string
          type: array
        jira:
          $ref: '#/components/schemas/JIRAFilter'
      required:
      - account
      - date_from
      - date_to
      type: object
    FilterContributorsRequest:
      additionalProperties: false
      description: Filters for `/filter/contributors`.
      example:
        account: 1
        date_from: 2020-01-23
        date_to: 2020-05-23
        in:
        - '{1}'
        as:
        - author
        - committer
      properties:
        account:
          description: Session account ID.
          type: integer
        date_from:
          description: Updates must be later than or equal to this date. An update
            is any action that influences the stage assignment.
          format: date
          type: string
        date_to:
          description: Updates must be earlier than or equal to this date. An update
            is any action that influences the stage assignment.
          format: date
          type: string
        timezone:
          $ref: '#/components/schemas/TimeZone'
        in:
          $ref: '#/components/schemas/RepositorySet'
        as:
          description: Filter by contribution type. A `null` or an empty list select
            all.
          items:
            enum:
            - author
            - reviewer
            - commit_author
            - commit_committer
            - commenter
            - merger
            - releaser
            type: string
          type: array
      required:
      - account
      - date_from
      - date_to
      type: object
    FilterPullRequestsRequest:
      additionalProperties: false
      description: Filters for `/filter/pull_requests`. Empty `properties` passes
        through all PRs matched by the other filters.
      example:
        account: 1
        date_from: 2020-01-23
        date_to: 2020-05-23
        in:
        - '{1}'
        stages:
        - wip
        with:
          author:
          - github.com/vmarkovtsev
        exclude_inactive: true
      properties:
        account:
          description: Session account ID.
          type: integer
        date_from:
          description: PRs must be updated later than or equal to this date.
          format: date
          type: string
        date_to:
          description: PRs must be updated earlier than or equal to this date.
          format: date
          type: string
        timezone:
          $ref: '#/components/schemas/TimeZone'
        in:
          $ref: '#/components/schemas/RepositorySet'
        events:
          description: Allowed PR events that happened between `date_from` and `date_to`.
          items:
            $ref: '#/components/schemas/PullRequestEvent'
          type: array
        stages:
          description: Allowed PR stages that are defined at `date_to`.
          items:
            $ref: '#/components/schemas/PullRequestStage'
          type: array
        with:
          $ref: '#/components/schemas/PullRequestWith'
        labels_include:
          description: At least one of these labels must be present in each returned
            PR.
          items:
            type: string
          type: array
        labels_exclude:
          description: None of these labels must be present in each returned PR.
          items:
            type: string
          type: array
        exclude_inactive:
          description: Value indicating whether PRs without events in the given time
            frame shall be ignored.
          type: boolean
        jira:
          $ref: '#/components/schemas/JIRAFilter'
        updated_from:
          description: 'Paginate the response: the returned PRs are updated no older
            than this timestamp, including the beginning.'
          format: date
          type: string
        updated_to:
          description: 'Paginate the response: the returned PRs are updated no later
            than this timestamp, not including the ending.'
          format: date
          type: string
        limit:
          description: Maximum number of pull requests to return. The list is sorted
            by the last update timestamp. `null` means no limit.
          minimum: 1
          nullable: true
          type: integer
      required:
      - account
      - date_from
      - date_to
      - exclude_inactive
      - in
      type: object
    PullRequestEvent:
      description: |-
        PR's modelled lifecycle events.
        * `created`: The PR was opened.
        * `committed`: Somebody pushed a commit to the PR.
        * `review_requested`: Somebody requested a PR review.
        * `reviewed`: Somebody reviewed the PR (either approved, requested changes, or commented).
        * `approved`: Somebody approved the PR. Note that if there were negative reviews from other participants, an approval does *not* trigger this event.
        * `changes_requested`: Somebody submitted a negative PR review.
        * `merged`: Somebody merged the PR.
        * `released`: The PR was released.
        * `rejected`: Somebody closed the PR without merging.
      enum:
      - created
      - committed
      - review_requested
      - reviewed
      - approved
      - changes_requested
      - merged
      - released
      - rejected
      example: created
      type: string
    PullRequestStage:
      description: |-
        PR's modelled lifecycle stages.
        * `wip`: The PR is a work-in-progress: no reviews, no review requests, not closed.
        * `reviewing`: The PR is going through a review process.
        * `merging`: The PR was approved and is waiting for merge.
        * `releasing`: The PR was merged but is not released yet.
        * `force_push_dropped`: The PR was closed but the Git commit history was rewritten and the PR's commits no longer exist.
        * `done`: The PR was either closed without merging or released or force push dropped.
      enum:
      - wip
      - reviewing
      - merging
      - releasing
      - force_push_dropped
      - done
      example: created
      type: string
    PullRequestSet:
      additionalProperties: false
      description: List of pull requests together with the participant profile pictures.
      example:
        include:
          users:
            key:
              avatar: https://avatars0.githubusercontent.com/u/60340680?v=4
        data:
        - repository: github.com/athenianco/athenian-webapp
          number: 1111
          title: '[DEV-1802] epic search'
          size_added: 128
          size_removed: 30
          files_changed: 5
          created: 2021-03-02T11:47:42Z
          updated: 2021-03-03T13:55:33Z
          closed: 2021-03-03T13:55:32Z
          comments: 5
          commits: 17
          review_requested: 2021-03-02T12:14:35Z
          first_review: 2021-03-02T15:09:58Z
          approved: 2021-03-03T13:15:58Z
          review_comments: 2
          reviews: 2
          merged: 2021-03-03T13:55:32Z
          stage_timings:
            wip: 12085s
            review: 86690s
            merge: 2374s
          events_now:
          - approved
          - changes_requested
          - committed
          - created
          - merged
          - review_requested
          - reviewed
          stages_now:
          - done
          - force_push_dropped
          participants:
          - id: github.com/akbarik
            status:
            - author
            - commit_author
            - commit_committer
            - merger
          - id: github.com/se7entyse7en
            status:
            - reviewer
            - commenter
          - id: github.com/warenlg
            status:
            - commenter
          - id: github.com/znegrin
            status:
            - commit_author
            - commit_committer
          jira:
          - id: DEV-1802
            title: FE - Add search capability to Epics table
            epic: DEV-1474
            labels:
            - functionality
            - webapp
            type: Task
      properties:
        include:
          $ref: '#/components/schemas/IncludedNativeUsers'
        data:
          description: List of matched pull requests.
          items:
            $ref: '#/components/schemas/PullRequest'
          type: array
      required:
      - data
      - include
      type: object
    IncludedNativeUser:
      additionalProperties: false
      description: User traits such as the avatar URL.
      example:
        avatar: https://avatars0.githubusercontent.com/u/60340680?v=4
      properties:
        avatar:
          format: url
          type: string
      required:
      - avatar
      type: object
    IncludedNativeUsers:
      description: Mentioned GitHub users.
      example:
        users:
          github.com/gkwillie:
            avatar: https://avatars0.githubusercontent.com/u/60340680?v=4
      properties:
        users:
          additionalProperties:
            $ref: '#/components/schemas/IncludedNativeUser'
          description: Mapping user native (e.g., GitHub) login ID -> user details.
            The users are mentioned in the PRs from "PullRequestSet.data" or in the
            commits from "FilterCommitsRequest.data".
          type: object
      required:
      - users
      type: object
    PullRequest:
      additionalProperties: false
      description: Details of a pull request. All the attributes, stats and events
        correspond to "today", not `date_to`, *except for the PR stages `wip`, `reviewing`,
        `merging`, `releasing`*, which correspond to `date_to`.
      example:
        repository: github.com/athenianco/athenian-webapp
        number: 1111
        title: '[DEV-1802] epic search'
        size_added: 128
        size_removed: 30
        files_changed: 5
        created: 2021-03-02T11:47:42Z
        updated: 2021-03-03T13:55:33Z
        closed: 2021-03-03T13:55:32Z
        comments: 5
        commits: 17
        review_requested: 2021-03-02T12:14:35Z
        first_review: 2021-03-02T15:09:58Z
        approved: 2021-03-03T13:15:58Z
        review_comments: 2
        reviews: 2
        merged: 2021-03-03T13:55:32Z
        stage_timings:
          wip: 12085s
          review: 86690s
          merge: 2374s
        events_now:
        - approved
        - changes_requested
        - committed
        - created
        - merged
        - review_requested
        - reviewed
        stages_now:
        - done
        - force_push_dropped
        participants:
        - id: github.com/akbarik
          status:
          - author
          - commit_author
          - commit_committer
          - merger
        - id: github.com/se7entyse7en
          status:
          - reviewer
          - commenter
        - id: github.com/warenlg
          status:
          - commenter
        - id: github.com/znegrin
          status:
          - commit_author
          - commit_committer
        jira:
        - id: DEV-1802
          title: FE - Add search capability to Epics table
          epic: DEV-1474
          labels:
          - functionality
          - webapp
          type: Task
      properties:
        repository:
          description: PR is/was open in this repository.
          type: string
        number:
          description: PR number.
          minimum: 1
          type: integer
        title:
          description: Title of the PR.
          type: string
        size_added:
          description: Overall number of lines added.
          minimum: 0
          type: integer
        size_removed:
          description: Overall number of lines removed.
          minimum: 0
          type: integer
        files_changed:
          description: Number of files changed in this PR.
          minimum: 0
          type: integer
        created:
          description: When this PR was created.
          format: date-time
          type: string
        updated:
          description: When this PR was last updated.
          format: date-time
          type: string
        closed:
          description: When this PR was last closed.
          format: date-time
          type: string
        comments:
          description: Number of *regular* (not review) comments in this PR.
          minimum: 0
          type: integer
        commits:
          description: Number of commits in this PR.
          minimum: 0
          type: integer
        review_requested:
          description: When was the first time the author of this PR requested a review.
          format: date-time
          type: string
        first_review:
          description: When the first review of this PR happened.
          format: date-time
          type: string
        approved:
          description: When this PR was approved.
          format: date-time
          type: string
        review_comments:
          description: |-
            Number of review comments this PR received. A review comment is left at
            a specific line in a specific file. In other words: review summaries are
            *not* considered review comments; refer to `reviews`. Comments by the PR
            author are considered as `comments`, not as `review_comments`.
          minimum: 0
          type: integer
        reviews:
          description: Number of times this PR was reviewed. Reviews by the PR author
            are not taken into account.
          minimum: 0
          type: integer
        merged:
          description: When this PR was merged.
          format: date-time
          type: string
        released:
          description: When this PR was released.
          format: date-time
          type: string
        release_url:
          description: URL of the earliest release that includes this merged PR.
          format: url
          type: string
        stage_timings:
          $ref: '#/components/schemas/StageTimings'
        events_time_machine:
          description: List of PR events which happened until `date_to`. `date_from`
            does not matter.
          items:
            $ref: '#/components/schemas/PullRequestEvent'
          type: array
        stages_time_machine:
          description: List of PR stages as of `date_to` (normally, of length 1).
          items:
            $ref: '#/components/schemas/PullRequestStage'
          type: array
        events_now:
          description: List of PR events that ever happened.
          items:
            $ref: '#/components/schemas/PullRequestEvent'
          type: array
        stages_now:
          description: List of current PR stages (normally, of length 1).
          items:
            $ref: '#/components/schemas/PullRequestStage'
          type: array
        participants:
          description: List of developers related to this PR.
          items:
            $ref: '#/components/schemas/PullRequestParticipant'
          type: array
        labels:
          description: List of PR labels.
          items:
            $ref: '#/components/schemas/PullRequestLabel'
          type: array
        jira:
          description: List of linked JIRA issues.
          items:
            $ref: '#/components/schemas/LinkedJIRAIssue'
          type: array
      required:
      - comments
      - commits
      - created
      - events_now
      - files_changed
      - number
      - participants
      - repository
      - size_added
      - size_removed
      - stage_timings
      - stages_now
      - title
      - updated
      type: object
    StageTimings:
      additionalProperties: false
      description: Time spent by the PR in each pipeline stage.
      example:
        wip: 120s
        review: 600s
      properties:
        wip:
          type: string
        review:
          type: string
        merge:
          type: string
        release:
          type: string
      required:
      - wip
      type: object
    PullRequestParticipant:
      additionalProperties: false
      description: Developer and their role in the PR.
      properties:
        id:
          description: Person identifier.
          example: github.com/vmarkovtsev
          type: string
        status:
          items:
            enum:
            - author
            - reviewer
            - commit_author
            - commit_committer
            - commenter
            - merger
            - releaser
            type: string
          type: array
      required:
      - id
      - status
      type: object
    PullRequestWith:
      additionalProperties: false
      description: |-
        Triage PRs by various developer participation. The aggregation is `OR` between
        the participation groups and `OR` within each group. For example, if our request is
        ```
        {"author": ["github.com/vmarkovtsev"], "reviewer": ["github.com/gkwillie", "github.com/mcuadros"]}
        ```
        then the matched PRs will have **@vmarkovtsev** as the author or either
        **@gkwillie** or **@mcuadros** as the reviewers.
      example:
        author:
        - github.com/vmarkovtsev
      properties:
        author:
          $ref: '#/components/schemas/DeveloperSet'
        reviewer:
          $ref: '#/components/schemas/DeveloperSet'
        commit_author:
          $ref: '#/components/schemas/DeveloperSet'
        commit_committer:
          $ref: '#/components/schemas/DeveloperSet'
        commenter:
          $ref: '#/components/schemas/DeveloperSet'
        merger:
          $ref: '#/components/schemas/DeveloperSet'
        releaser:
          $ref: '#/components/schemas/DeveloperSet'
      type: object
    PullRequestLabel:
      additionalProperties: false
      description: Pull request label.
      example:
        name: bug
        color: fc2929
      properties:
        name:
          type: string
        description:
          type: string
        color:
          type: string
      required:
      - color
      - name
      type: object
    FilterCommitsRequest:
      additionalProperties: false
      description: Filter for listing commits.
      example:
        account: 1
        date_from: 2020-01-23
        date_to: 2020-05-23
        in:
        - '{1}'
        property: bypassing_prs
      properties:
        account:
          description: Session account ID.
          type: integer
        date_from:
          description: Commits must be made later than or equal to this date.
          format: date
          type: string
        date_to:
          description: Commits must be made earlier than or equal to this date.
          format: date
          type: string
        timezone:
          $ref: '#/components/schemas/TimeZone'
        in:
          $ref: '#/components/schemas/RepositorySet'
        with_author:
          $ref: '#/components/schemas/DeveloperSet'
        with_committer:
          $ref: '#/components/schemas/DeveloperSet'
        property:
          description: |-
            Main trait of the commits - the core of the filter.
            * no_pr_merges: select all the commits but PR merges by noreply@github.com
            * bypassing_prs: select commits that were pushed without creating a PR
          enum:
          - no_pr_merges
          - bypassing_prs
          type: string
        only_default_branch:
          description: |-
            Consider only commits that are accessible from the head of the default branch.
            For example, if your workflow includes PR-ing feature branches, you rebase and merge
            them and don't delete afterward, `bypassing_prs` will report the commits in those
            feature branches unless you set `only_default_branch` to `true`.
          type: boolean
      required:
      - account
      - date_from
      - date_to
      - in
      - property
      type: object
    CommitsList:
      additionalProperties: false
      description: List of commits metadata and related user details.
      example:
        include:
          users:
            github.com/gkwillie:
              avatar: https://avatars0.githubusercontent.com/u/60340680?v=4
        data:
        - repository: github.com/athenianco/athenian-api
          hash: 79f0bccb856b35ef08ec93da2ff5585da4d2e50e
          author:
            login: github.com/gkwillie
            name: Groundskeeper Willie
            email: bot@athenian.co
            timestamp: 2020-02-25T14:27:21Z
            timezone: 1.0
          committer:
            login: github.com/gkwillie
            name: Groundskeeper Willie
            email: bot@athenian.co
            timestamp: 2020-02-25T14:27:21Z
            timezone: 1.0
          message: 'Bump version: 0.0.42 → 0.0.43'
          size_added: 1
          size_removed: 1
          files_changed: 1
        - repository: github.com/athenianco/athenian-api
          hash: 0d13a3e021fe4219915ba97ea07e465e429a621f
          author:
            login: github.com/gkwillie
            name: Groundskeeper Willie
            email: bot@athenian.co
            timestamp: 2020-03-20T10:06:49Z
            timezone: 1.0
          committer:
            login: github.com/gkwillie
            name: Groundskeeper Willie
            email: bot@athenian.co
            timestamp: 2020-03-20T10:06:49Z
            timezone: 1.0
          message: 'Bump version: 0.0.78 → 0.0.79'
          size_added: 1
          size_removed: 1
          files_changed: 1
      properties:
        data:
          items:
            $ref: '#/components/schemas/Commit'
          type: array
        include:
          $ref: '#/components/schemas/IncludedNativeUsers'
      required:
      - data
      - include
      type: object
    Commit:
      additionalProperties: false
      description: Information about a commit.
      example:
        repository: github.com/athenianco/athenian-api
        hash: 79f0bccb856b35ef08ec93da2ff5585da4d2e50e
        author:
          login: github.com/gkwillie
          name: Groundskeeper Willie
          email: bot@athenian.co
          timestamp: 2020-02-25T14:27:21Z
          timezone: 1.0
        committer:
          login: github.com/gkwillie
          name: Groundskeeper Willie
          email: bot@athenian.co
          timestamp: 2020-02-25T14:27:21Z
          timezone: 1.0
        message: 'Bump version: 0.0.42 → 0.0.43'
        size_added: 1
        size_removed: 1
        files_changed: 1
      properties:
        repository:
          $ref: '#/components/schemas/RepositoryID'
        hash:
          description: Git commit hash.
          type: string
        author:
          $ref: '#/components/schemas/CommitSignature'
        committer:
          $ref: '#/components/schemas/CommitSignature'
        message:
          description: Commit message.
          type: string
        size_added:
          description: Overall number of lines added.
          minimum: 0
          type: integer
        size_removed:
          description: Overall number of lines removed.
          minimum: 0
          type: integer
        files_changed:
          description: Number of files changed in this PR.
          minimum: 0
          type: integer
      required:
      - author
      - committer
      - files_changed
      - hash
      - message
      - repository
      - size_added
      - size_removed
      type: object
    CommitSignature:
      additionalProperties: false
      description: Git commit signature. It is guaranteed that `login` and/or `name`&`email`
        are present.
      example:
        login: github.com/vmarkovtsev
        name: Vadim Markovtsev
        email: vadim@athenian.co
        timestamp: 2020-02-25T14:27:21Z
        timezone: 1.0
      properties:
        login:
          $ref: '#/components/schemas/DeveloperID'
        name:
          description: Git signature name.
          type: string
        email:
          description: Git signature email.
          type: string
        timestamp:
          description: When the corresponding action happened in UTC.
          format: date-time
          type: string
        timezone:
          description: Timezone offset of the action timestamp (in hours).
          format: float
          type: number
      required:
      - timestamp
      - timezone
      type: object
    CodeFilter:
      additionalProperties: false
      description: Filter for revealing code bypassing PRs.
      example:
        account: 1
        date_from: 2020-01-01
        date_to: 2020-03-01
        granularity: day
        in:
        - '{1}'
        with_author:
        - github.com/vmarkovtsev
      properties:
        account:
          description: Session account ID.
          type: integer
        date_from:
          description: Commits must be made later than or equal to this date.
          format: date
          type: string
        date_to:
          description: Commits must be made earlier than or equal to this date.
          format: date
          type: string
        timezone:
          $ref: '#/components/schemas/TimeZone'
        in:
          $ref: '#/components/schemas/RepositorySet'
        with_author:
          $ref: '#/components/schemas/DeveloperSet'
        with_committer:
          $ref: '#/components/schemas/DeveloperSet'
        granularity:
          $ref: '#/components/schemas/Granularity'
        only_default_branch:
          description: |-
            Consider only commits that are accessible from the head of the default branch.
            For example, if your workflow includes PR-ing feature branches, you rebase and merge
            them and don't delete afterward, `bypassing_prs` will report the commits in those
            feature branches unless you set `only_default_branch` to `true`.
          type: boolean
      required:
      - account
      - date_from
      - date_to
      - granularity
      - in
      type: object
    MeasuredCodeBypassingPRs:
      description: Statistics about code pushed outside of pull requests.
      example:
      - date: 2020-01-23
        bypassed_commits: 1
        bypassed_lines: 20
        total_commits: 2
        total_lines: 50
      - date: 2020-01-24
        bypassed_commits: 2
        bypassed_lines: 30
        total_commits: 3
        total_lines: 60
      items:
        $ref: '#/components/schemas/CodeBypassingPRsMeasurement'
      type: array
    CodeBypassingPRsMeasurement:
      additionalProperties: false
      description: Statistics about code pushed outside of pull requests in a certain
        time interval.
      example:
        date: 2020-01-23
        bypassed_commits: 1
        bypassed_lines: 20
        total_commits: 2
        total_lines: 50
      properties:
        date:
          description: Commits were pushed beginning with this date. They were not
            pushed later than +granularity.
          format: date
          type: string
        bypassed_commits:
          description: Number of commits that bypassed PRs in the time interval.
          minimum: 0
          type: integer
        bypassed_lines:
          description: Number of changed (added + removed) lines that bypassed PRs
            in the time interval.
          minimum: 0
          type: integer
        total_commits:
          description: Overall number of commits in the time interval.
          minimum: 0
          type: integer
        total_lines:
          description: Overall number of changed (added + removed) lines in the time
            interval.
          minimum: 0
          type: integer
      required:
      - bypassed_commits
      - bypassed_lines
      - date
      - total_commits
      - total_lines
      type: object
    DeveloperMetricsRequest:
      additionalProperties: false
      description: Request for calculating metrics on top of developer activities.
      example:
        for:
        - repositories:
          - github.com/athenianco/athenian-webapp
          - github.com/athenianco/athenian-api
          developers:
          - github.com/vmarkovtsev
          - github.com/dpordomingo
        - repositories:
          - github.com/athenianco/athenian-webapp
          - github.com/athenianco/athenian-api
          developers:
          - github.com/vmarkovtsev
          - github.com/dpordomingo
        metrics:
        - dev-reviews
        - dev-prs-created
        - dev-pr-comments
        date_from: 2019-10-23
        date_to: 2020-05-23
        granularities:
        - all
        account: 1
      properties:
        for:
          description: Sets of developers and repositories to calculate the metrics
            for.
          items:
            $ref: '#/components/schemas/ForSetDevelopers'
          type: array
        metrics:
          description: Requested metric identifiers.
          items:
            $ref: '#/components/schemas/DeveloperMetricID'
          type: array
        date_from:
          description: Date from when to start measuring the metrics.
          format: date
          type: string
        date_to:
          description: Date up to which to measure the metrics.
          format: date
          type: string
        timezone:
          $ref: '#/components/schemas/TimeZone'
        account:
          description: Session account ID.
          type: integer
        granularities:
          items:
            $ref: '#/components/schemas/Granularity'
          type: array
      required:
      - account
      - date_from
      - date_to
      - for
      - granularities
      - metrics
      type: object
    DeveloperMetricID:
      description: |-
        Currently supported developer metric types.
        * `dev-commits-pushed`: how many commits were pushed.
        * `dev-lines-changed`: how many lines were either inserted or removed in the pushed commits.
        * `dev-prs-created`: how many PRs were created.
        * `dev-prs-reviewed`: how many *distinct* PRs were reviewed (approved, rejected or neutral).
        * `dev-prs-merged`: how many PRs were merged by this developer. This is *not* how many authored PRs were merged!
        * `dev-releases`: how many releases were authored by this developer.
        * `dev-reviews`: how many reviews were submitted. One PR may have several reviews by the same developer! This value equals to the sum of `dev-review-approvals`, `dev-review-rejections` and `dev-review-neutrals`.
        * `dev-review-approvals`: how many approvals this developer submitted. One PR may have several approvals by the same developer!
        * `dev-review-rejections`: how many rejections this developer submitted. One PR may have several rejections by the same developer!
        * `dev-review-neutrals`: how many neutral ("comment") reviews this developer submitted. One PR may have several neutral reviews by the same developer!
        * `dev-pr-comments`: how many comments (both regular and review) this developer posted.
        * `dev-regular-pr-comments`: how many regular comments (not review suggestions!) this developer posted.
        * `dev-review-pr-comments`: how many review suggestions (summaries are not considered!) this developer posted.
        * `dev-active`: indicates whether this developer has made commits on more than X days during T days. `X / T = 0.2` at the moment.
      enum:
      - dev-commits-pushed
      - dev-lines-changed
      - dev-prs-created
      - dev-prs-reviewed
      - dev-prs-merged
      - dev-releases
      - dev-reviews
      - dev-review-approvals
      - dev-review-rejections
      - dev-review-neutrals
      - dev-pr-comments
      - dev-regular-pr-comments
      - dev-review-pr-comments
      - dev-active
      example: dev-prs-created
      type: string
    CalculatedDeveloperMetrics:
      additionalProperties: false
      description: Response of `/metrics/developers`. The dates start from `date_from`
        and end earlier or equal to `date_to`.
      example:
        date_from: 2020-01-23
        date_to: 2020-01-24
        granularities:
        - all
        metrics:
        - dev-prs-created
        - dev-reviews
        calculated:
        - values:
          - - date: 2020-01-23
              values:
              - 5
              - 10
          - - date: 2020-01-23
              values:
              - 20
              - 100
          for:
            repositories:
            - github.com/athenianco/athenian-webapp
            - github.com/athenianco/athenian-api
            developers:
            - github.com/vmarkovtsev
            - github.com/dpordomingo
          granularity: all
      properties:
        calculated:
          description: Values of the requested metrics by developer through time.
          items:
            $ref: '#/components/schemas/CalculatedDeveloperMetricsItem'
          type: array
        metrics:
          description: Repeats `DeveloperMetricsRequest.metrics`.
          items:
            $ref: '#/components/schemas/DeveloperMetricID'
          type: array
        date_from:
          description: Repeats `DeveloperMetricsRequest.date_from`.
          format: date
          type: string
        date_to:
          description: Repeats `DeveloperMetricsRequest.date_to`.
          format: date
          type: string
        timezone:
          $ref: '#/components/schemas/TimeZone'
        granularities:
          items:
            $ref: '#/components/schemas/Granularity'
          type: array
      required:
      - calculated
      - date_from
      - date_to
      - granularities
      - metrics
      type: object
    CalculatedDeveloperMetricsItem:
      additionalProperties: false
      description: Measured developer metrics for each `DeveloperMetricsRequest.for`.
        Each repository group maps to a distinct `CalculatedDeveloperMetricsItem`.
      example:
        values:
        - - date: 2020-01-23
            values:
            - 5
            - 10
        - - date: 2020-01-23
            values:
            - 20
            - 100
        for:
          repositories:
          - github.com/athenianco/athenian-webapp
          - github.com/athenianco/athenian-api
          developers:
          - github.com/vmarkovtsev
          - github.com/dpordomingo
        granularity: all
      properties:
        for:
          $ref: '#/components/schemas/ForSetDevelopers'
        granularity:
          $ref: '#/components/schemas/Granularity'
        values:
          description: The sequence matches `CalculatedDeveloperMetricsItem.for.developers`.
          items:
            description: The sequence steps from `date_from` till `date_to` by `granularity`.
            items:
              $ref: '#/components/schemas/CalculatedLinearMetricValues'
            type: array
          type: array
      required:
      - for
      - granularity
      - values
      type: object
    DeveloperSummaries:
      description: List of developer activity statistics and profile details.
      example:
      - avatar: https://avatars0.githubusercontent.com/u/60340680?v=4
        login: github.com/gkwillie
        name: Groundskeeper Willie
        updates:
          prs: 4
          commit_author: 10
          commit_committer: 10
          commenter: 3
      items:
        $ref: '#/components/schemas/DeveloperSummary'
      type: array
    DeveloperSummary:
      additionalProperties: false
      description: Developer activity statistics and profile details.
      example:
        avatar: https://avatars0.githubusercontent.com/u/60340680?v=4
        login: github.com/gkwillie
        name: Groundskeeper Willie
        updates:
          prs: 4
          commit_author: 10
          commit_committer: 10
          commenter: 3
      properties:
        login:
          description: Developer's login name.
          example: github.com/gkwillie
          type: string
        name:
          description: Developer's full name.
          example: Groundskeeper Willie
          type: string
        avatar:
          description: Developer's avatar URL.
          example: https://avatars0.githubusercontent.com/u/60340680?v=4
          format: url
          type: string
        updates:
          $ref: '#/components/schemas/DeveloperUpdates'
        jira_user:
          description: Mapped JIRA user name.
          type: string
      required:
      - avatar
      - login
      - name
      - updates
      type: object
    DeveloperUpdates:
      additionalProperties: false
      description: 'Various developer contributions statistics over the specified
        time period. Note: any of these properties may be missing if there was no
        such activity.'
      example:
        prs: 4
        commit_author: 10
        commit_committer: 10
        merger: 3
      properties:
        prs:
          description: 'How many PRs authored by this developer updated. Note: this
            is not the same as the number of PRs this developer opened. Note: the
            update origin is not necessarily this developer.'
          minimum: 0
          type: integer
        reviewer:
          description: 'How many reviews this developer submitted. Note: this is not
            the same as the number of unique PRs reviewed.'
          minimum: 0
          type: integer
        commit_author:
          description: How many commits this developer authored.
          minimum: 0
          type: integer
        commit_committer:
          description: How many commits this developer pushed.
          minimum: 0
          type: integer
        commenter:
          description: 'How many regular PR comments this developer left. Note: issues
            are not taken into account, only the PRs.'
          minimum: 0
          type: integer
        releaser:
          description: How many releases this developer created.
          minimum: 0
          type: integer
      type: object
    ReleaseSet:
      additionalProperties: false
      description: Release metadata and contributor user details.
      example:
        include:
          users:
            github.com/gkwillie:
              avatar: https://avatars0.githubusercontent.com/u/60340680?v=4
          jira: null
        data:
        - added_lines: 1000
          commits: 20
          deleted_lines: 200
          name: v0.0.93
          published: 2020-03-25T10:57:00Z
          publisher: github.com/vmarkovtsev
          publisher_avatar: https://avatars0.githubusercontent.com/u/60340680?v=4
          repository: github.com/athenianco/athenian-api
          url: https://github.com/athenianco/athenian-api/releases/tag/v0.0.93
        - added_lines: 1000
          commits: 20
          deleted_lines: 200
          name: v0.0.93
          published: 2020-03-25T10:57:00Z
          publisher: github.com/vmarkovtsev
          publisher_avatar: https://avatars0.githubusercontent.com/u/60340680?v=4
          repository: github.com/athenianco/athenian-api
          url: https://github.com/athenianco/athenian-api/releases/tag/v0.0.93
      properties:
        include:
          allOf:
          - $ref: '#/components/schemas/IncludedNativeUsers'
          - $ref: '#/components/schemas/IncludedJIRAIssues'
        data:
          description: List of matching release metadata.
          items:
            $ref: '#/components/schemas/FilteredRelease'
          type: array
      type: object
    FilteredRelease:
      additionalProperties: false
      description: Various information about a repository release.
      example:
        added_lines: 1000
        commits: 20
        deleted_lines: 200
        name: v0.0.93
        published: 2020-03-25T10:57:00Z
        publisher: github.com/vmarkovtsev
        publisher_avatar: https://avatars0.githubusercontent.com/u/60340680?v=4
        repository: github.com/athenianco/athenian-api
        url: https://github.com/athenianco/athenian-api/releases/tag/v0.0.93
        prs:
        - number: 176
          title: Fix first account creation
          additions: 34
          deletions: 3
          author: github.com/se7entyse7en
      properties:
        name:
          description: Title of the release.
          type: string
        repository:
          description: Name of the repository where the release exists.
          type: string
        url:
          description: Link to the release.
          format: url
          type: string
        published:
          description: When the release was created.
          format: date-time
          type: string
        age:
          description: Time since the previous release /\d+s/.
          type: string
        added_lines:
          description: Cumulative number of lines inserted since the previous release.
          minimum: 0
          type: integer
        deleted_lines:
          description: Cumulative number of lines removed since the previous release.
          minimum: 0
          type: integer
        commits:
          description: Number of commits since the previous release.
          minimum: 0
          type: integer
        publisher:
          description: Login of the person who created the release.
          type: string
        commit_authors:
          description: List of released commit authors' logins.
          items:
            $ref: '#/components/schemas/DeveloperID'
          type: array
        prs:
          description: List of released pull requests.
          items:
            $ref: '#/components/schemas/ReleasedPullRequest'
          type: array
      required:
      - added_lines
      - age
      - commit_authors
      - commits
      - deleted_lines
      - name
      - prs
      - published
      - publisher
      - repository
      - url
      type: object
    ReleasedPullRequest:
      additionalProperties: false
      description: Details about a pull request listed in `/filter/releases`.
      properties:
        number:
          type: integer
        title:
          type: string
        additions:
          type: integer
        deletions:
          type: integer
        author:
          $ref: '#/components/schemas/DeveloperID'
        jira:
          description: Mapped JIRA issue IDs.
          items:
            type: string
          type: array
      required:
      - additions
      - author
      - deletions
      - number
      - title
      type: object
    GetReleasesRequest:
      additionalProperties: false
      description: Request body of `/get/releases`. Declaration of which releases
        the user wants to list.
      example:
        account: 1
        releases:
        - repository: github.com/athenianco/athenian-api
          names:
          - v0.7.53
          - v0.6.10
      properties:
        account:
          description: Account ID.
          type: integer
        releases:
          description: List of repositories and release names to list.
          items:
            $ref: '#/components/schemas/ReleaseNames'
          type: array
      required:
      - account
      - releases
      type: object
    IncludedJIRAIssues:
      description: Mentioned JIRA issues.
      example:
        jira:
          DEV-344:
            id: DEV-344
            title: Write the API specs to filter PRs by Jira epic, ticket type and
              label.
            epic: DEV-149
            labels:
            - API
            type: task
      properties:
        jira:
          additionalProperties:
            $ref: '#/components/schemas/LinkedJIRAIssue'
          description: Mapping JIRA issue ID -> details.
          type: object
      required:
      - jira
      type: object
    ReleaseMatchRequest:
      additionalProperties: false
      description: Release matching rule setting.
      example:
        account: 1
        repositories:
        - github.com/athenianco/athenian-webapp
        - github.com/athenianco/athenian-api
        match: branch
        branches: master
        tags: .*
      properties:
        account:
          description: Account ID.
          type: integer
        repositories:
          $ref: '#/components/schemas/RepositorySet'
        branches:
          description: 'Regular expression to match branch names. Reference: https://www.postgresql.org/docs/current/functions-matching.html#FUNCTIONS-SIMILARTO-REGEXP'
          type: string
        tags:
          description: 'Regular expression to match tag names. Reference: https://www.postgresql.org/docs/current/functions-matching.html#FUNCTIONS-SIMILARTO-REGEXP'
          type: string
        match:
          $ref: '#/components/schemas/ReleaseMatchStrategy'
      required:
      - account
      - match
      - repositories
      type: object
    ReleaseMatchStrategy:
      description: |-
        Release workflow choice: how we should detect releases.
        * `branch`: merges to certain branches are considered releases and nothing else.
        * `event`: releases are manually registered with `POST /events/releases`.
        * `tag`: tags with certain name patterns are considered releases and nothing else.
        * `tag_or_branch`: follow "tag"; if the repository does not have tags, fallback to "branch".
      enum:
      - branch
      - event
      - tag
      - tag_or_branch
      type: string
    ReleaseMatchSettings:
      additionalProperties:
        $ref: '#/components/schemas/ReleaseMatchSetting'
      description: Mapping from repository names to their release match settings.
      type: object
    ReleaseMatchSetting:
      additionalProperties: false
      description: Release matching setting for a specific repository.
      example:
        branches: '{{ "{{default}}" }}'
        default_branch: master
        tags: .*
        match: tag_or_branch
      properties:
        branches:
          description: 'Regular expression to match branch names. Reference: https://www.postgresql.org/docs/current/functions-matching.html#FUNCTIONS-SIMILARTO-REGEXP'
          type: string
        tags:
          description: 'Regular expression to match tag names. Reference: https://www.postgresql.org/docs/current/functions-matching.html#FUNCTIONS-SIMILARTO-REGEXP'
          type: string
        match:
          $ref: '#/components/schemas/ReleaseMatchStrategy'
        default_branch:
          description: Name of the default branch of this repository.
          type: string
      required:
      - branches
      - default_branch
      - match
      - tags
      type: object
    AccountUserChangeRequest:
      additionalProperties: false
      description: Request to change an account member's status.
      example:
        user: github|60340680
        account: 1
        status: regular
      properties:
        account:
          description: Account ID.
          type: integer
        user:
          description: Account member ID.
          type: string
        status:
          description: Account membership role.
          enum:
          - regular
          - admin
          - banished
          type: string
      required:
      - account
      - status
      - user
      type: object
    Versions:
      additionalProperties: false
      example:
        api: 0.2.10
        metadata: 14
      properties:
        api:
          type: string
        metadata:
          type: string
      required:
      - api
      - metadata
      type: object
    GetPullRequestsRequest:
      additionalProperties: false
      description: Request body of `/get/pull_requests`. Declaration of which PRs
        the user wants to list.
      example:
        account: 1
        prs:
        - repository: github.com/athenianco/athenian-api
          numbers:
          - 483
          - 484
          - 485
      properties:
        account:
          description: Account ID.
          type: integer
        prs:
          description: List of repositories and PR numbers to list.
          items:
            $ref: '#/components/schemas/PullRequestNumbers'
          type: array
      required:
      - account
      - prs
      type: object
    PullRequestNumbers:
      additionalProperties: false
      description: Repository name and a list of PR numbers in that repository.
      example:
        repository: github.com/athenianco/athenian-api
        numbers:
        - 483
        - 484
        - 485
      properties:
        repository:
          $ref: '#/components/schemas/RepositoryID'
        numbers:
          items:
            type: integer
          type: array
      required:
      - numbers
      - repository
      type: object
    ReleaseNames:
      additionalProperties: false
      description: Repository name and a list of release names in that repository.
      example:
        repository: github.com/athenianco/athenian-api
        names:
        - v0.7.53
        - v0.6.10
      properties:
        repository:
          $ref: '#/components/schemas/RepositoryID'
        names:
          description: List of release names. For tag releases, those are the tag
            names. For branch releases, those are commit hashes.
          items:
            type: string
          type: array
      required:
      - names
      - repository
      type: object
    FilterLabelsRequest:
      additionalProperties: false
      description: Request body of `/filter/labels`. Defines the account and the repositories
        where to look for the labels.
      example:
        account: 1
        repositories:
        - github.com/athenianco/athenian-api
        - github.com/athenianco/athenian-webapp
      properties:
        account:
          description: Account ID.
          type: integer
        repositories:
          $ref: '#/components/schemas/RepositorySet'
      required:
      - account
      type: object
    FilteredLabel:
      additionalProperties: false
      description: Details about a label and some basic stats.
      example:
        name: bug
        color: ff0000
        used_prs: 100
      properties:
        name:
          type: string
        description:
          type: string
        color:
          type: string
        used_prs:
          minimum: 0
          type: integer
      required:
      - color
      - name
      - used_prs
      type: object
    FilteredLabels:
      description: List of labels.
      example:
      - name: bug
        color: ff0000
        used_prs: 100
      - name: enhancement
        description: New project feature.
        color: 00ff00
        used_prs: 200
      items:
        $ref: '#/components/schemas/FilteredLabel'
      type: array
    JIRAFilter:
      additionalProperties: false
      description: PR filters related to JIRA traits. The aggregation between each
        filter type is *AND*.
      example:
        epics:
        - DEV-167
        - DEV-230
        labels_include:
        - api,performance
        - metadata
        labels_exclude:
        - feature
        issue_types:
        - Bug
        - Task
      properties:
        epics:
          description: PRs must be linked to at least one JIRA epic from the list.
          items:
            type: string
          type: array
        labels_include:
          description: PRs must relate to at least one JIRA issue label from the list.
            Several labels may be concatenated by a comma `,` so that all of them
            are required.
          items:
            type: string
          type: array
        labels_exclude:
          description: PRs cannot relate to JIRA issue labels from the list.
          items:
            type: string
          type: array
        issue_types:
          description: PRs must be linked to certain JIRA issue types, e.g. Bug, Task,
            Design Document, etc.
          items:
            type: string
          type: array
        unmapped:
          description: Select PRs that are not mapped to any JIRA issue. May not be
            specified with anything else.
          type: boolean
      type: object
    LinkedJIRAIssue:
      additionalProperties: false
      description: Brief details about a JIRA issue.
      example:
        id: DEV-344
        title: Write the API specs to filter PRs by Jira epic, ticket type and label
        epic: DEV-149
        labels:
        - API
        type: task
      properties:
        id:
          description: JIRA issue key `PROJECT-###`.
          type: string
        title:
          description: Title of this issue.
          type: string
        epic:
          description: Identifier of the epic that owns this issue.
          type: string
        labels:
          description: List of JIRA labels in this issue.
          items:
            type: string
          type: array
        type:
          description: Type of this issue.
          type: string
      required:
      - id
      - title
      - type
      type: object
    JIRAIssueType:
      additionalProperties: false
      description: Details about a JIRA issue type.
      example:
        name: Bug
        count: 12
        image: https://athenianco.atlassian.net/secure/viewavatar?size=medium&avatarId=10303&avatarType=issuetype
        project: 10009
      properties:
        name:
          description: Name of the issue type.
          type: string
        normalized_name:
          description: Normalized name of the issue type. For example, "Sub-tásks"
            becomes "subtask".
          type: string
        count:
          description: Number of issues that satisfy the filters and belong to this
            type.
          minimum: 1
          type: integer
        image:
          description: Icon URL.
          format: url
          type: string
        project:
          description: Bound project identifier.
          type: string
        is_subtask:
          description: Value indicating whether this issue type refers to a sub-task.
          type: boolean
      required:
      - count
      - image
      - is_subtask
      - name
      - normalized_name
      - project
      type: object
    ProductFeatures:
      description: Enabled client-side product features.
      example:
      - name: jira
        parameters:
          epics: true
          labels: false
      items:
        $ref: '#/components/schemas/ProductFeature'
      type: array
    ProductFeature:
      additionalProperties: false
      description: Client-side product feature definition.
      example:
        name: jira
        parameters:
          epics: true
          labels: false
      properties:
        name:
          type: string
        parameters:
          type: object
      required:
      - name
      - parameters
      type: object
    CreateTokenRequest:
      additionalProperties: false
      description: Request body of `/token/create` - creating a new Personal Access
        Token.
      example:
        account: 1
        name: Release webhook
      properties:
        account:
          description: Account ID.
          type: integer
        name:
          type: string
      required:
      - account
      - name
      type: object
    CreatedToken:
      additionalProperties: false
      description: Value and ID of the generated Personal Access Token.
      example:
        id: 1007
        token: 99129c581b6d2950233dac583629ba591319b2c6
      properties:
        id:
          description: Token identifier - can be used in `/token/{id}` DELETE.
          type: integer
        token:
          description: Secret token - not stored server-side!
          type: string
      required:
      - id
      - token
      type: object
    ListedTokens:
      items:
        $ref: '#/components/schemas/ListedToken'
      type: array
    ListedToken:
      additionalProperties: false
      description: Details about a token - without the token itself, which is not
        stored.
      example:
        last_used: 2020-06-23T04:56:07Z
        name: webhook
        id: 1008
      properties:
        id:
          description: Token identifier - can be used in `/token/{id}` DELETE.
          type: integer
        name:
          description: Name of the token (see `/token/create`).
          type: string
        last_used:
          description: When this token was used last time.
          format: date-time
          type: string
      required:
      - id
      - last_used
      - name
      type: object
    PatchTokenRequest:
      additionalProperties: false
      description: Request body of `/token/{id}` PATCH. Allows changing the token
        name.
      example:
        name: release-webhook
      properties:
        name:
          description: New name of the token.
          type: string
      type: object
    TimeZone:
      description: Local time zone offset in minutes, used to adjust `date_from` and
        `date_to`.
      maximum: 720
      minimum: -720
      type: integer
    TimeDuration:
      description: Time duration value.
      pattern: ^\d+s$
      type: string
    PullRequestHistogramsRequest:
      additionalProperties: false
      description: Request of `/histograms/prs`.
      example:
        for:
        - repositories:
          - github.com/athenianco/athenian-webapp
          - github.com/athenianco/athenian-api
          with:
            author:
            - github.com/vmarkovtsev
            - github.com/dpordomingo
          labels_include:
          - bug
        histograms:
        - scale: log
          metric: pr-lead-time
        account: 1
        date_to: 2020-11-23
        date_from: 2020-01-23
        timezone: 120
        exclude_inactive: true
      properties:
        for:
          description: |-
            Sets of developers and repositories for which to calculate the histograms.
            The aggregation is `AND` between repositories and developers.
            The aggregation is `OR` inside both repositories and developers.
          items:
            $ref: '#/components/schemas/ForSet'
          type: array
        histograms:
          description: Histogram parameters for each wanted topic.
          items:
            $ref: '#/components/schemas/PullRequestHistogramDefinition'
          type: array
        date_from:
          description: Date from when to start measuring the distribution.
          format: date
          type: string
        date_to:
          description: Date up to which to measure the distribution.
          format: date
          type: string
        timezone:
          $ref: '#/components/schemas/TimeZone'
        exclude_inactive:
          description: Value indicating whether PRs without events in the given time
            frame shall be ignored.
          type: boolean
        quantiles:
          $ref: '#/components/schemas/Quantiles'
        account:
          description: Session account ID.
          type: integer
        fresh:
          description: Force histograms calculation on the most up to date data.
          type: boolean
      required:
      - account
      - date_from
      - date_to
      - exclude_inactive
      - for
      - histograms
      type: object
    PullRequestHistogramDefinition:
      additionalProperties: false
      description: 'Histogram parameters: topic, bins.'
      example:
        metric: pr-size
        ticks:
        - 1
        - 10
        - 50
        - 100
        - 500
      properties:
        metric:
          $ref: '#/components/schemas/PullRequestMetricID'
        scale:
          allOf:
          - $ref: '#/components/schemas/HistogramScale'
          - description: Histogram's X axis scale.
        bins:
          description: Number of bars in the histogram. 0 or null means automatic.
          minimum: 0
          type: integer
        ticks:
          description: |-
            Alternatively to `bins` and `scale`, set the X axis bar borders manually.
            Only one of two may be specified. The ticks are automatically prepended
            the distribution minimum and appended the distribution maximum.
          items:
# {% if False %}
            allOf:
# {% else %}{{ "\n" }}            oneOf:{% endif %}
            - type: number
            - $ref: '#/components/schemas/TimeDuration'
          minItems: 1
          type: array
      required:
      - metric
      type: object
    HistogramScale:
      description: 'X axis scale: linear or logarithmic.'
      enum:
      - linear
      - log
      example: log
      type: string
    CalculatedPullRequestHistograms:
      description: Response from `/histograms/prs`.
      items:
        $ref: '#/components/schemas/CalculatedPullRequestHistogram'
      type: array
    CalculatedPullRequestHistogram:
      additionalProperties: false
      description: Calculated histogram over PR activities.
      example:
        for:
          repositories:
          - github.com/athenianco/athenian-webapp
          - github.com/athenianco/athenian-api
        metric: pr-size
        scale: linear
        ticks:
        - 0
        - 1
        - 10
        - 50
        - 100
        - 500
        - 10000
        frequencies:
        - 0
        - 38
        - 28
        - 13
        - 12
        - 8
        interquartile:
          left: 3
          right: 76
      properties:
        for:
          $ref: '#/components/schemas/ForSet'
        metric:
          $ref: '#/components/schemas/PullRequestMetricID'
        scale:
          $ref: '#/components/schemas/HistogramScale'
        ticks:
          description: Series of horizontal bar borders aka X axis. Their count is
            `len(y) + 1` because there are `N` intervals between `(N + 1)` ticks.
          items:
# {% if False %}
            allOf:
# {% else %}{{ "\n" }}            oneOf:{% endif %}
            - type: number
            - $ref: '#/components/schemas/TimeDuration'
          type: array
        frequencies:
          description: Series of histogram bar heights aka Y axis.
          items:
# {% if False %}
            allOf:
# {% else %}{{ "\n" }}            oneOf:{% endif %}
            - minimum: 0
              type: integer
            - type: number
            - $ref: '#/components/schemas/TimeDuration'
          type: array
        interquartile:
          $ref: '#/components/schemas/Interquartile'
      required:
      - for
      - frequencies
      - interquartile
      - metric
      - scale
      - ticks
      type: object
    Interquartile:
      additionalProperties: false
      description: Middle 50% range.
      example:
        left: 3
        right: 76
      properties:
        left:
# {% if False %}
          allOf:
# {% else %}{{ "\n" }}          oneOf:{% endif %}
          - type: number
          - $ref: '#/components/schemas/TimeDuration'
        right:
# {% if False %}
          allOf:
# {% else %}{{ "\n" }}          oneOf:{% endif %}
          - type: number
          - $ref: '#/components/schemas/TimeDuration'
      required:
      - left
      - right
      type: object
    FilteredJIRAStuff:
      additionalProperties: false
      description: |-
        Response from `/filter/jira`: found JIRA epics, labels, issue types, priorities,
        and mentioned users.
      example:
        epics:
        - id: DEV-158
          title: Precomputed DB - stage 2
          created: 2020-05-21T18:27:00Z
          updated: 2020-08-03T23:47:00Z
          reporter: Vadim Markovtsev
          assignee: Vadim Markovtsev
          comments: 1
          prs: 0
          priority: Low
          status: Backlog
          children:
          - id: DEV-157
            title: New repository for the precomputing service
            created: 2020-05-21T18:29:00Z
            updated: 2020-11-25T13:49:00Z
            reporter: Vadim Markovtsev
            assignee: Oleksandr Chabaiev
            comments: 10
            priority: Low
            status: Released
            prs: 0
            type: Task
          - id: DEV-156
            title: Design the architecture of the precomputing service
            created: 2020-05-21T18:27:00Z
            updated: 2020-09-09T00:05:00Z
            reporter: Vadim Markovtsev
            assignee: Vadim Markovtsev
            comments: 0
            priority: Low
            status: Released
            prs: 0
            type: Task
        labels:
        - title: performance
          last_used: 2020-08-10T12:47:00Z
          issues_count: 300
          kind: regular
        - title: performance
          last_used: 2020-08-10T12:47:00Z
          issues_count: 300
          kind: regular
        issue_types:
        - name: Bug
          count: 12
          image: https://athenianco.atlassian.net/secure/viewavatar?size=medium&avatarId=10303&avatarType=issuetype
          project: 10009
        - name: Task
          count: 6
          image: https://athenianco.atlassian.net/secure/viewavatar?size=medium&avatarId=10318&avatarType=issuetype
          project: 10009
        priorities:
        - name: None
          image: https://athenianco.atlassian.net/images/icons/priorities/trivial.svg
          value: 0
        - name: High
          image: https://athenianco.atlassian.net/images/icons/priorities/high.svg
          value: 5
        statuses:
          name: Released
          stage: done
          project: 10009
        users:
        - name: Vadim Markovtsev
          avatar: https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5de504edde32fb0d03a3b4e3/8c3ffc1b-2ac0-488e-ac55-295ff06f9e28/48
          type: atlassian
        - name: Lou Marvin Caraig
          avatar: https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5ddec0b9be6c1f0d071ff82d/24b3b66a-a251-486c-ae1f-5daa954eba54/48
          type: atlassian
      properties:
        epics:
          description: List of epics satisfying the filters.
          items:
            $ref: '#/components/schemas/JIRAEpic'
          type: array
        issues:
          description: List of issues satisfying the filters.
          items:
            $ref: '#/components/schemas/JIRAIssue'
          type: array
        labels:
          description: Mentioned issue labels.
          items:
            $ref: '#/components/schemas/JIRALabel'
          type: array
        issue_types:
          description: Mentioned issue types.
          items:
            $ref: '#/components/schemas/JIRAIssueType'
          type: array
        priorities:
          description: Mentioned issue priorites sorted by importance in ascending
            order.
          items:
            $ref: '#/components/schemas/JIRAPriority'
          type: array
        statuses:
          description: Mentioned issue statuses sorted by name.
          items:
            $ref: '#/components/schemas/JIRAStatus'
          type: array
        users:
          description: Mentioned users in the filtered issues.
          items:
            $ref: '#/components/schemas/JIRAUser'
          type: array
      type: object
    JIRAEpic:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/JIRAEpicIssueCommon'
      - properties:
          project:
            description: Identifier of the project where this epic exists.
            type: string
          children:
            description: Details about the child issues.
            items:
              $ref: '#/components/schemas/JIRAEpicChild'
            type: array
          prs:
            description: Overall number of mapped pull requests (including the children).
            type: integer
        required:
        - project
        - prs
      description: Details about a JIRA epic together with its child issues.
      example:
        id: DEV-158
        title: Precomputed DB - stage 2
        created: 2020-05-21T18:27:00Z
        updated: 2020-08-03T23:47:00Z
        reporter: Vadim Markovtsev
        assignee: Vadim Markovtsev
        comments: 1
        prs: 0
        priority: Low
        status: Backlog
        children:
        - id: DEV-157
          title: New repository for the precomputing service
          created: 2020-05-21T18:29:00Z
          updated: 2020-11-25T13:49:00Z
          reporter: Vadim Markovtsev
          assignee: Oleksandr Chabaiev
          comments: 10
          priority: Low
          status: Released
          prs: 0
          type: Task
        - id: DEV-156
          title: Design the architecture of the precomputing service
          created: 2020-05-21T18:27:00Z
          updated: 2020-09-09T00:05:00Z
          reporter: Vadim Markovtsev
          assignee: Vadim Markovtsev
          comments: 0
          priority: Low
          status: Released
          prs: 0
          type: Task
      type: object
    JIRAEpicChild:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/JIRAEpicIssueCommon'
      - properties:
          type:
            description: Name of the issue type. The details are returned in `FilteredJIRAStuff.issue_types`.
            type: string
          subtasks:
            description: Number of sub-tasks.
            type: integer
          prs:
            description: Number of mapped pull requests.
            type: integer
        required:
        - prs
        - subtasks
        - type
      description: Details about a JIRA issue contained in an epic.
      example:
        id: DEV-157
        title: New repository for the precomputing service
        created: 2020-05-21T18:29:00Z
        updated: 2020-11-25T13:49:00Z
        reporter: Vadim Markovtsev
        assignee: Oleksandr Chabaiev
        comments: 10
        priority: Low
        status: Released
        prs: 0
        type: Task
      type: object
    JIRAIssue:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/JIRAEpicIssueCommon'
      - properties:
          project:
            description: Identifier of the project where this issue exists.
            type: string
          type:
            description: Name of the issue type. The details are returned in `FilteredJIRAStuff.issue_types`.
            type: string
          prs:
            description: Details about the mapped PRs. `jira` field is unfilled.
            items:
              $ref: '#/components/schemas/PullRequest'
            type: array
        required:
        - project
        - prs
        - type
    JIRAEpicIssueCommon:
      description: Common properies if a JIRA issue or epic.
      properties:
        id:
          description: JIRA issue key `PROJECT-###`.
          type: string
        title:
          description: Title of this issue.
          type: string
        created:
          description: When this issue was created.
          format: date-time
          type: string
        updated:
          description: When this issue was last updated.
          format: date-time
          type: string
        work_began:
          description: |-
            When the issue entered the "In Progress" stage or received a PR.
            This timestamp can be missing and is always less than or equal to `resolved`.
          format: date-time
          type: string
        resolved:
          description: |-
            When the issue finished: the stage is "Done" and all PRs are either released or rejected.
            This timestamp can be missing and is always greater than or equal to `work_began`.
          format: date-time
          type: string
        lead_time:
          allOf:
          - description: |-
              Issue's time spent between `work_began` and `resolved`. If not resolved,
              between `work_began` and `now()`.
          - $ref: '#/components/schemas/TimeDuration'
        life_time:
          allOf:
          - description: |-
              Issue's time spent between `created` and `resolved`. If not resolved,
              between `created` and `now()`.
          - $ref: '#/components/schemas/TimeDuration'
        reporter:
          description: Name of the person who reported the issue.
          type: string
        assignee:
          description: Name of the assigned person.
          type: string
        comments:
          description: Number of comments in the issue excluding sub-tasks and children.
          type: integer
        priority:
          description: Name of the priority. The details are returned in `FilteredJIRAStuff.priorities`.
          type: string
        status:
          description: Name of the status. The details are returned in `FilteredJIRAStuff.statuses`.
          type: string
        url:
          description: Link to the issue in JIRA web application.
          format: url
          type: string
      required:
      - comments
      - created
      - id
      - life_time
      - priority
      - reporter
      - status
      - title
      - updated
      - url
      type: object
    JIRALabel:
      additionalProperties: false
      description: Details about a JIRA label.
      example:
        title: performance
        last_used: 2020-08-10T12:47:00Z
        issues_count: 300
        kind: Label
      properties:
        title:
          type: string
        last_used:
          description: When this label was last assigned to an issue.
          format: date-time
          type: string
        issues_count:
          description: In how many issues (in the specified time interval) this label
            was used.
          type: integer
        kind:
          description: Label kind - "Label", "Component", etc.
          type: string
      required:
      - issues_count
      - last_used
      - title
      type: object
    JIRAPriority:
      additionalProperties: false
      description: JIRA issue priority details.
      example:
        name: High
        image: https://athenianco.atlassian.net/images/icons/priorities/high.svg
        rank: 2
        color: EA4444
      properties:
        name:
          description: Name of the priority.
          type: string
        image:
          description: URL of the picture that indicates the priority.
          format: url
          type: string
        rank:
          description: Measure of importance (smaller is more important).
          minimum: 1
          type: integer
        color:
          description: 24-bit hex RGB.
          type: string
      required:
      - color
      - image
      - name
      - rank
      type: object
    JIRAStatus:
      additionalProperties: false
      description: JIRA issue status details.
      example:
        name: Released
        stage: done
        project: 10009
      properties:
        name:
          description: Exact status name.
          type: string
        stage:
          description: One of the three status categories.
          enum:
          - To Do
          - In Progress
          - Done
          type: string
        project:
          description: Identifier of the project where this status exists.
          type: string
      required:
      - name
      - project
      - stage
      type: object
    JIRAUser:
      additionalProperties: false
      description: Details about a JIRA user.
      example:
        name: Vadim Markovtsev
        avatar: https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5de504edde32fb0d03a3b4e3/8c3ffc1b-2ac0-488e-ac55-295ff06f9e28/48
        type: atlassian
      properties:
        name:
          description: Full name of the user.
          type: string
        avatar:
          description: User's profile picture URL.
          format: url
          type: string
        type:
          description: |-
            * `atlassian` indicates a regular account backed by a human.
            * `app` indicates a service account.
            * `customer` indicates an external service desk account.
          enum:
          - atlassian
          - app
          - customer
          type: string
        developer:
          allOf:
          - $ref: '#/components/schemas/DeveloperID'
          - description: Mapped developer identity.
      required:
      - avatar
      - name
      - type
      type: object
    FilterJIRAStuff:
      additionalProperties: false
      description: Request of `/filter/jira` to retrieve epics, labels, types, priorities,
        users, etc.
      example:
        account: 1
        date_from: 2020-01-01
        date_to: 2020-12-01
        timezone: 120
        exclude_inactive: true
      properties:
        account:
          description: Session account ID.
          type: integer
        date_from:
          description: '`null` disables the time filter boundary, thus everything
            is returned. `date_from` and `date_to` must be both either `null` or not
            `null`.'
          format: date
          nullable: true
          type: string
        date_to:
          description: '`null` disables the time filter boundary, thus everything
            is returned. `date_from` and `date_to` must be both either `null` or not
            `null`.'
          format: date
          nullable: true
          type: string
        timezone:
          $ref: '#/components/schemas/TimeZone'
        priorities:
          description: Selected issue priorities.
          items:
            type: string
          type: array
        types:
          description: Selected issue types. Ignored for epics.
          items:
            type: string
          type: array
        labels_include:
          description: JIRA issues must contain at least one label from the list.
            Several labels may be concatenated by a comma `,` so that all of them
            are required.
          items:
            type: string
          type: array
        labels_exclude:
          description: JIRA issues may not contain labels from this list.
          items:
            type: string
          type: array
        exclude_inactive:
          description: Value indicating whether issues with the last update older
            than `date_from` should be ignored. If `date_from` and `date_to` are `null`,
            does nothing.
          type: boolean
        with:
          allOf:
          - description: JIRA issue participants.
          - $ref: '#/components/schemas/JIRAFilterWith'
          type: object
        projects:
          description: Issues must belong to these JIRA projects.
          items:
            example: DEV
            type: string
          type: array
        return:
          description: Specifies which items are required, an empty or missing array
            means everything.
          items:
            $ref: '#/components/schemas/JIRAFilterReturn'
          type: array
      required:
      - account
      - date_from
      - date_to
      - exclude_inactive
      type: object
    JIRAFilterReturn:
      description: |-
        Requested chapter to return in `/filter/jira`.
        * `epics`: Activates the epic flow.
        * `issues`: Activates the issue flow.
        * `issue_bodies`: Include the details about filtered issues.
        * `labels`: Include the details aboud the mentioned issue labels.
        * `issue_types`: Include the details aboud the mentioned issue types.
        * `priorities`: Include the details aboud the mentioned issue priorities.
        * `statuses`: Include the details aboud the mentioned issue statuses.
        * `users`: Include the details aboud the issue participants.
        * `only_flying`: Exclude the epics' children and epics themselves from `issues`.

        If neither `epics` nor `issues` are specified, nothing is returned.
        If `epics` is not specified, the corresponding `epics` list is not populated.
        The difference is that `issues` flow examines all the issues that satisfy the given filters,
        whereas `epics` flow examines only the epics that satisfy the given filters, and their children.
        `only_flying` does not affect the `epics` flow.
      enum:
      - epics
      - issues
      - issue_bodies
      - labels
      - issue_types
      - priorities
      - statuses
      - users
      - only_flying
      type: string
    ReleaseMetricsRequest:
      additionalProperties: false
      description: Request of `/metrics/releases` to calculate metrics on releases.
      example:
        for:
        - - athenianco/athenian-api
          - athenianco/athenian-webapp
        with:
        - pr_author:
          - github.com/se7entyse7en
          releaser:
          - github.com/gkwillie
        metrics:
        - release-count
        granularities:
        - day
        date_from: 2020-01-01T00:00:00Z
        date_to: 2020-10-01T00:00:00Z
        account: 1
      properties:
        for:
          description: List of repository groups for which to calculate the metrics.
          items:
            $ref: '#/components/schemas/RepositorySet'
          type: array
        with:
          description: List of developer groups for which to calculate the metrics.
          items:
            $ref: '#/components/schemas/ReleaseWith'
          type: array
        labels_include:
          description: At least one of these labels must be present in at least one
            released PR.
          items:
            type: string
          type: array
        labels_exclude:
          description: None of these labels must be present in each released PR.
          items:
            type: string
          type: array
        jira:
          $ref: '#/components/schemas/JIRAFilter'
        metrics:
          description: List of desired release metrics.
          items:
            $ref: '#/components/schemas/ReleaseMetricID'
          type: array
        date_from:
          description: Date from when to start measuring the metrics.
          format: date
          type: string
        date_to:
          description: Date up to which to measure the metrics.
          format: date
          type: string
        timezone:
          $ref: '#/components/schemas/TimeZone'
        granularities:
          items:
            $ref: '#/components/schemas/Granularity'
          type: array
        quantiles:
          $ref: '#/components/schemas/Quantiles'
        account:
          description: Session account ID.
          type: integer
      required:
      - account
      - date_from
      - date_to
      - for
      - granularities
      - metrics
      type: object
    ReleaseMetricID:
      description: |-
        Currently supported release metric types.
        * `release-count` - number of all releases in the time interval.
        * `release-tag-count` - number of releases by tag in the time interval.
        * `release-branch-count` - number of releases by branch merge in the time interval.
        * `release-prs` - number of PRs released in the time interval.
        * `release-tag-prs` - number of PRs released by tag in the time interval.
        * `release-branch-prs` - number of PRs released by branch merge in the time interval.
        * `release-commits` - number of commits which were released in the time interval.
        * `release-tag-commits` - number of commits which were released by tag in the time interval.
        * `release-branch-commits` - number of commits which were released by branch merge in the time interval.
        * `release-lines` - sum of the changed (added or removed) diff lines of the commits released in the time interval.
        * `release-tag-lines` - sum of the changed (added or removed) diff lines of the commits released by tag in the time interval.
        * `release-branch-lines` - sum of the changed (added or removed) diff lines of the commits released by branch merge in the time interval.
        * `release-avg-prs` - average (by release) number of PRs released in the time interval. Quantiles are applied.
        * `release-tag-avg-prs` - average (by release) number of PRs released by tag in the time interval. Quantiles are applied.
        * `release-branch-avg-prs` - average number of PRs released by branch merge in the time interval. Quantiles are applied.
        * `release-avg-commits` - average (by release) number of commits released in the time interval. Quantiles are applied.
        * `release-tag-avg-commits` - average (by release) number of commits released by tag in the time interval. Quantiles are applied.
        * `release-branch-avg-commits` - average (by release) number of commits released by branch merge in the time interval. Quantiles are applied.
        * `release-avg-lines` - average (by release) number of changed (added + removed) diff lines of the commits released in the time interval. Quantiles are applied.
        * `release-tag-avg-lines` - average (by release) number of changed (added + removed) diff lines of the commits released by tag in the time interval. Quantiles are applied.
        * `release-branch-avg-lines` - average (by release) number of changed (added + removed) diff lines of the commits released by branch merge in the time interval. Quantiles are applied.
        * `release-age` - average timedelta between releases of the same alignment (as determined by the commit DAG). Quantiles are applied.
        * `release-tag-age` - average timedelta between releases by tag of the same alignment (as determined by the commit DAG). Quantiles are applied.
        * `release-branch-age` - average timedelta between releases by branch of the same alignment (as determined by the commit DAG). Quantiles are applied.
      enum:
      - release-count
      - release-tag-count
      - release-branch-count
      - release-prs
      - release-tag-prs
      - release-branch-prs
      - release-commits
      - release-tag-commits
      - release-branch-commits
      - release-lines
      - release-tag-lines
      - release-branch-lines
      - release-avg-prs
      - release-tag-avg-prs
      - release-branch-avg-prs
      - release-avg-commits
      - release-tag-avg-commits
      - release-branch-avg-commits
      - release-avg-lines
      - release-tag-avg-lines
      - release-branch-avg-lines
      - release-age
      - release-tag-age
      - release-branch-age
      type: string
    CalculatedReleaseMetrics:
      description: Response from `/metrics/releases`.
      items:
        $ref: '#/components/schemas/CalculatedReleaseMetric'
      type: array
    CalculatedReleaseMetric:
      additionalProperties: false
      description: Calculated release metric values.
      example:
        for:
        - athenianco/athenian-api
        - athenianco/athenian-webapp
        metrics:
        - release-count
        granularity: day
        values:
          date: 2020-01-23
          values:
          - 0.8008282
          - 0.8008282
          confidence_mins:
          - 0.5
          - 0.5
          confidence_maxs:
          - 1.0
          - 1.0
          confidence_scores:
          - 75
          - 75
      properties:
        for:
          $ref: '#/components/schemas/RepositorySet'
        with:
          $ref: '#/components/schemas/ReleaseWith'
        matches:
          additionalProperties:
            $ref: '#/components/schemas/ReleaseMatchStrategy'
          description: Applied release matching strategies for the repositories in
            `for`.
          type: object
        metrics:
          items:
            $ref: '#/components/schemas/ReleaseMetricID'
          type: array
        granularity:
          $ref: '#/components/schemas/Granularity'
        values:
          description: The sequence steps from `date_from` till `date_to` by `granularity`.
          items:
            $ref: '#/components/schemas/CalculatedLinearMetricValues'
          type: array
      required:
      - for
      - granularity
      - matches
      - metrics
      - values
      type: object
    PaginatePullRequestsRequest:
      additionalProperties: false
      description: |-
        Request of `/paginate/pull_requests`. According to the target batch size,
        compute the optimal PR updated timestamp ranges. `request` should match
        the body to be sent to `/filter/pull_requests`. `updated_from` and `updated_to`
        inside `request` are ignored.
      example:
        request:
          account: 1
          date_from: 2020-01-23
          date_to: 2020-05-23
          in:
          - '{1}'
          stages:
          - wip
          with:
            author:
            - github.com/vmarkovtsev
        batch: 100
      properties:
        batch:
          description: Target batch size. The returned ranges do not guarantee the
            exact match.
          minimum: 1
          type: integer
        request:
          $ref: '#/components/schemas/FilterPullRequestsRequest'
      required:
      - batch
      - request
      type: object
    PullRequestPaginationPlan:
      additionalProperties: false
      description: Response of `/paginate/pull_requests`. Computed split of the PR
        updated timestamp range.
      example:
        updated:
        - 2020-10-08
        - 2020-10-07
        - 2020-10-01
      properties:
        updated:
          description: Split borders in *descending* order.
          items:
            format: date
            type: string
          type: array
      type: object
    IndexedGroups:
      description: |-
        Lists of indexes in `repositories` or `developers` that define independent groups
        that must be processed individually. The groups may have intersections.
      example:
      - 0
      - 1
      items:
        items:
          minItems: 1
          minimum: 0
          type: integer
        type: array
      minItems: 1
      type: array
    ReleaseWith:
      additionalProperties: false
      description: Release contribution roles. The aggregation is `OR` everywhere.
      example:
        pr_author:
        - github.com/se7entyse7en
        releaser:
        - github.com/gkwillie
      properties:
        pr_author:
          allOf:
          - $ref: '#/components/schemas/DeveloperSet'
          - description: Authors of released pull requests.
        commit_author:
          allOf:
          - $ref: '#/components/schemas/DeveloperSet'
          - description: Authors of released commits.
        releaser:
          allOf:
          - $ref: '#/components/schemas/DeveloperSet'
          - description: Release publishers.
      type: object
    JIRAMetricID:
      description: |-
        Currently supported JIRA activity metrics.
        * `jira-open` - number of issues active by the end of the time interval.
        * `jira-resolved` - number of issues closed in the given time range.
        * `jira-raised` - number of issues reported in the given time range.
        * `jira-acknowledged` - number of issues that are "In Progress" or "Resolved". This number matches the issues considered to calculate `jira-acknowledge-time` before applying the quantiles.
        * `jira-acknowledged-q` - number of issues that are "In Progress" or "Resolved". This number matches the issues considered to calculate `jira-acknowledge-time` after applying the quantiles.
        * `jira-life-time` - Mean Life Time - the time between min(issue creation, work began) and max(issue resolution, fixes released).
        * `jira-lead-time` - Mean Lead Time - the time between when the work began and max(issue resolution, fixes released).
        * `jira-acknowledge-time` - Mean Acknowledge Time - the time between when the issue was created and the work began. It equals to 0 for retrofitted issues with PRs before their creation times.
        * `jira-resolution-rate` - ratio between the number of resolved issues to the number of raised issues.
      enum:
      - jira-open
      - jira-resolved
      - jira-raised
      - jira-acknowledged
      - jira-acknowledged-q
      - jira-life-time
      - jira-lead-time
      - jira-acknowledge-time
      - jira-resolution-rate
      example: jira-resolved
      type: string
    JIRAMetricsRequest:
      additionalProperties: false
      description: Request body of `/metrics/jira`.
      example:
        account: 1
        date_from: 2020-10-01
        date_to: 2020-10-30
        priorities:
        - High
        types:
        - Bug
        metrics:
        - jira-open
        - jira-resolved
        - jira-raised
        granularities:
        - all
        exclude_inactive: true
      properties:
        account:
          description: Session account ID.
          type: integer
        date_from:
          description: Issues must be resolved after this date.
          format: date
          type: string
        date_to:
          description: Issues must be created before this date.
          format: date
          type: string
        timezone:
          $ref: '#/components/schemas/TimeZone'
        priorities:
          description: Selected issue priorities.
          items:
            type: string
          type: array
        types:
          description: Selected issue types.
          items:
            type: string
          type: array
        labels_include:
          description: JIRA issues must contain at least one label from the list.
            Several labels may be concatenated by a comma `,` so that all of them
            are required.
          items:
            type: string
          type: array
        labels_exclude:
          description: JIRA issues may not contain labels from this list.
          items:
            type: string
          type: array
        exclude_inactive:
          description: Value indicating whether issues with the last update older
            than `date_from` should be ignored. If `date_from` and `date_to` are `null`,
            does nothing.
          type: boolean
        epics:
          description: JIRA issues must be attached to any of the epic IDs from this
            list.
          items:
            type: string
          type: array
        with:
          description: Groups of issue participants. The metrics will be calculated
            for each group.
          items:
            $ref: '#/components/schemas/JIRAFilterWith'
          type: array
        projects:
          description: Issues must belong to these JIRA projects.
          items:
            example: DEV
            type: string
          type: array
        metrics:
          description: List of measured metrics.
          items:
            $ref: '#/components/schemas/JIRAMetricID'
          type: array
        quantiles:
          $ref: '#/components/schemas/Quantiles'
        granularities:
          description: Splits of the specified time range `[date_from, date_to)`.
          items:
            $ref: '#/components/schemas/Granularity'
          type: array
        group_by_jira_label:
          description: Value indicating whether the metrics should be grouped by assigned
            JIRA issue label.
          type: boolean
      required:
      - account
      - date_from
      - date_to
      - exclude_inactive
      - granularities
      - metrics
      type: object
    FilterJIRACommon:
      description: Common JIRA issue filters.
      example:
        account: 1
        timezone: 120
        exclude_inactive: true
      properties:
        account:
          description: Session account ID.
          type: integer
        timezone:
          $ref: '#/components/schemas/TimeZone'
        priorities:
          description: Selected issue priorities.
          items:
            type: string
          type: array
        types:
          description: Selected issue types. Ignored for epics.
          items:
            type: string
          type: array
        labels_include:
          description: JIRA issues must contain at least one label from the list.
            Several labels may be concatenated by a comma `,` so that all of them
            are required.
          items:
            type: string
          type: array
        labels_exclude:
          description: JIRA issues may not contain labels from this list.
          items:
            type: string
          type: array
        exclude_inactive:
          description: Value indicating whether issues with the last update older
            than `date_from` should be ignored. If `date_from` and `date_to` are `null`,
            does nothing.
          type: boolean
      required:
      - account
      - exclude_inactive
      type: object
    JIRAFilterWith:
      additionalProperties: false
      description: Group of JIRA issue participant names split by role.
      example:
        assignees:
        - Vadim Markovtsev
      properties:
        assignees:
          description: Selected issue assignee users. `null` means unassigned.
          items:
            nullable: true
            type: string
          type: array
        reporters:
          description: Selected issue reporter users.
          items:
            type: string
          type: array
        commenters:
          description: Selected issue commenter users.
          items:
            type: string
          type: array
      type: object
    CalculatedJIRAMetrics:
      description: Response from `/metrics/jira`.
      items:
        $ref: '#/components/schemas/CalculatedJIRAMetricValues'
      type: array
    CalculatedJIRAMetricValues:
      additionalProperties: false
      description: Calculated JIRA metrics for a specific granularity.
      example:
        granularity: 2 week
        values:
        - date: 2020-01-23
          values:
          - 0.8008282
          - 0.8008282
          confidence_mins:
          - 0.5
          - 0.5
          confidence_maxs:
          - 1.0
          - 1.0
          confidence_scores:
          - 75
          - 75
        - date: 2020-01-23
          values:
          - 0.8008282
          - 0.8008282
          confidence_mins:
          - 0.5
          - 0.5
          confidence_maxs:
          - 1.0
          - 1.0
          confidence_scores:
          - 75
          - 75
      properties:
        granularity:
          $ref: '#/components/schemas/Granularity'
        jira_label:
          description: Title of the assigned JIRA label, if `group_by_jira_label`
            was previously set to `true`. If is missing and `group_by_jira_label`
            was set to `true` then the metrics are calculated for issues without labels.
          type: string
        with:
          $ref: '#/components/schemas/JIRAFilterWith'
        values:
          description: The sequence steps from `date_from` till `date_to` by `granularity`.
          items:
            $ref: '#/components/schemas/CalculatedLinearMetricValues'
          type: array
      required:
      - granularity
      - values
      type: object
    JIRAHistogramsRequest:
      additionalProperties: false
      description: Request of `/histograms/jira`.
      example:
        types:
        - Bug
        histograms:
        - metric: jira-raised
        account: 1
        date_to: 2020-11-23
        date_from: 2020-01-23
        timezone: 120
        exclude_inactive: true
      properties:
        priorities:
          description: Selected issue priorities.
          items:
            type: string
          type: array
        types:
          description: Selected issue types.
          items:
            type: string
          type: array
        epics:
          items:
            $ref: '#/components/schemas/JIRAEpic'
          type: array
        labels_include:
          description: PRs must relate to at least one JIRA issue label from the list.
            Several labels may be concatenated by a comma `,` so that all of them
            are required.
          items:
            type: string
          type: array
        labels_exclude:
          description: PRs cannot relate to JIRA issue labels from the list.
          items:
            type: string
          type: array
        with:
          description: Groups of issue participants. The histograms will be calculated
            for each group.
          items:
            $ref: '#/components/schemas/JIRAFilterWith'
          type: array
        projects:
          description: Issues must belong to these JIRA projects.
          items:
            example: DEV
            type: string
          type: array
        histograms:
          description: Histogram parameters for each wanted topic.
          items:
            $ref: '#/components/schemas/JIRAHistogramDefinition'
          type: array
        date_from:
          description: Date from when to start measuring the distribution.
          format: date
          type: string
        date_to:
          description: Date up to which to measure the distribution.
          format: date
          type: string
        timezone:
          $ref: '#/components/schemas/TimeZone'
        exclude_inactive:
          description: Value indicating whether issues with the last update older
            than `date_from` should be ignored.
          type: boolean
        quantiles:
          $ref: '#/components/schemas/Quantiles'
        account:
          description: Session account ID.
          type: integer
      required:
      - account
      - date_from
      - date_to
      - exclude_inactive
      - histograms
      type: object
    JIRAHistogramDefinition:
      additionalProperties: false
      description: 'Histogram parameters: topic, bins.'
      example:
        metric: jira-raised
        ticks:
        - 1
        - 10
        - 50
        - 100
        - 500
      properties:
        metric:
          $ref: '#/components/schemas/JIRAMetricID'
        scale:
          allOf:
          - $ref: '#/components/schemas/HistogramScale'
          - description: Histogram's X axis scale.
        bins:
          description: Number of bars in the histogram. 0 or null means automatic.
          minimum: 0
          type: integer
        ticks:
          description: |-
            Alternatively to `bins` and `scale`, set the X axis bar borders manually.
            Only one of two may be specified. The ticks are automatically prepended
            the distribution minimum and appended the distribution maximum.
          items:
# {% if False %}
            allOf:
# {% else %}{{ "\n" }}            oneOf:{% endif %}
            - type: number
            - $ref: '#/components/schemas/TimeDuration'
          minItems: 1
          type: array
      required:
      - metric
      type: object
    CalculatedJIRAHistograms:
      description: Response from `/histograms/jira`.
      items:
        $ref: '#/components/schemas/CalculatedJIRAHistogram'
      type: array
    CalculatedJIRAHistogram:
      additionalProperties: false
      description: Calculated histogram over JIRA issue activities.
      example:
        metric: jira-raised
        scale: linear
        ticks:
        - 0
        - 1
        - 10
        - 50
        - 100
        - 500
        - 10000
        frequencies:
        - 0
        - 38
        - 28
        - 13
        - 12
        - 8
        interquartile:
          left: 3
          right: 76
      properties:
        with:
          $ref: '#/components/schemas/JIRAFilterWith'
        metric:
          $ref: '#/components/schemas/JIRAMetricID'
        scale:
          $ref: '#/components/schemas/HistogramScale'
        ticks:
          description: Series of horizontal bar borders aka X axis. Their count is
            `len(y) + 1` because there are `N` intervals between `(N + 1)` ticks.
          items:
# {% if False %}
            allOf:
# {% else %}{{ "\n" }}            oneOf:{% endif %}
            - type: number
            - $ref: '#/components/schemas/TimeDuration'
          type: array
        frequencies:
          description: Series of histogram bar heights aka Y axis.
          items:
            minimum: 0
            type: integer
          type: array
        interquartile:
          $ref: '#/components/schemas/Interquartile'
      required:
      - frequencies
      - interquartile
      - metric
      - scale
      - ticks
      type: object
    JIRAProjects:
      description: List of JIRA project activity settings.
      items:
        $ref: '#/components/schemas/JIRAProject'
      type: array
    JIRAProject:
      additionalProperties: false
      description: JIRA project setting.
      example:
        name: Product Development
        key: DEV
        avatar_url: https://athenianco.atlassian.net/secure/projectavatar?pid=10009&avatarId=10551
        enabled: true
      properties:
        name:
          description: Long name of the project.
          type: string
        key:
          description: Short prefix of the project.
          type: string
        avatar_url:
          description: Avatar URL of the project.
          format: url
          type: string
        enabled:
          description: Indicates whether this project is enabled for analysis.
          type: boolean
      required:
      - avatar_url
      - enabled
      - key
      - name
      type: object
    JIRAProjectsRequest:
      additionalProperties: false
      description: Enable or disable a JIRA project.
      example:
        account: 1
        projects:
          ENG: false
          DEV: true
      properties:
        account:
          description: Changed account ID.
          type: integer
        projects:
          additionalProperties:
            type: boolean
          description: Map from project keys to their enabled/disabled flags.
          type: object
      required:
      - account
      - projects
      type: object
    DiffReleasesRequest:
      additionalProperties: false
      description: Request of `/diff/releases`. Define pairs of releases for several
        repositories to find the releases in between.
      example:
        account: 1
        borders:
          github.com/athenianco/athenian-api:
          - old: v0.7.50
            new: v0.7.59
      properties:
        account:
          type: integer
        borders:
          additionalProperties:
            items:
              $ref: '#/components/schemas/ReleasePair'
            type: array
          description: Mapping from repository names to analyzed release pairs.
          type: object
      required:
      - account
      - borders
      type: object
    ReleasePair:
      additionalProperties: false
      description: A pair of release names within the same repository.
      example:
        old: v0.7.50
        new: v0.7.59
      properties:
        old:
          description: Older release name.
          type: string
        new:
          description: Newer release name.
          type: string
      required:
      - new
      - old
      type: object
    DiffedReleases:
      additionalProperties: false
      description: Response of `/diff/releases` - the found inner releases for each
        repository.
      example:
        include:
          users:
            github.com/gkwillie:
              avatar: https://avatars0.githubusercontent.com/u/60340680?v=4
          jira: null
        data:
          github.com/athenianco/athenian-api:
          - old: v0.0.92
            new: v0.0.93
            releases:
            - added_lines: 1000
              commits: 20
              deleted_lines: 200
              name: v0.0.93
              published: 2020-03-25T10:57:00Z
              publisher: github.com/vmarkovtsev
              publisher_avatar: https://avatars0.githubusercontent.com/u/60340680?v=4
              repository: github.com/athenianco/athenian-api
              url: https://github.com/athenianco/athenian-api/releases/tag/v0.0.93
      properties:
        include:
          allOf:
          - $ref: '#/components/schemas/IncludedNativeUsers'
          - $ref: '#/components/schemas/IncludedJIRAIssues'
          type: object
        data:
          additionalProperties:
            items:
              $ref: '#/components/schemas/ReleaseDiff'
            type: array
          description: Mapping from repository names to diff results.
          type: object
      required:
      - data
      - include
      type: object
    ReleaseDiff:
      additionalProperties: false
      description: Inner releases between `old` and `new`, including the latter.
      example:
        old: v0.0.92
        new: v0.0.93
        releases:
        - added_lines: 1000
          commits: 20
          deleted_lines: 200
          name: v0.0.93
          published: 2020-03-25T10:57:00Z
          publisher: github.com/vmarkovtsev
          publisher_avatar: https://avatars0.githubusercontent.com/u/60340680?v=4
          repository: github.com/athenianco/athenian-api
          url: https://github.com/athenianco/athenian-api/releases/tag/v0.0.93
      properties:
        old:
          type: string
        new:
          type: string
        releases:
          description: List of matching release metadata.
          items:
            $ref: '#/components/schemas/FilteredRelease'
          type: array
      required:
      - new
      - old
      - releases
      type: object
    MappedJIRAIdentities:
      description: |-
        List of currently mapped GitHub<>JIRA users.
        Additionally, we include unmapped JIRA users to provide a complete list of them.
      items:
        $ref: '#/components/schemas/MappedJIRAIdentity'
      type: array
    MappedJIRAIdentity:
      additionalProperties: false
      description: GitHub user (developer) mapped to a JIRA user.
      example:
        developer_id: github.com/vmarkovtsev
        developer_name: Vadim Markovtsev
        jira_name: Vadim Markovtsev
        confidence: 1.0
      properties:
        developer_id:
          allOf:
          - $ref: '#/components/schemas/DeveloperID'
          - nullable: true
        developer_name:
          description: Full name of the mapped GitHub user.
          nullable: true
          type: string
        jira_name:
          description: Full name of the mapped JIRA user.
          type: string
        confidence:
          description: Value from 0 to 1 indicating how similar are the users.
          format: float
          maximum: 1
          minimum: 0
          type: number
      required:
      - confidence
      - developer_id
      - developer_name
      - jira_name
      type: object
    SetMappedJIRAIdentitiesRequest:
      additionalProperties: false
      description: Request body of `/settings/jira/identities`. Describes a patch
        to the GitHub<>JIRA identity mapping.
      example:
      - developer_id: github.com/vmarkovtsev
        jira_name: Vadim Markovtsev
      - developer_id: github.com/warenlg
        jira_name: null
      properties:
        account:
          description: Account ID.
          type: integer
        changes:
          description: Individual GitHub<>JIRA user mapping change.
          items:
            $ref: '#/components/schemas/MappedJIRAIdentityChange'
          type: array
      required:
      - account
      - changes
      type: object
    MappedJIRAIdentityChange:
      additionalProperties: false
      description: Individual GitHub<>JIRA user mapping change.
      example:
        developer_id: github.com/vmarkovtsev
        jira_name: Vadim Markovtsev
      properties:
        developer_id:
          $ref: '#/components/schemas/DeveloperID'
        jira_name:
          description: Full name of the mapped JIRA user. `null` means the removal.
          nullable: true
          type: string
      required:
      - developer_id
      - jira_name
      type: object
    NotifyReleaseRequest:
      items:
        $ref: '#/components/schemas/ReleaseNotification'
      type: array
    CommitHash:
      description: Commit hash, either short (7 chars) or long (40 chars) form.
      maxLength: 40
      minLength: 7
      type: string
    ReleaseNotification:
      additionalProperties: false
      description: Push message about a custom release event.
      example:
        author: Vadim Markovtsev
        commit: c3f4d3a
        name: 0.8.66
        repository: github.com/athenianco/athenian-api
        published_at: 2021-02-23T15:16:07Z
        url: https://github.com/athenianco/athenian-api/releases/tag/v0.8.66
      properties:
        repository:
          $ref: '#/components/schemas/RepositoryID'
        commit:
          $ref: '#/components/schemas/CommitHash'
        name:
          description: Release name.
          type: string
        author:
          description: Release author.
          type: string
        url:
          description: Release URL.
          format: url
          type: string
        published_at:
          description: When the release was created. If missing, set to `now()`.
          format: date-time
          type: string
      required:
      - commit
      - repository
      type: object
    DeleteEventsCacheRequest:
      additionalProperties: false
      description: Definition of the cache reset operation.
      example:
        account: 1
        repositories:
        - github.com/athenianco/athenian-api
        targets:
        - release
      properties:
        account:
          description: Account ID.
          type: integer
        repositories:
          $ref: '#/components/schemas/RepositorySet'
        targets:
          description: Parts of the precomputed cache to reset.
          items:
            enum:
            - release
            type: string
          type: array
      required:
      - account
      - repositories
      - targets
      type: object
    MatchIdentitiesRequest:
      additionalProperties: false
      description: Request body of `/match/identities`.
      example:
        account: 1
        identities:
        - emails:
          - eiso@athenian.co
        - names:
          - Vadim Markovtsev
          - vmarkovtsev
      properties:
        account:
          description: User's account ID.
          type: integer
        identities:
          items:
            $ref: '#/components/schemas/ContributorIdentity'
          type: array
      required:
      - account
      - identities
      type: object
    ContributorIdentity:
      additionalProperties: false
      description: Information about a contributor that may be utilized to match identities.
      example:
        emails:
        - vadim@athenian.co
        names:
        - Vadim Markovtsev
        - vmarkovtsev
        - Vadim
      properties:
        emails:
          description: Email addresses belonging to the person.
          items:
            format: email
            type: string
          type: array
        names:
          description: The person is known as each of these full names. The format
            is arbitrary.
          items:
            type: string
          type: array
      type: object
    MatchedIdentities:
      description: Response from `/match/identities` - mapping from supplied identities
        to GitHub organization members. The order matches the order of `MatchIdentitiesRequest.identities`.
      example:
      - from:
          emails:
          - gkwillie@athenian.co
        to: null
      - from:
          names:
          - Vadim Markovtsev
        to: github.com/vmarkovtsev
      items:
        $ref: '#/components/schemas/MatchedIdentity'
      type: array
    MatchedIdentity:
      description: Identity mapping of a specific contributor.
      example:
        from:
          names:
          - Vadim Markovtsev
        to: github.com/vmarkovtsev
      properties:
        from:
          $ref: '#/components/schemas/ContributorIdentity'
        to:
          allOf:
          - nullable: true
          - $ref: '#/components/schemas/DeveloperID'
        confidence:
          description: Value from 0 to 1 indicating how similar are the users.
          format: float
          maximum: 1
          minimum: 0
          type: number
      required:
      - confidence
      - from
      - to
      type: object
    CodeCheckMetricsRequest:
      additionalProperties: false
      description: Request for calculating metrics on top of code check runs (CI)
        data.
      example:
        for:
        - repositories:
          - github.com/athenianco/athenian-webapp
          - github.com/athenianco/athenian-api
          pushers:
          - - github.com/vmarkovtsev
            - github.com/dpordomingo
        - repositories:
          - github.com/athenianco/metadata
          - github.com/athenianco/athenian-api
          pushers:
          - - github.com/vmarkovtsev
            - github.com/se7entyse7en
        metrics:
        - chk-suites-count
        date_from: 2020-01-23
        date_to: 2021-01-24
        granularities:
        - all
        account: 1
      properties:
        for:
          description: |-
            Sets of developers and repositories for which to calculate the metrics.
            The aggregation is `AND` between repositories and developers.
            The aggregation is `OR` inside both repositories and developers.
          items:
            $ref: '#/components/schemas/ForSetCodeChecks'
          type: array
        metrics:
          description: Requested metric identifiers.
          items:
            $ref: '#/components/schemas/CodeCheckMetricID'
          type: array
        date_from:
          description: Date from when to start measuring the metrics.
          format: date
          type: string
        date_to:
          description: Date up to which to measure the metrics.
          format: date
          type: string
        timezone:
          $ref: '#/components/schemas/TimeZone'
        granularities:
          items:
            $ref: '#/components/schemas/Granularity'
          type: array
        quantiles:
          $ref: '#/components/schemas/Quantiles'
        account:
          description: Session account ID.
          type: integer
        split_by_check_runs:
          description: Calculate metrics separately for each number of check runs
            in suite.
          type: boolean
      required:
      - account
      - date_from
      - date_to
      - for
      - granularities
      - metrics
      type: object
    ForSetCodeChecks:
      additionalProperties: false
      description: Filters for `/metrics/code_checks` and `/histograms/code_checks`.
      example:
        repositories:
        - github.com/athenianco/athenian-webapp
        - github.com/athenianco/athenian-api
        pushers:
        - github.com/vmarkovtsev
        - github.com/dpordomingo
        jira:
          labels_include:
          - bug
      properties:
        repositories:
          $ref: '#/components/schemas/RepositorySet'
        repogroups:
          $ref: '#/components/schemas/IndexedGroups'
        pushers:
          $ref: '#/components/schemas/CommitPushers'
        pusher_groups:
          description: |-
            Check runs must be triggered by commits authored by these people.
            We aggregate by each group so that you can request metrics of several teams at once.
            We treat `pushers` as another group, if specified.
          items:
            items:
              $ref: '#/components/schemas/DeveloperID'
            type: array
          type: array
        labels_include:
          description: At least one of these labels must be present in the checked
            PRs.
          items:
            type: string
          type: array
        labels_exclude:
          description: None of these labels must be present in each checked PR.
          items:
            type: string
          type: array
        jira:
          allOf:
          - description: Analyze only those check runs that belong to PRs mapped to
              JIRA issues that satisfy this filter.
          - $ref: '#/components/schemas/JIRAFilter'
      required:
      - repositories
      type: object
    CodeCheckMetricID:
      description: |-
        The mentioned terms such as "check suite" and "check run" belong to [the official documentation on GitHub](https://docs.github.com/en/rest/guides/getting-started-with-the-checks-api#about-check-runs).
        * `chk-suites-count` - number of executed check suites.
        * `chk-successful-suites-count` - number of successfully executed check suites.
        * `chk-failed-suites-count` - number of failed check suites.
        * `chk-cancelled-suites-count` - number of cancelled check suites.
        * `chk-success-ratio` - `chk-successful-suites-count` divided by `chk-suites-count`.
        * `chk-suite-time` - average check suite execution time.
        * `chk-robust-suite-time` - average check suite execution time, alternative algorithm. We consider each suite size group separately, fill missing daily values by averaging the neighbors, and then take the average of group averages.
        * `chk-suites-per-pr` - average number of times check suites executed in a pull request.
        * `chk-suite-time-per-pr` - average check suite execution time by pull request. The difference with `chk-suite-time` is that we don't consider checks triggered by direct pushes, e.g. by merge commits.
        * `chk-prs-with-checks-count` - number of PRs that triggered at least one check suite.
        * `chk-flaky-commit-checks-count` - number of check suites triggered by the same commit but having different outcomes - both successful and failed.
        * `chk-prs-merged-with-failed-checks-count` - how many PRs were merged despite failing checks.
        * `chk-prs-merged-with-failed-checks-ratio` - ratio of PRs merged with failing checks to all merged PRs with checks.
        * `chk-concurrency-max` - maximum number of check runs of the same type executing in parallel. We consider check runs executing in parallel if their time intervals overlap ≥ 50%.
        * `chk-concurrency` - average number of check runs of the same type executing in parallel; we choose the check run type that corresponds to the maximum concurrency for each day. We consider check runs executing in parallel if their time intervals overlap ≥ 50%.
        * `chk-elapsed-time-per-concurrency` - cumulative time spent on each concurrency level across check runs. Only allowed for histograms.
      enum:
      - chk-suites-count
      - chk-successful-suites-count
      - chk-failed-suites-count
      - chk-cancelled-suites-count
      - chk-success-ratio
      - chk-suite-time
      - chk-robust-suite-time
      - chk-suites-per-pr
      - chk-suite-time-per-pr
      - chk-prs-with-checks-count
      - chk-flaky-commit-checks-count
      - chk-prs-merged-with-failed-checks-count
      - chk-prs-merged-with-failed-checks-ratio
      - chk-concurrency-max
      - chk-concurrency
      - chk-elapsed-time-per-concurrency
      example: chk-suites-count
      type: string
    CalculatedCodeCheckMetrics:
      additionalProperties: false
      description: Response from `/metrics/code_checks`. The dates start from `date_from`
        and end earlier or equal to `date_to`.
      example:
        metrics:
        - chk-suites-count
        date_from: 2020-01-23
        date_to: 2021-01-24
        granularities:
        - all
        calculated:
        - values:
          - date: 2020-01-23
            values:
            - 200
          for:
            repositories:
            - github.com/athenianco/athenian-webapp
            - github.com/athenianco/athenian-api
            pushers:
            - github.com/vmarkovtsev
            - github.com/dpordomingo
          granularity: all
      properties:
        calculated:
          description: Values of the requested metrics through time.
          items:
            $ref: '#/components/schemas/CalculatedCodeCheckMetricsItem'
          type: array
        metrics:
          description: Repeats `CodeCheckMetricsRequest.metrics`.
          items:
            $ref: '#/components/schemas/CodeCheckMetricID'
          type: array
        date_from:
          description: Repeats `CodeCheckMetricsRequest.date_from`.
          format: date
          type: string
        date_to:
          description: Repeats `CodeCheckMetricsRequest.date_to`.
          format: date
          type: string
        timezone:
          $ref: '#/components/schemas/TimeZone'
        granularities:
          items:
            $ref: '#/components/schemas/Granularity'
          type: array
        quantiles:
          $ref: '#/components/schemas/Quantiles'
        split_by_check_runs:
          description: Repeats `CodeCheckMetricsRequest.split_by_check_runs`.
          type: boolean
      required:
      - calculated
      - date_from
      - date_to
      - granularities
      - metrics
      type: object
    CalculatedCodeCheckMetricsItem:
      additionalProperties: false
      description: Series of calculated metrics for a specific set of repositories
        and commit authors.
      example:
        values:
        - date: 2020-01-23
          values:
          - 200
        for:
          repositories:
          - github.com/athenianco/athenian-webapp
          - github.com/athenianco/athenian-api
          pushers:
          - github.com/vmarkovtsev
          - github.com/dpordomingo
        granularity: all
      properties:
        for:
          $ref: '#/components/schemas/ForSetCodeChecks'
        granularity:
          $ref: '#/components/schemas/Granularity'
        check_runs:
          description: We calculated metrics for check suites with this number of
            runs. Not null only if the user specified `split_by_check_runs = true`.
          type: integer
        suites_ratio:
          description: Number of check suites with `check_runs` number of check runs
            divided by the overall number of check suites. Not null only if the user
            specified `split_by_check_runs = true`.
          format: float
          maximum: 1
          minimum: 0
          type: number
        values:
          description: The sequence steps from `date_from` till `date_to` by `granularity`.
          items:
            $ref: '#/components/schemas/CalculatedLinearMetricValues'
          type: array
      required:
      - for
      - values
      type: object
    CodeCheckHistogramsRequest:
      additionalProperties: false
      description: Request of `/histograms/code_checks`.
      example:
        for:
        - repositories:
          - github.com/athenianco/athenian-webapp
          - github.com/athenianco/athenian-api
          pushers:
          - github.com/vmarkovtsev
          - github.com/dpordomingo
        histograms:
        - scale: log
          metric: chk-suite-time
        account: 1
        date_to: 2020-11-23
        date_from: 2020-01-23
        timezone: 120
      properties:
        for:
          description: |-
            Sets of developers and repositories for which to calculate the histograms.
            The aggregation is `AND` between repositories and developers.
            The aggregation is `OR` inside both repositories and developers.
          items:
            $ref: '#/components/schemas/ForSetCodeChecks'
          type: array
        histograms:
          description: Histogram parameters for each wanted topic.
          items:
            $ref: '#/components/schemas/CodeCheckHistogramDefinition'
          type: array
        date_from:
          description: Date from when to start measuring the distribution.
          format: date
          type: string
        date_to:
          description: Date up to which to measure the distribution.
          format: date
          type: string
        timezone:
          $ref: '#/components/schemas/TimeZone'
        quantiles:
          $ref: '#/components/schemas/Quantiles'
        split_by_check_runs:
          description: Calculate histograms separately for each number of check runs
            in suite.
          type: boolean
        account:
          description: Session account ID.
          type: integer
      required:
      - account
      - date_from
      - date_to
      - for
      - histograms
      type: object
    CodeCheckHistogramDefinition:
      additionalProperties: false
      description: 'Histogram parameters: topic, bins.'
      example:
        metric: chk-suite-time
        ticks:
        - 60s
        - 120s
        - 180s
        - 360s
        - 720s
        - 1440s
      properties:
        metric:
          $ref: '#/components/schemas/CodeCheckMetricID'
        scale:
          allOf:
          - $ref: '#/components/schemas/HistogramScale'
          - description: Histogram's X axis scale.
        bins:
          description: Number of bars in the histogram. 0 or null means automatic.
          minimum: 0
          type: integer
        ticks:
          description: |-
            Alternatively to `bins` and `scale`, set the X axis bar borders manually.
            Only one of two may be specified. The ticks are automatically prepended
            the distribution minimum and appended the distribution maximum.
          items:
# {% if False %}
            allOf:
# {% else %}{{ "\n" }}            oneOf:{% endif %}
            - type: number
            - $ref: '#/components/schemas/TimeDuration'
          minItems: 1
          type: array
      required:
      - metric
      type: object
    CalculatedCodeCheckHistograms:
      description: Response from `/histograms/code_checks`.
      items:
        $ref: '#/components/schemas/CalculatedCodeCheckHistogram'
      type: array
    CalculatedCodeCheckHistogram:
      additionalProperties: false
      description: Calculated histogram over code checks (CI).
      example:
        for:
          repositories:
          - github.com/athenianco/athenian-webapp
          - github.com/athenianco/athenian-api
        metric: chk-suites-per-pr
        scale: linear
        ticks:
        - 0
        - 1
        - 2
        - 3
        - 5
        - 8
        - 12
        frequencies:
        - 0
        - 38
        - 28
        - 13
        - 120
        - 100
        interquartile:
          left: 2
          right: 8
      properties:
        for:
          $ref: '#/components/schemas/ForSetCodeChecks'
        metric:
          $ref: '#/components/schemas/CodeCheckMetricID'
        scale:
          $ref: '#/components/schemas/HistogramScale'
        ticks:
          description: Series of horizontal bar borders aka X axis. Their count is
            `len(y) + 1` because there are `N` intervals between `(N + 1)` ticks.
          items:
# {% if False %}
            allOf:
# {% else %}{{ "\n" }}            oneOf:{% endif %}
            - type: number
            - $ref: '#/components/schemas/TimeDuration'
          type: array
        frequencies:
          description: Series of histogram bar heights aka Y axis.
          items:
            minimum: 0
            type: integer
          type: array
        interquartile:
          $ref: '#/components/schemas/Interquartile'
      required:
      - for
      - frequencies
      - interquartile
      - metric
      - scale
      - ticks
      type: object
    CommitPushers:
      description: Check runs must be triggered by commits pushed by these people.
        When it is impossible to determine who pushed, e.g. in legacy API based checks,
        they are committers.
      example:
      - github.com/vmarkovtsev
      - github.com/se7entyse7en
      items:
        $ref: '#/components/schemas/DeveloperID'
      type: array
    FilterCodeChecksRequest:
      additionalProperties: false
      description: Request body of `/filter/code_checks`.
      example:
        in:
        - github.com/athenianco/athenian-webapp
        - github.com/athenianco/athenian-api
        triggered_by:
        - github.com/vmarkovtsev
        - github.com/se7entyse7en
        date_from: 2020-05-01
        date_to: 2021-05-01
        timezone: 120
        account: 1
      properties:
        in:
          $ref: '#/components/schemas/RepositorySet'
        triggered_by:
          $ref: '#/components/schemas/CommitPushers'
        labels_include:
          description: At least one of these labels must be present in the checked
            PRs.
          items:
            type: string
          type: array
        labels_exclude:
          description: None of these labels must be present in each checked PR.
          items:
            type: string
          type: array
        jira:
          allOf:
          - description: Analyze only those check runs that belong to PRs mapped to
              JIRA issues that satisfy this filter.
          - $ref: '#/components/schemas/JIRAFilter'
        date_from:
          description: Date from when to start measuring the metrics.
          format: date
          type: string
        date_to:
          description: Date up to which to measure the metrics.
          format: date
          type: string
        timezone:
          $ref: '#/components/schemas/TimeZone'
        account:
          description: Session account ID.
          type: integer
        quantiles:
          allOf:
          - description: Quantiles to apply to the execution time series before calculating
              the average.
          - $ref: '#/components/schemas/Quantiles'
      required:
      - account
      - date_from
      - date_to
      - in
      type: object
    FilteredCodeCheckRuns:
      additionalProperties: false
      description: |-
        Response from `/filter/code_checks`, found code check runs ordered by repository
        name and then by title. Note: we always consider the completed run executions only.
      example:
        items:
        - title: Unit tests
          repository: github.com/src-d/athenian-api
          last_execution_time: 2021-05-18
          last_execution_url: https://github.com/athenianco/athenian-api/pull/1448/checks?check_run_id=2610787628
          size_groups:
          - 3
          - 5
          - 8
          total_stats:
            count: 100
            successes: 50
            mean_execution_time: 200s
            median_execution_time: 120s
            skips: 30
            flaky_count: 0
            count_timeline:
            - 0
            - 20
            - 40
            - 30
            - 0
            - 10
            successes_timeline:
            - 0
            - 10
            - 20
            - 15
            - 0
            - 5
            mean_execution_time_timeline:
            - null
            - 160s
            - 210s
            - 205s
            - null
            - 180s
            median_execution_time_timeline:
            - null
            - 100s
            - 125s
            - 120s
            - null
            - 110s
          prs_stats:
            count: 100
            successes: 50
            mean_execution_time: 200s
            median_execution_time: 120s
            skips: 30
            flaky_count: 0
            count_timeline:
            - 0
            - 20
            - 40
            - 30
            - 0
            - 10
            successes_timeline:
            - 0
            - 10
            - 20
            - 15
            - 0
            - 5
            mean_execution_time_timeline:
            - null
            - 160s
            - 210s
            - 205s
            - null
            - 180s
            median_execution_time_timeline:
            - null
            - 100s
            - 125s
            - 120s
            - null
            - 110s
        timeline:
        - 2020-05-01
        - 2020-05-02
        - 2020-05-03
        - 2020-05-04
        - 2020-05-05
      properties:
        timeline:
          description: |-
            Sequence of dates from `date_from` till `date_to`. We choose
            the adaptive intervals by applying these rules on `(date_to - date_from)`:
            - Less than 5 weeks: daily.
            - Less than 5 months: weekly (*not aligned*).
            - Aligned monthly.
          items:
            format: date
            type: string
          type: array
        items:
          description: Found check runs and their stats.
          items:
            $ref: '#/components/schemas/FilteredCodeCheckRun'
          type: array
      required:
      - items
      - timeline
      type: object
    CodeCheckRunStatistics:
      additionalProperties: false
      description: Gathered statistics about a group of check runs.
      example:
        count: 100
        successes: 50
        mean_execution_time: 200s
        median_execution_time: 120s
        skips: 30
        flaky_count: 0
        count_timeline:
        - 0
        - 20
        - 40
        - 30
        - 0
        - 10
        successes_timeline:
        - 0
        - 10
        - 20
        - 15
        - 0
        - 5
        mean_execution_time_timeline:
        - null
        - 160s
        - 210s
        - 205s
        - null
        - 180s
        median_execution_time_timeline:
        - null
        - 100s
        - 125s
        - 120s
        - null
        - 110s
      properties:
        count:
          description: Number of executions with respect to `date_from` and `date_to`.
          minimum: 1
          type: integer
        successes:
          description: Number of successful executions with respect to `date_from`
            and `date_to`.
          minimum: 0
          type: integer
        mean_execution_time:
          allOf:
          - description: Average elapsed execution time.
            nullable: true
          - $ref: '#/components/schemas/TimeDuration'
        median_execution_time:
          allOf:
          - description: Median elapsed execution time.
            nullable: true
          - $ref: '#/components/schemas/TimeDuration'
        skips:
          description: Number of times this check run was skipped.
          minimum: 0
          type: integer
        flaky_count:
          description: |-
            Number of times this check run appeared flaky: it both failed and succeeded for
            the same commit.
          minimum: 0
          type: integer
        count_timeline:
          description: Number of executions through time. The dates sequence is `FilteredCodeCheckRuns.timeline`.
          items:
            minimum: 0
            type: integer
          type: array
        successes_timeline:
          description: Number of successful executions through time. The dates sequence
            is `FilteredCodeCheckRuns.timeline`.
          items:
            minimum: 0
            type: integer
          type: array
        mean_execution_time_timeline:
          description: Average elapsed execution time through time. The dates sequence
            is `FilteredCodeCheckRuns.timeline`.
          items:
            $ref: '#/components/schemas/TimeDuration'
          type: array
        median_execution_time_timeline:
          description: Median elapsed execution time through time. The dates sequence
            is `FilteredCodeCheckRuns.timeline`.
          items:
            $ref: '#/components/schemas/TimeDuration'
          type: array
      required:
      - count
      - count_timeline
      - flaky_count
      - mean_execution_time
      - mean_execution_time_timeline
      - median_execution_time
      - median_execution_time_timeline
      - skips
      - successes
      - successes_timeline
      type: object
    FilteredCodeCheckRun:
      additionalProperties: false
      description: Mined information about a code check run.
      example:
        title: Unit tests
        repository: github.com/src-d/athenian-api
        last_execution_time: 2021-05-18
        last_execution_url: https://github.com/athenianco/athenian-api/pull/1448/checks?check_run_id=2610787628
        size_groups:
        - 3
        - 5
        - 8
        total_stats:
          count: 100
          successes: 50
          mean_execution_time: 200s
          median_execution_time: 120s
          skips: 30
          flaky_count: 0
          count_timeline:
          - 0
          - 20
          - 40
          - 30
          - 0
          - 10
          successes_timeline:
          - 0
          - 10
          - 20
          - 15
          - 0
          - 5
          mean_execution_time_timeline:
          - null
          - 160s
          - 210s
          - 205s
          - null
          - 180s
          median_execution_time_timeline:
          - null
          - 100s
          - 125s
          - 120s
          - null
          - 110s
        prs_stats:
          count: 100
          successes: 50
          mean_execution_time: 200s
          median_execution_time: 120s
          skips: 30
          flaky_count: 0
          count_timeline:
          - 0
          - 20
          - 40
          - 30
          - 0
          - 10
          successes_timeline:
          - 0
          - 10
          - 20
          - 15
          - 0
          - 5
          mean_execution_time_timeline:
          - null
          - 160s
          - 210s
          - 205s
          - null
          - 180s
          median_execution_time_timeline:
          - null
          - 100s
          - 125s
          - 120s
          - null
          - 110s
      properties:
        title:
          description: Unique name of the check run.
          type: string
        repository:
          $ref: '#/components/schemas/RepositoryID'
        last_execution_time:
          description: Timestamp of when the check run launched the latest.
          format: date-time
          type: string
        last_execution_url:
          description: Link to the check run that launched the latest.
          format: url
          type: string
        total_stats:
          allOf:
          - description: Gathered statistics for executions triggered by both direct
              commit pushes and pull requests.
          - $ref: '#/components/schemas/CodeCheckRunStatistics'
        prs_stats:
          allOf:
          - description: Gathered statistics for executions triggered by pull requests.
          - $ref: '#/components/schemas/CodeCheckRunStatistics'
        size_groups:
          description: Check suite sizes this check run belongs to.
          items:
            minimum: 1
            type: integer
          type: array
      required:
      - last_execution_time
      - last_execution_url
      - prs_stats
      - repository
      - size_groups
      - title
      - total_stats
      type: object
