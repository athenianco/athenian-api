openapi: 3.0.3
info:
  contact:
    email: admin@athenian.co
    name: the admins by email
  description: 'Server version: {{ server_version }} built on {{ build_date }} @
    [{{ commit }}](https://github.com/athenianco/athenian-api/commit/{{ commit }})'
  license:
    name: CC-BY-4.0
  title: '{{ title }}'
  version: 1.0.41
servers:
- description: '{{ server_description }} - {{ server_url }}'
  url: '{{ server_url }}/v1'
paths:
  /account/user:
    put:
      operationId: change_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUserChangeRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Effective account members.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Requesting user is not an admin of the account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account was not found.
      security:
      - bearerAuth: []
      summary: 'Change the status of an account member: regular, admin, or banished
        (deleted). This endpoint is allowed only for account admins.'
      tags:
      - user
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.user_controller
      x-codegen-request-body-name: body
  /account/{id}:
    get:
      operationId: get_account
      parameters:
      - description: Numeric identifier of the account to list. The user must belong
          to that account. To find out which accounts the user belongs to, see `/user`.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: List of the account members.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user does not have access to this account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account was not found.
      security:
      - bearerAuth: []
      summary: List the current user's account members.
      tags:
      - user
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.user_controller
      x-codegen-request-body-name: body
  /become:
    get:
      operationId: become_user
      parameters:
      - description: Numeric identifier of the user to turn into.
        explode: false
        in: query
        name: id
        required: false
        schema:
          type: string
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Details of the new active user, the same as `/user`.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Current user is not allowed to mutate.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Requested user does not exist.
      security:
      - bearerAuth: []
      summary: '"God mode" ability to turn into any user. The current user must be
        marked internally as a super admin.'
      tags:
      - user
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.user_controller
      x-codegen-request-body-name: body
  /contributors/{id}:
    get:
      operationId: get_contributors
      parameters:
      - description: Numeric identifier of the account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contributors'
          description: List of all contributors belonging to the specified account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user does not belong to the specified account.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The installation has not started yet.
      security:
      - bearerAuth: []
      summary: List all the contributors belonging to the specified account.
      tags:
      - contributors
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.contributors_controller
      x-codegen-request-body-name: body
  /filter/commits:
    post:
      operationId: filter_commits
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterCommitsRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitsList'
          description: Commits that satisfy the specified filters grouped by date.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Current user is not allowed to access the specified account.
      security:
      - bearerAuth: []
      summary: Find commits that match the specified query.
      tags:
      - filter
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.filter_controller
      x-codegen-request-body-name: body
  /filter/contributors:
    post:
      operationId: filter_contributors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenericFilterRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeveloperSummaries'
          description: Repositories that were updated within the given timeframe.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Current user is not allowed to access the specified account.
      security:
      - bearerAuth: []
      summary: Find developers that made an action within the given timeframe.
      tags:
      - filter
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.filter_controller
      x-codegen-request-body-name: body
  /filter/pull_requests:
    post:
      operationId: filter_prs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterPullRequestsRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequestSet'
          description: List of pull requests satisfying the specified filters.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Current user is not allowed to access the specified account
            or reposets.
      security:
      - bearerAuth: []
      summary: List pull requests that satisfy the query.
      tags:
      - filter
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.filter_controller
  /filter/releases:
    post:
      operationId: filter_releases
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenericFilterRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilteredReleases'
          description: Repositories that were updated within the given timeframe.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Current user is not allowed to access the specified account.
      security:
      - bearerAuth: []
      summary: Find releases that were published in the given time fram in the given
        repositories.
      tags:
      - filter
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.filter_controller
      x-codegen-request-body-name: body
  /filter/repositories:
    post:
      operationId: filter_repositories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenericFilterRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositorySet'
          description: Repositories that were updated within the given timeframe.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Current user is not allowed to access the specified account
            or reposets.
      security:
      - bearerAuth: []
      summary: Find repositories that were updated within the given timeframe.
      tags:
      - filter
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.filter_controller
      x-codegen-request-body-name: body
  /invite/accept:
    put:
      operationId: accept_invitation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationLink'
        description: Accepted invitation details.
        required: true
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitedUser'
          description: Details about the new user.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Something is wrong with the invitation URL.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Invitation was disabled.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Invitation was not found.
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Concurrent requests.
      security:
      - bearerAuth: []
      summary: Accept the account membership invitation and finish registration. The
        user must be already authorized in Auth0.
      tags:
      - registration
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.invitation_controller
      x-codegen-request-body-name: body
  /invite/check:
    post:
      operationId: check_invitation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationLink'
        description: Checked invitation details.
        required: true
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationCheckResult'
          description: 'Result of checking an invitation URL: invitation type, whether
            it is correctly formed and is enabled.'
      summary: Given an invitation URL, get its type (admin or regular account member)
        and find whether it is correctly formed and is enabled or disabled.
      tags:
      - registration
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.invitation_controller
      x-codegen-request-body-name: body
  /invite/generate/{id}:
    get:
      operationId: gen_invitation
      parameters:
      - description: Numeric identifier of the account where to invite new users.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationLink'
          description: The invitation link has been generated successfully.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to invite for this account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account was not found.
      security:
      - bearerAuth: []
      summary: Generate an account invitation link for regular users. The caller must
        be an admin of the specified account.
      tags:
      - registration
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.invitation_controller
      x-codegen-request-body-name: body
  /invite/progress/{id}:
    get:
      operationId: eval_invitation_progress
      parameters:
      - description: Numeric identifier of the account which the user has joined.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallationProgress'
          description: Status of installing Athenian for the current user and the
            given account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The account does not exist or the user is not its member.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The installation has not started yet.
      security:
      - bearerAuth: []
      summary: Return the current Athenian GitHub app installation progress.
      tags:
      - registration
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.invitation_controller
  /metrics/code_bypassing_prs:
    post:
      operationId: calc_code_bypassing_prs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodeFilter'
        description: Query for measuring the amount of code that was pushed outside
          of pull requests.
        required: true
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeasuredCodeBypassingPRs'
          description: Calculated metrics.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to access the specified repositories
            on behalf of the specified account.
      security:
      - bearerAuth: []
      summary: Measure the amount of code that was pushed outside of pull requests.
      tags:
      - metrics
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.metrics_controller
      x-codegen-request-body-name: body
  /metrics/developers:
    post:
      operationId: calc_metrics_developer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeveloperMetricsRequest'
        description: Query for selecting developers and measured activities.
        required: true
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalculatedDeveloperMetrics'
          description: Calculated metrics.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to access the specified repositories
            on behalf of the specified account.
      security:
      - bearerAuth: []
      summary: Calculate metrics over developer activities.
      tags:
      - metrics
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.metrics_controller
      x-codegen-request-body-name: body
  /metrics/prs:
    post:
      operationId: calc_metrics_pr_linear
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PullRequestMetricsRequest'
        description: Desired metric definitions.
        required: true
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalculatedPullRequestMetrics'
          description: Calculated metrics.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to calculate metrics on behalf of the
            specified account.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoSourceDataError'
          description: No data is available to calculate metrics for the given repositories.
      security:
      - bearerAuth: []
      summary: Calculate linear metrics over PRs.
      tags:
      - metrics
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.metrics_controller
      x-codegen-request-body-name: body
  /reposet/create:
    post:
      operationId: create_reposet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositorySetCreateRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedIdentifier'
          description: Identifier of the created repository set.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to create a repository set from the specified
            items.
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: There is an existing reposet with the same contents.
      security:
      - bearerAuth: []
      summary: Create a repository set.
      tags:
      - reposet
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.reposet_controller
      x-codegen-request-body-name: body
  /reposet/{id}:
    delete:
      operationId: delete_reposet
      parameters:
      - description: Numeric identifier of the repository set to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
          description: Empty object indicates a successful removal.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to delete the specified repository set.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified repository set was not found.
      security:
      - bearerAuth: []
      summary: Delete a repository set. The user must be an admin of the account that
        owns the reposet.
      tags:
      - reposet
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.reposet_controller
      x-codegen-request-body-name: body
    get:
      operationId: get_reposet
      parameters:
      - description: Numeric identifier of the repository set to list.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositorySet'
          description: List of repositories in the specified set.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to list the specified repository set.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified repository set was not found.
      security:
      - bearerAuth: []
      summary: List a repository set. The user must be in the account that owns the
        reposet.
      tags:
      - reposet
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.reposet_controller
      x-codegen-request-body-name: body
    put:
      operationId: update_reposet
      parameters:
      - description: Numeric identifier of the repository set to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositorySet'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
          description: Empty object indicates a successful operation.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to update the specified repository set.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified repository set was not found.
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: There is an existing reposet with the same contents.
      security:
      - bearerAuth: []
      summary: Update a repository set. The user must be an admin of the account that
        owns the reposet.
      tags:
      - reposet
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.reposet_controller
      x-codegen-request-body-name: body
  /reposets/{id}:
    get:
      operationId: list_reposets
      parameters:
      - description: Numeric identifier of the account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositorySetList'
          description: List the repository sets belonging to the specified account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user does not belong to the specified account.
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Concurrent requests that are finishing the account registration.
      security:
      - bearerAuth: []
      summary: List the repository sets belonging to the current user.
      tags:
      - reposet
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.reposet_controller
      x-codegen-request-body-name: body
  /team/create:
    post:
      operationId: create_team
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamCreateRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedIdentifier'
          description: Identifier of the created team.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to create a team from the specified items.
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: There is an existing team with the same contents.
      security:
      - bearerAuth: []
      summary: Create a team.
      tags:
      - team
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.team_controller
      x-codegen-request-body-name: body
  /team/{id}:
    delete:
      operationId: delete_team
      parameters:
      - description: Numeric identifier of the team to delete.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
          description: Empty object indicates a successful removal.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to delete the specified team.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified team was not found.
      security:
      - bearerAuth: []
      summary: Delete a team.
      tags:
      - team
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.team_controller
      x-codegen-request-body-name: body
    get:
      operationId: get_team
      parameters:
      - description: Numeric identifier of the team to list.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: List of the members in the specified team.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to list the specified team.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified team was not found.
      security:
      - bearerAuth: []
      summary: List the team's members. The user must belong to the account that owns
        the team.
      tags:
      - team
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.team_controller
      x-codegen-request-body-name: body
    put:
      operationId: update_team
      parameters:
      - description: Numeric identifier of the team to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamUpdateRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
          description: Empty object indicates a successful operation.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The request was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is forbidden to update the specified team.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The specified team was not found.
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: There is an existing team with the same contents.
      security:
      - bearerAuth: []
      summary: Update a team.
      tags:
      - team
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.team_controller
      x-codegen-request-body-name: body
  /teams/{id}:
    get:
      operationId: list_teams
      parameters:
      - description: Numeric identifier of the account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamList'
          description: List the teams belonging to the specified account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user does not belong to the specified account.
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Concurrent requests that are finishing the account registration.
      security:
      - bearerAuth: []
      summary: List the teams belonging to the current user.
      tags:
      - team
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.team_controller
      x-codegen-request-body-name: body
  /settings/release_match:
    put:
      operationId: set_release_match
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReleaseMatchRequest'
        x-body-name: body
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositorySet'
          description: List the repositories affected.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: Request is invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user is not an admin of this account.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user or the account was not found.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The installation has not started yet.
      security:
      - bearerAuth: []
      summary: Set the release matching rule for a list of repositories. Only for
        account admins.
      tags:
      - settings
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.settings_controller
      x-codegen-request-body-name: body
  /settings/release_match/{id}:
    get:
      operationId: list_release_match_settings
      parameters:
      - description: Numeric identifier of the account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseMatchSettings'
          description: Current release matching settings per repo.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The user does not belong to the specified account.
        422:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: The installation has not started yet.
      security:
      - bearerAuth: []
      summary: List the current release matching settings.
      tags:
      - settings
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.settings_controller
      x-codegen-request-body-name: body
  /user:
    get:
      operationId: get_user
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Details about the current user.
      security:
      - bearerAuth: []
      summary: Show details about the current user.
      tags:
      - user
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.user_controller
      x-codegen-request-body-name: body
  /versions:
    get:
      operationId: get_versions
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Versions'
          description: Versions of the backend components.
      security: []
      summary: Query the versions of the backend components.
      tags:
      - version
# {% if False %}
      - default
# {% endif %}
      x-openapi-router-controller: athenian.api.controllers.status_controller
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: athenian.api.controllers.security_controller.info_from_bearerAuth
  schemas:
    CreatedIdentifier:
      additionalProperties: false
      example:
        id: 777
      properties:
        id:
          description: Identifier of the created entity.
          example: 777
          type: integer
      required:
      - id
      type: object
    GenericError:
      properties:
        type:
          description: URI reference that identifies the problem type (RFC 7807).
          example: /errors/metrics/pr_linear/InvalidRequestError
          type: string
        title:
          description: Short, human-readable summary of the problem type.
          example: Validation failed
          type: string
        status:
          description: Duplicated HTTP status code.
          example: 400
          type: integer
        detail:
          description: Human-readable explanation specific to this occurrence of the
            problem.
          example: '"pr-slave-time" is not one of [...].'
          type: string
        instance:
          description: URI reference that identifies the specific occurrence of the
            problem.
          example: https://sentry.io/athenian/api/?query=2763c4eabd7240f59829ee1a02546293
          type: string
      required:
      - title
      - type
      type: object
    InvalidRequestError:
      allOf:
      - $ref: '#/components/schemas/GenericError'
      - properties:
          pointer:
            description: Path to the offending request item.
            example: .granularity
            type: string
        type: object
    NoSourceDataError:
      allOf:
      - $ref: '#/components/schemas/GenericError'
      - properties:
          repositories:
            $ref: '#/components/schemas/RepositorySet'
        type: object
    PullRequestMetricID:
      description: |-
        Currently supported PR metric types.
        * `pr-wip-time`: average time spent in Work In Progress stage.
        * `pr-wip-count`: number of PRs used to calculate `pr-wip-time`.
        * `pr-review-time`: average time spent in Review stage.
        * `pr-review-count`: number of PRs used to calculate `pr-review-time`.
        * `pr-merging-time`: average time spent in Merge stage.
        * `pr-merging-count`: number of PRs used to calculate `pr-merging-time`.
        * `pr-release-time`: average time spent in Release stage.
        * `pr-release-count`: number of PRs used to calculate `pr-release-time`.
        * `pr-lead-time`: average Lead Time - time between the work started and the release.
        * `pr-lead-count`: number of PRs used to calculate `pr-lead-time`. It should be the same as `pr-release-count`.
        * `pr-cycle-time`: Cycle Time - sum of correspodning `pr-wip-time`, `pr-review-time`, `pr-merging-time`, and `pr-release-time`.
        * `pr-cycle-count`: number of PRs used to calculate `pr-cycle-time`. It equals to the overall number of PRs observed in the given time window.
        * `pr-all-count`: equals to the sum of `pr-cycle-count` with the number of PRs which are still not done on the specified time interval but don't have any stage-changing events. This metric should be exactly the same as the number of PRs returned by `/filter/prs`.
        * `pr-wait-first-review`: average time of waiting for the first review.
        * `pr-wait-first-review-count`: number of PRs used to calculate `pr-wait-first-review`. Note: this is *not* the same as the number of PRs waiting for the first review.
        * `pr-flow-ratio`: ratio of opened to closed PRs.
        * `pr-opened`: number of opened PRs.
        * `pr-merged`: number of merged PRs.
        * `pr-closed`: number of closed PRs.
        * `pr-released`: number of released PRs.
      enum:
      - pr-wip-time
      - pr-wip-count
      - pr-review-time
      - pr-review-count
      - pr-merging-time
      - pr-merging-count
      - pr-release-time
      - pr-release-count
      - pr-lead-time
      - pr-lead-count
      - pr-cycle-time
      - pr-cycle-count
      - pr-all-count
      - pr-wait-first-review
      - pr-wait-first-review-count
      - pr-flow-ratio
      - pr-opened
      - pr-merged
      - pr-closed
      - pr-released
      example: pr-lead-time
      type: string
    DeveloperID:
      description: |
        User name which uniquely identifies any developer on any service provider.
        The format matches the profile URL without the protocol part.
      example: github.com/vmarkovtsev
      type: string
    RepositoryID:
      description: |
        Repository name which uniquely identifies any repository in any service provider.
        The format matches the repository URL without the protocol part. No ".git" should be appended.
        We support a special syntax for repository sets: "{reposet id}" adds all the repositories
        from the given set.
      example: github.com/src-d/go-git
      type: string
    DeveloperSet:
      description: A set of developers. An empty list disables the filter and includes
        everybody. Duplicates are automatically ignored.
      example:
      - github.com/vmarkovtsev
      - github.com/dpordomingo
      items:
        $ref: '#/components/schemas/DeveloperID'
      type: array
    Contributors:
      description: List of contributors.
      example:
      - login: github.com/gkwillie
        name: Groundskeeper Willie
        email: bot@athenian.co
        picture: https://avatars0.githubusercontent.com/u/60340680?v=4
      - login: github.com/se7entyse7en
        name: Lou Marvin Caraig
        email: loumarvincaraig@gmail.com
        picture: https://avatars1.githubusercontent.com/u/5599208?v=4
      items:
        $ref: '#/components/schemas/Contributor'
      type: array
    Contributor:
      additionalProperties: false
      description: Details about a developer who contributed to some repositories
        owned by the account.
      example:
        login: github.com/gkwillie
        name: Groundskeeper Willie
        email: bot@athenian.co
        picture: https://avatars0.githubusercontent.com/u/60340680?v=4
      properties:
        login:
          $ref: '#/components/schemas/DeveloperID'
        name:
          description: Full name of the contributor.
          type: string
        email:
          description: Email of the conributor.
          type: string
        picture:
          description: Avatar URL of the contributor.
          type: string
      required:
      - email
      - login
      - name
      - picture
      type: object
    TeamCreateRequest:
      additionalProperties: false
      description: Team creation request.
      example:
        account: 1
        name: Engineering
        members:
        - github.com/gkwillie
        - github.com/se7entyse7en
      properties:
        account:
          description: Account identifier. That account will own the created team.
          type: integer
        name:
          description: Name of the team.
          type: string
        members:
          description: Members of the team.
          $ref: '#/components/schemas/DeveloperSet'
      required:
      - account
      - members
      - name
      type: object
    TeamUpdateRequest:
      additionalProperties: false
      description: Team update request.
      example:
        id: 1
        name: Engineering
        members:
        - github.com/gkwillie
        - github.com/se7entyse7en
      properties:
        id:
          description: Team identifier.
          type: integer
        name:
          description: Name of the team.
          type: string
        members:
          description: Members of the team.
          $ref: '#/components/schemas/DeveloperSet'
      required:
      - id
      - members
      - name
      type: object
    Team:
      description: List of team members.
      example:
        id: 1
        name: Engineering
        members:
        - login: github.com/gkwillie
          name: Groundskeeper Willie
          email: bot@athenian.co
          picture: https://avatars0.githubusercontent.com/u/60340680?v=4
        - login: github.com/se7entyse7en
          name: Lou Marvin Caraig
          email: loumarvincaraig@gmail.com
          picture: https://avatars1.githubusercontent.com/u/5599208?v=4
      properties:
        id:
          description: Team identifier.
          type: integer
        name:
          description: Name of the team.
          type: string
        members:
          $ref: '#/components/schemas/Contributors'
      required:
      - id
      - members
      - name
      type: object
    TeamList:
      description: List of teams of an account.
      example:
      - id: 1
        name: Engineering
        members:
        - login: github.com/vmarkovtsev
          name: Vadim Markovtsev
          email: vadim@athenian.co
          picture: https://avatars3.githubusercontent.com/u/2793551?v=4
        - login: github.com/se7entyse7en
          name: Lou Marvin Caraig
          email: waren@athenian.co
          picture: https://avatars1.githubusercontent.com/u/5599208?v=4
      - id: 2
        name: Product
        members:
        - login: github.com/warenlg
          name: Waren Long
          email: waren@athenian.co
          picture: https://avatars2.githubusercontent.com/u/24694845?v=4
      items:
        $ref: '#/components/schemas/Team'
      type: array
    RepositorySet:
      description: A set of repositories. An empty list results an empty response
        in contrary to DeveloperSet. Duplicates are automatically ignored.
      example:
      - github.com/athenianco/athenian-webapp
      - github.com/athenianco/athenian-api
      items:
        $ref: '#/components/schemas/RepositoryID'
      type: array
    RepositorySetList:
      description: List of repository sets owned by a user.
      items:
        $ref: '#/components/schemas/RepositorySetListItem'
      type: array
    RepositorySetCreateRequest:
      additionalProperties: false
      description: Repository set creation request.
      example:
        account: 1
        items:
        - github.com/athenianco/athenian-webapp
        - github.com/athenianco/athenian-api
      properties:
        account:
          description: Account identifier. That account will own the created repository
            set. The user must be an admin of the account.
          type: integer
        items:
          $ref: '#/components/schemas/RepositorySet'
      required:
      - account
      - items
      type: object
    RepositorySetListItem:
      additionalProperties: false
      description: Element of RepositorySetList.
      example:
        items_count: 6
        created: 2020-01-23T04:56:07.000+00:00
        id: 1
        updated: 2020-01-23T04:56:07.000+00:00
      properties:
        id:
          description: Repository set identifier.
          type: integer
        created:
          description: Date and time of creation of the repository set.
          format: date-time
          type: string
        updated:
          description: Date and time of the last change of the repository set.
          format: date-time
          type: string
        items_count:
          description: Number of repositories in the set.
          type: integer
      type: object
    User:
      additionalProperties: false
      description: User details. "updated" and "accounts" are populated only for the
        current user.
      example:
        id: github|60340680
        native_id: 60340680
        name: Groundskeeper Willie
        email: bot@athenian.co
        picture: https://avatars0.githubusercontent.com/u/60340680?v=4
        updated: 2020-01-23T12:00:00Z
      properties:
        id:
          description: Auth0 user identifier.
          type: string
        native_id:
          description: Auth backend user identifier.
          type: string
        name:
          description: Full name of the user.
          type: string
        email:
          description: Email of the user.
          type: string
        picture:
          description: Avatar URL of the user.
          type: string
        updated:
          description: Date and time of the last profile update.
          format: date-time
          type: string
        accounts:
          additionalProperties:
            type: boolean
          description: Mapping between account IDs the user is a member of and is_admin
            flags.
          example:
            1: true
            2: false
          type: object
      required:
      - email
      - id
      - name
      - native_id
      - picture
      type: object
    InvitedUser:
      additionalProperties: false
      description: Details about the user who has accepted an invitation.
      example:
        user:
          id: github|60340680
          native_id: 60340680
          name: Groundskeeper Willie
          email: bot@athenian.co
          picture: https://avatars0.githubusercontent.com/u/60340680?v=4
          updated: 2020-01-23T12:00:00Z
        account: 0
      properties:
        account:
          description: Joined account ID.
          type: integer
        user:
          $ref: '#/components/schemas/User'
      required:
      - account
      - user
      type: object
    Account:
      additionalProperties: false
      description: Account members. "updated" and "accounts" are not populated.
      example:
        regulars:
        - id: 248289761001
          name: Jane Josephine Doe
          email: janedoe@exampleco.com
          picture: http://exampleco.com/janedoe/me.jpg
          updated: 2020-01-23T12:00:00Z
        - id: 248289761001
          name: Jane Josephine Doe
          email: janedoe@exampleco.com
          picture: http://exampleco.com/janedoe/me.jpg
          updated: 2020-01-23T12:00:00Z
        admins:
        - id: 248289761001
          name: Jane Josephine Doe
          email: janedoe@exampleco.com
          picture: http://exampleco.com/janedoe/me.jpg
          updated: 2020-01-23T12:00:00Z
        - id: 248289761001
          name: Jane Josephine Doe
          email: janedoe@exampleco.com
          picture: http://exampleco.com/janedoe/me.jpg
          updated: 2020-01-23T12:00:00Z
      properties:
        admins:
          items:
            $ref: '#/components/schemas/User'
          type: array
        regulars:
          items:
            $ref: '#/components/schemas/User'
          type: array
      required:
      - admins
      - regulars
      type: object
    InvitationLink:
      additionalProperties: false
      example:
        url: https://app.athenian.co/i/deadf88d
      properties:
        url:
          description: Invitation URL. Users are supposed to click it and become admins
            or regular account members.
          format: url
          type: string
      required:
      - url
      type: object
    InvitationCheckResult:
      additionalProperties: false
      example:
        active: true
        type: regular
        valid: true
      properties:
        active:
          description: Value indicating whether the invitation is still enabled.
          type: boolean
        type:
          description: Invited user's account membership status.
          enum:
          - admin
          - regular
          type: string
        valid:
          description: Value indicating whether the invitation URL is correctly formed.
          type: boolean
      required:
      - valid
      type: object
    InstallationProgress:
      additionalProperties: false
      description: Data fetching progress of the Athenian metadata retrieval app.
      example:
        tables:
        - fetched: 50
          name: Commit
          total: 100
        - fetched: 0
          name: PullRequest
          total: 20
        finished_date: 2020-01-23T04:56:07Z
        started_date: 2020-01-23T06:56:07Z
        owner: vmarkovtsev
        repositories: 30
      properties:
        started_date:
          description: Date and time when the historical data collection began.
          format: date-time
          type: string
        finished_date:
          description: Date and time when the historical data collection ended.
          format: date-time
          nullable: true
          type: string
        owner:
          description: Native user ID of the person who installed the metadata retrieval
            app.
          type: string
        repositories:
          description: Number of discovered repositories.
          type: integer
        tables:
          example:
          - fetched: 50
            name: Commit
            total: 100
          - fetched: 0
            name: PullRequest
          items:
            $ref: '#/components/schemas/TableFetchingProgress'
          type: array
      required:
      - finished_date
      - owner
      - repositories
      - started_date
      - tables
      type: object
    TableFetchingProgress:
      additionalProperties: false
      description: Used in InstallationProgress.tables to indicate how much data has
        been loaded in each DB table.
      example:
        fetched: 50
        name: Commit
        total: 100
      properties:
        fetched:
          description: How many records have been stored in the DB table so far.
          type: integer
        name:
          description: DB table identifier.
          type: string
        total:
          description: How many records the DB table is expected to have.
          type: integer
      required:
      - fetched
      - name
      - total
      type: object
    ForSet:
      additionalProperties: false
      example:
        repositories:
        - github.com/athenianco/athenian-webapp
        - github.com/athenianco/athenian-api
        developers:
        - github.com/vmarkovtsev
        - github.com/dpordomingo
      properties:
        repositories:
          $ref: '#/components/schemas/RepositorySet'
        developers:
          $ref: '#/components/schemas/DeveloperSet'
      required:
      - repositories
      type: object
    Granularity:
      description: 'How often the metrics are reported. The value must satisfy the
        following regular expression: /^(([1-9]\d* )?(day|week|month|year)|all)$/.
        "all" produces a single interval [`date_from`, `date_to`].'
      example: 2 week
      type: string
    PullRequestMetricsRequest:
      additionalProperties: false
      description: Request for calculating metrics on top of pull requests data.
      example:
        for:
        - repositories:
          - github.com/athenianco/athenian-webapp
          - github.com/athenianco/athenian-api
          developers:
          - github.com/vmarkovtsev
          - github.com/dpordomingo
        - repositories:
          - github.com/athenianco/athenian-webapp
          - github.com/athenianco/athenian-api
          developers:
          - github.com/vmarkovtsev
          - github.com/dpordomingo
        metrics:
        - pr-lead-time
        - pr-wip-time
        date_from: 2020-01-23
        date_to: 2020-01-24
        granularities:
        - day
        account: 1
      properties:
        for:
          description: |-
            Sets of developers and repositories for which to calculate the metrics.
            The aggregation is `AND` between repositories and developers.
            The aggregation is `OR` inside both repositories and developers.
            Any contribution role is matched: authors, reviewers, commenters, committers, releasers.
          items:
            $ref: '#/components/schemas/ForSet'
          type: array
        metrics:
          description: Requested metric identifiers.
          items:
            $ref: '#/components/schemas/PullRequestMetricID'
          type: array
        date_from:
          description: Date from when to start measuring the metrics.
          format: date
          type: string
        date_to:
          description: Date up to which to measure the metrics.
          format: date
          type: string
        timezone:
          description: Local time zone offset in minutes, used to adjust `date_from`
            and `date_to`.
          type: integer
        granularities:
          items:
            $ref: '#/components/schemas/Granularity'
          type: array
        account:
          description: Session account ID.
          type: integer
      required:
      - account
      - date_from
      - date_to
      - for
      - granularities
      - metrics
      type: object
    CalculatedPullRequestMetricsItem:
      additionalProperties: false
      description: Series of calculated metrics for a specific set of repositories
        and developers.
      example:
        values:
        - date: 2020-01-23
          values:
          - 0.8008282
          - 0.8008282
          confidence_mins:
          - 0.5
          - 0.5
          confidence_maxs:
          - 1.0
          - 1.0
          confidence_scores:
          - 75
          - 75
        - date: 2020-01-24
          values:
          - 0.8008282
          - 0.8008282
          confidence_mins:
          - 0.5
          - 0.5
          confidence_maxs:
          - 1.0
          - 1.0
          confidence_scores:
          - 75
          - 75
        for:
          repositories:
          - github.com/athenianco/athenian-webapp
          - github.com/athenianco/athenian-api
          developers:
          - github.com/vmarkovtsev
          - github.com/dpordomingo
        granularity: day
      properties:
        for:
          $ref: '#/components/schemas/ForSet'
        granularity:
          $ref: '#/components/schemas/Granularity'
        values:
          items:
            $ref: '#/components/schemas/CalculatedPullRequestMetricValues'
          type: array
      required:
      - for
      - values
      type: object
    CalculatedPullRequestMetrics:
      additionalProperties: false
      description: The dates start from `date_from` and end earlier or equal to `date_to`.
      example:
        metrics:
        - pr-lead-time
        - pr-wip-time
        date_from: 2020-01-23
        date_to: 2020-01-24
        granularities:
        - day
        calculated:
        - values:
          - date: 2020-01-23
            values:
            - 0.8008282
            - 0.8008282
            confidence_mins:
            - 0.5
            - 0.5
            confidence_maxs:
            - 1.0
            - 1.0
            confidence_scores:
            - 75
            - 75
          - date: 2020-01-24
            values:
            - 0.8008282
            - 0.8008282
            confidence_mins:
            - 0.5
            - 0.5
            confidence_maxs:
            - 1.0
            - 1.0
            confidence_scores:
            - 75
            - 75
          for:
            developers:
            - github.com/vmarkovtsev
            - github.com/dpordomingo
            repositories:
            - github.com/athenianco/athenian-webapp
            - github.com/athenianco/athenian-api
        - values:
          - date: 2020-01-23
            values:
            - 0.8008282
            - 0.8008282
            confidence_mins:
            - 0.5
            - 0.5
            confidence_maxs:
            - 1.0
            - 1.0
            confidence_scores:
            - 75
            - 75
          - date: 2020-01-24
            values:
            - 0.8008282
            - 0.8008282
            confidence_mins:
            - 0.5
            - 0.5
            confidence_maxs:
            - 1.0
            - 1.0
            confidence_scores:
            - 75
            - 75
          for:
            developers:
            - github.com/vmarkovtsev
            - github.com/dpordomingo
            repositories:
            - github.com/athenianco/athenian-webapp
            - github.com/athenianco/athenian-api
      properties:
        calculated:
          description: Values of the requested metrics through time.
          items:
            $ref: '#/components/schemas/CalculatedPullRequestMetricsItem'
          type: array
        metrics:
          description: Repeats `PullRequestMetricsRequest.metrics`.
          items:
            $ref: '#/components/schemas/PullRequestMetricID'
          type: array
        date_from:
          description: Repeats `PullRequestMetricsRequest.date_from`.
          format: date
          type: string
        date_to:
          description: Repeats `PullRequestMetricsRequest.date_to`.
          format: date
          type: string
        timezone:
          description: Repeats `PullRequestMetricsRequest.timezone`.
          type: integer
        granularities:
          items:
            $ref: '#/components/schemas/Granularity'
          type: array
      required:
      - calculated
      - date_from
      - date_to
      - granularities
      - metrics
      type: object
    CalculatedPullRequestMetricValues:
      additionalProperties: false
      example:
        date: 2020-01-23
        values:
        - 0.8008282
        - 0.8008282
        confidence_mins:
        - 0.5
        - 0.5
        confidence_maxs:
        - 1.0
        - 1.0
        confidence_scores:
        - 75
        - 75
      properties:
        date:
          description: Where you should relate the metric value to on the time axis.
          format: date
          type: string
        values:
          description: Calculated metric values in the same order as `metrics`.
          items:
# {% if False %}
            allOf:
# {% else %}{{ "\n" }}            oneOf:{% endif %}
            - type: integer
            - format: float
              type: number
            - type: string
          type: array
        confidence_mins:
          description: Confidence interval @ p=0.8, minimum. The same order as `metrics`.
            It is optional because there can be exact metrics like "count open PRs
            per month".
          items:
# {% if False %}
            allOf:
# {% else %}{{ "\n" }}            oneOf:{% endif %}
            - type: integer
            - format: float
              type: number
            - type: string
          type: array
        confidence_maxs:
          description: Confidence interval @ p=0.8, maximum. The same order as `metrics`.
            It is optional because there can be exact metrics like "count open PRs
            per month".
          items:
# {% if False %}
            allOf:
# {% else %}{{ "\n" }}            oneOf:{% endif %}
            - type: integer
            - format: float
              type: number
            - type: string
          type: array
        confidence_scores:
          description: Confidence score from 0 (no idea) to 100 (very confident).
            The same order as `metrics`.
          items:
            type: integer
          type: array
      required:
      - date
      - values
      type: object
    GenericFilterRequest:
      additionalProperties: false
      description: PR filters for `/filter/contributors`, `/filter/repositories`,
        `/filter/releases`.
      example:
        account: 1
        date_from: 2020-01-23
        date_to: 2020-05-23
        in:
        - '{1}'
      properties:
        account:
          description: Session account ID.
          type: integer
        date_from:
          description: Updates must be later than or equal to this date. An update
            is any action that influences the stage assignment.
          format: date
          type: string
        date_to:
          description: Updates must be earlier than or equal to this date. An update
            is any action that influences the stage assignment.
          format: date
          type: string
        timezone:
          description: Local time zone offset in minutes, used to adjust `date_from`
            and `date_to`.
          type: integer
        in:
          $ref: '#/components/schemas/RepositorySet'
      required:
      - account
      - date_from
      - date_to
      type: object
    FilterPullRequestsRequest:
      additionalProperties: false
      description: Filters for `/filter/pull_requests`. Empty `properties` passes
        through all PRs matched by the other filters.
      example:
        account: 1
        date_from: 2020-01-23
        date_to: 2020-05-23
        in:
        - '{1}'
        properties:
        - wip
        with:
          author:
          - github.com/vmarkovtsev
      properties:
        account:
          description: Session account ID.
          type: integer
        date_from:
          description: PRs must be updated later than or equal to this date.
          format: date
          type: string
        date_to:
          description: PRs must be updated earlier than or equal to this date.
          format: date
          type: string
        timezone:
          description: Local time zone offset in minutes, used to adjust `date_from`
            and `date_to`.
          type: integer
        in:
          $ref: '#/components/schemas/RepositorySet'
        properties:
          items:
            $ref: '#/components/schemas/PullRequestProperty'
          type: array
        with:
          $ref: '#/components/schemas/PullRequestWith'
      required:
      - account
      - date_from
      - date_to
      - in
      type: object
    PullRequestProperty:
      description: |-
        PR's modelled lifecycle stage or various events that happened between `time_from` and `time_to`.
        * `wip`: PRs in Work In Progress stage - that is, not yet reviewed or merged.
        * `created`: opened PRs. Note: they were opened in the given time window.
        * `commit_happened`: PRs with a new commit pushed. Note: the commits were pushed in the given time window.
        * `review_request_happened`: PRs where the author requested a review. Note: the review was requested in the given time window.
        * `reviewing`: PRs in Review stage - that is, a review was requested or at least one review happened, but not approved yet.
        * `review_happened`: PRs with new review. Note: they were reviewed in the given time window.
        * `approve_happened`: PRs with new review approvals. Note: they were approved in the given time window.
        * `changes_request_happened`: PRs with new review rejections. Note: they were rejected in the given time window.
        * `merging`: PRs in Merge stage - that is, already reviewed but not yet merged.
        * `merge_happened`: merged PRs. Note: they were merged in the given time window.
        * `releasing`: PRs in Release stage - that is, already merged but not yet released.
        * `release_happened`: released PRs. Note: they were released in the given time window.
        * `done`: either released or otherwise closed PRs - "afterlife".
      enum:
      - wip
      - created
      - commit_happened
      - review_request_happened
      - reviewing
      - review_happened
      - approve_happened
      - changes_request_happened
      - merging
      - merge_happened
      - releasing
      - release_happened
      - done
      example: wip
      type: string
    PullRequestSet:
      additionalProperties: false
      description: List of pull requests together with the participant profile pictures.
      example:
        include:
          users:
            key:
              avatar: https://avatars0.githubusercontent.com/u/60340680?v=4
        data:
        - repository: github.com/src-d/go-git
          number: 1152
          title: 'Fix an edge case when fetching remotes with unrelated incomplete
            history. Fixes #1151'
          size_added: 37
          size_removed: 1
          files_changed: 2
          created: 2019-05-17T01:14:00Z
          updated: 2019-09-18T10:49:00Z
          properties:
          - wip
          stage_timings:
            wip: 2000s
          participants:
          - id: github.com/NonLogicalDev
            status: author
          - id: github.com/mcuadros
            status: commenter
      properties:
        include:
          $ref: '#/components/schemas/IncludedNativeUsers'
        data:
          description: List of matched pull requests.
          items:
            $ref: '#/components/schemas/PullRequest'
          type: array
      required:
      - data
      - include
      type: object
    IncludedNativeUser:
      additionalProperties: false
      description: User traits such as the avatar URL.
      example:
        avatar: https://avatars0.githubusercontent.com/u/60340680?v=4
      properties:
        avatar:
          format: url
          type: string
      required:
      - avatar
      type: object
    IncludedNativeUsers:
      additionalProperties: false
      example:
        users:
          github.com/gkwillie:
            avatar: https://avatars0.githubusercontent.com/u/60340680?v=4
      properties:
        users:
          additionalProperties:
            $ref: '#/components/schemas/IncludedNativeUser'
          description: Mapping user native (e.g., GitHub) login ID -> user details.
            The users are mentioned in the PRs from "PullRequestSet.data" or in the
            commits from "FilterCommitsRequest.data".
          type: object
      required:
      - users
      type: object
    PullRequest:
      additionalProperties: false
      description: Details of a pull request. All the attributes, stats and events
        correspond to "today", not `date_to`, *except for the PR stages `wip`, `reviewing`,
        `merging`, `releasing`*, which correspond to `date_to`.
      example:
        # https://github.com/src-d/go-git/pull/1152
        repository: github.com/src-d/go-git
        number: 1152
        title: 'Fix an edge case when fetching remotes with unrelated incomplete history.
          Fixes #1151'
        size_added: 37
        size_removed: 1
        files_changed: 2
        created: 2019-05-17T01:14:00Z
        updated: 2019-09-18T10:49:00Z
        comments: 1
        commits: 2
        properties:
        - wip
        stage_timings:
          wip: 2000s
        participants:
        - id: github.com/NonLogicalDev
          status: author
        - id: github.com/mcuadros
          status: commenter
      properties:
        repository:
          description: PR is/was open in this repository.
          type: string
        number:
          description: PR number.
          type: integer
        title:
          description: Title of the PR.
          type: string
        size_added:
          description: Overall number of lines added.
          type: integer
        size_removed:
          description: Overall number of lines removed.
          type: integer
        files_changed:
          description: Number of files changed in this PR.
          type: integer
        created:
          description: When this PR was created.
          format: date-time
          type: string
        updated:
          description: When this PR was last updated.
          format: date-time
          type: string
        closed:
          description: When this PR was last closed.
          format: date-time
          type: string
        comments:
          description: Number of *regular* (not review) comments in this PR.
          type: integer
        commits:
          description: Number of commits in this PR.
          type: integer
        review_requested:
          description: When was the last time the author of this PR requested a review.
          format: date-time
          type: string
        approved:
          description: When this PR was approved.
          format: date-time
          type: string
        review_comments:
          description: |-
            Number of review comments this PR received. A review comment is left at
            a specific line in a specific file. In other words: review summaries are
            *not* considered review comments; refer to `reviews`. Comments by the PR
            author are considered as `comments`, not as `review_comments`.
          type: integer
        reviews:
          description: Number of times this PR was reviewed. Reviews by the PR author
            are not taken into account.
          type: integer
        merged:
          description: When this PR was merged.
          format: date-time
          type: string
        released:
          description: When this PR was released.
          format: date-time
          type: string
        release_url:
          description: URL of the earliest release that includes this merged PR.
          format: url
          type: string
        stage_timings:
          $ref: '#/components/schemas/StageTimings'
        properties:
          description: List of the PR properties triggered in the given time window.
            There may be extra properties that were not originally requested.
          items:
            $ref: '#/components/schemas/PullRequestProperty'
          type: array
        participants:
          description: List of developers related to this PR, always including the
            author.
          items:
            $ref: '#/components/schemas/PullRequestParticipant'
          type: array
      required:
      - comments
      - commits
      - created
      - files_changed
      - number
      - participants
      - properties
      - repository
      - size_added
      - size_removed
      - stage_timings
      - title
      - updated
      type: object
    StageTimings:
      additionalProperties: false
      description: Time spent by the PR in each pipeline stage.
      example:
        wip: 120s
      properties:
        wip:
          type: string
        review:
          type: string
        merge:
          type: string
        release:
          type: string
      type: object
    PullRequestParticipant:
      additionalProperties: false
      description: Developer and their role in the PR.
      properties:
        id:
          description: Person identifier.
          example: github.com/vmarkovtsev
          type: string
        status:
          items:
            enum:
            - author
            - reviewer
            - commit_author
            - commit_committer
            - commenter
            - merger
            - releaser
            type: string
          type: array
      required:
      - id
      - status
      type: object
    PullRequestWith:
      additionalProperties: false
      description: |-
        Triage PRs by various developer participation. The aggregation is `OR` between
        the participation groups and `OR` within each group. For example, if our request is
        ```
        {"author": ["github.com/vmarkovtsev"], "reviewer": ["github.com/gkwillie", "github.com/mcuadros"]}
        ```
        then the matched PRs will have **@vmarkovtsev** as the author or either
        **@gkwillie** or **@mcuadros** as the reviewers.
      example:
        author:
        - github.com/vmarkovtsev
      properties:
        author:
          $ref: '#/components/schemas/DeveloperSet'
        reviewer:
          $ref: '#/components/schemas/DeveloperSet'
        commit_author:
          $ref: '#/components/schemas/DeveloperSet'
        commit_committer:
          $ref: '#/components/schemas/DeveloperSet'
        commenter:
          $ref: '#/components/schemas/DeveloperSet'
        merger:
          $ref: '#/components/schemas/DeveloperSet'
        releaser:
          $ref: '#/components/schemas/DeveloperSet'
      type: object
    FilterCommitsRequest:
      additionalProperties: false
      description: Filter for listing commits.
      example:
        account: 1
        date_from: 2020-01-23
        date_to: 2020-05-23
        in:
        - '{1}'
        property: bypassing_prs
      properties:
        account:
          description: Session account ID.
          type: integer
        date_from:
          description: Commits must be made later than or equal to this date.
          format: date
          type: string
        date_to:
          description: Commits must be made earlier than or equal to this date.
          format: date
          type: string
        timezone:
          description: Local time zone offset in minutes, used to adjust `date_from`
            and `date_to`.
          type: integer
        in:
          $ref: '#/components/schemas/RepositorySet'
        with_author:
          $ref: '#/components/schemas/DeveloperSet'
        with_committer:
          $ref: '#/components/schemas/DeveloperSet'
        property:
          description: |-
            Main trait of the commits - the core of the filter.
            * no_pr_merges: select all the commits but PR merges by noreply@github.com
            * bypassing_prs: select commits that were pushed without creating a PR
          enum:
          - no_pr_merges
          - bypassing_prs
          type: string
      required:
      - account
      - date_from
      - date_to
      - in
      - property
      type: object
    CommitsList:
      additionalProperties: false
      description: List of commits metadata and related user details.
      example:
        include:
          users:
            github.com/gkwillie:
              avatar: https://avatars0.githubusercontent.com/u/60340680?v=4
        data:
        - repository: github.com/athenianco/athenian-api
          hash: 79f0bccb856b35ef08ec93da2ff5585da4d2e50e
          author:
            login: github.com/gkwillie
            name: Groundskeeper Willie
            email: bot@athenian.co
            timestamp: 2020-02-25T14:27:21Z
            timezone: 1.0
          committer:
            login: github.com/gkwillie
            name: Groundskeeper Willie
            email: bot@athenian.co
            timestamp: 2020-02-25T14:27:21Z
            timezone: 1.0
          message: 'Bump version: 0.0.42 → 0.0.43'
          size_added: 1
          size_removed: 1
          files_changed: 1
        - repository: github.com/athenianco/athenian-api
          hash: 0d13a3e021fe4219915ba97ea07e465e429a621f
          author:
            login: github.com/gkwillie
            name: Groundskeeper Willie
            email: bot@athenian.co
            timestamp: 2020-03-20T10:06:49Z
            timezone: 1.0
          committer:
            login: github.com/gkwillie
            name: Groundskeeper Willie
            email: bot@athenian.co
            timestamp: 2020-03-20T10:06:49Z
            timezone: 1.0
          message: 'Bump version: 0.0.78 → 0.0.79'
          size_added: 1
          size_removed: 1
          files_changed: 1
      properties:
        data:
          items:
            $ref: '#/components/schemas/Commit'
          type: array
        include:
          $ref: '#/components/schemas/IncludedNativeUsers'
      required:
      - data
      - include
      type: object
    Commit:
      additionalProperties: false
      description: Information about a commit.
      example:
        repository: github.com/athenianco/athenian-api
        hash: 79f0bccb856b35ef08ec93da2ff5585da4d2e50e
        author:
          login: github.com/gkwillie
          name: Groundskeeper Willie
          email: bot@athenian.co
          timestamp: 2020-02-25T14:27:21Z
          timezone: 1.0
        committer:
          login: github.com/gkwillie
          name: Groundskeeper Willie
          email: bot@athenian.co
          timestamp: 2020-02-25T14:27:21Z
          timezone: 1.0
        message: 'Bump version: 0.0.42 → 0.0.43'
        size_added: 1
        size_removed: 1
        files_changed: 1
      properties:
        repository:
          $ref: '#/components/schemas/RepositoryID'
        hash:
          description: Git commit hash.
          type: string
        author:
          $ref: '#/components/schemas/CommitSignature'
        committer:
          $ref: '#/components/schemas/CommitSignature'
        message:
          description: Commit message.
          type: string
        size_added:
          description: Overall number of lines added.
          type: integer
        size_removed:
          description: Overall number of lines removed.
          type: integer
        files_changed:
          description: Number of files changed in this PR.
          type: integer
      required:
      - author
      - committer
      - files_changed
      - hash
      - message
      - repository
      - size_added
      - size_removed
      type: object
    CommitSignature:
      additionalProperties: false
      description: Git commit signature. It is guaranteed that `login` and/or `name`&`email`
        are present.
      example:
        login: github.com/vmarkovtsev
        name: Vadim Markovtsev
        email: vadim@athenian.co
        timestamp: 2020-02-25T14:27:21Z
        timezone: 1.0
      properties:
        login:
          $ref: '#/components/schemas/DeveloperID'
        name:
          description: Git signature name.
          type: string
        email:
          description: Git signature email.
          type: string
        timestamp:
          description: When the corresponding action happened in UTC.
          format: date-time
          type: string
        timezone:
          description: Timezone offset of the action timestamp (in hours).
          format: float
          type: number
      required:
      - timestamp
      - timezone
      type: object
    CodeFilter:
      additionalProperties: false
      description: Filter for revealing code bypassing PRs.
      example:
        account: 1
        date_from: 2020-01-01
        date_to: 2020-03-01
        granularity: day
        in:
        - '{1}'
        with_author:
        - github.com/vmarkovtsev
      properties:
        account:
          description: Session account ID.
          type: integer
        date_from:
          description: Commits must be made later than or equal to this date.
          format: date
          type: string
        date_to:
          description: Commits must be made earlier than or equal to this date.
          format: date
          type: string
        timezone:
          description: Local time zone offset in minutes, used to adjust `date_from`
            and `date_to`.
          type: integer
        in:
          $ref: '#/components/schemas/RepositorySet'
        with_author:
          $ref: '#/components/schemas/DeveloperSet'
        with_committer:
          $ref: '#/components/schemas/DeveloperSet'
        granularity:
          $ref: '#/components/schemas/Granularity'
      required:
      - account
      - date_from
      - date_to
      - granularity
      - in
      type: object
    MeasuredCodeBypassingPRs:
      description: Statistics about code pushed outside of pull requests.
      example:
      - date: 2020-01-23
        bypassed_commits: 1
        bypassed_lines: 20
        total_commits: 2
        total_lines: 50
      - date: 2020-01-24
        bypassed_commits: 2
        bypassed_lines: 30
        total_commits: 3
        total_lines: 60
      items:
        $ref: '#/components/schemas/CodeBypassingPRsMeasurement'
      type: array
    CodeBypassingPRsMeasurement:
      additionalProperties: false
      description: Statistics about code pushed outside of pull requests in a certain
        time interval.
      example:
        date: 2020-01-23
        bypassed_commits: 1
        bypassed_lines: 20
        total_commits: 2
        total_lines: 50
      properties:
        date:
          description: Commits were pushed beginning with this date. They were not
            pushed later than +granularity.
          format: date
          type: string
        bypassed_commits:
          description: Number of commits that bypassed PRs in the time interval.
          type: integer
        bypassed_lines:
          description: Number of changed (added + removed) lines that bypassed PRs
            in the time interval.
          type: integer
        total_commits:
          description: Overall number of commits in the time interval.
          type: integer
        total_lines:
          description: Overall number of changed (added + removed) lines in the time
            interval.
          type: integer
      required:
      - bypassed_commits
      - bypassed_lines
      - date
      - total_commits
      - total_lines
      type: object
    DeveloperMetricsRequest:
      additionalProperties: false
      description: Request for calculating metrics on top of developer activities.
      example:
        for:
        - repositories:
          - github.com/athenianco/athenian-webapp
          - github.com/athenianco/athenian-api
          developers:
          - github.com/vmarkovtsev
          - github.com/dpordomingo
        - repositories:
          - github.com/athenianco/athenian-webapp
          - github.com/athenianco/athenian-api
          developers:
          - github.com/vmarkovtsev
          - github.com/dpordomingo
        metrics:
        - dev-reviews
        - dev-prs-created
        - dev-pr-comments
        date_from: 2019-10-23
        date_to: 2020-05-23
        account: 1
      properties:
        for:
          description: Sets of developers and repositories to calculate the metrics
            for.
          items:
            $ref: '#/components/schemas/ForSet'
          type: array
        metrics:
          description: Requested metric identifiers.
          items:
            $ref: '#/components/schemas/DeveloperMetricID'
          type: array
        date_from:
          description: Date from when to start measuring the metrics.
          format: date
          type: string
        date_to:
          description: Date up to which to measure the metrics.
          format: date
          type: string
        timezone:
          description: Local time zone offset in minutes, used to adjust `date_from`
            and `date_to`.
          type: integer
        account:
          description: Session account ID.
          type: integer
      required:
      - account
      - date_from
      - date_to
      - for
      - metrics
      type: object
    DeveloperMetricID:
      description: |-
        Currently supported developer metric types.
        * `dev-commits-pushed`: how many commits were pushed.
        * `dev-lines-changed`: how many lines were either inserted or removed in the pushed commits.
        * `dev-prs-created`: how many PRs were created.
        * `dev-prs-reviewed`: how many *distinct* PRs were reviewed (approved, rejected or neutral).
        * `dev-prs-merged`: how many PRs were merged by this developer. This is *not* how many authored PRs were merged!
        * `dev-releases`: how many releases were authored by this developer.
        * `dev-reviews`: how many reviews were submitted. One PR may have several reviews by the same developer! This value equals to the sum of `dev-review-approvals`, `dev-review-rejections` and `dev-review-neutrals`.
        * `dev-review-approvals`: how many approvals this developer submitted. One PR may have several approvals by the same developer!
        * `dev-review-rejections`: how many rejections this developer submitted. One PR may have several rejections by the same developer!
        * `dev-review-neutrals`: how many neutral ("comment") reviews this developer submitted. One PR may have several neutral reviews by the same developer!
        * `dev-pr-comments`: how many comments (both regular and review) this developer posted.
        * `dev-regular-pr-comments`: how many regular comments (not review suggestions!) this developer posted.
        * `dev-review-pr-comments`: how many review suggestions (summaries are not considered!) this developer posted.
      enum:
      - dev-commits-pushed
      - dev-lines-changed
      - dev-prs-created
      - dev-prs-reviewed
      - dev-prs-merged
      - dev-releases
      - dev-reviews
      - dev-review-approvals
      - dev-review-rejections
      - dev-review-neutrals
      - dev-pr-comments
      - dev-regular-pr-comments
      - dev-review-pr-comments
      example: dev-prs-created
      type: string
    CalculatedDeveloperMetrics:
      additionalProperties: false
      description: Response from /metrics/developers - calculated metrics over developer
        activities.
      example:
        date_from: 2020-01-23
        date_to: 2020-01-24
        metrics:
        - dev-prs-created
        - dev-reviews
        calculated:
        - values:
          - - 20
            - 5
          - - 10
            - 100
          for:
            repositories:
            - github.com/athenianco/athenian-webapp
            - github.com/athenianco/athenian-api
            developers:
            - github.com/vmarkovtsev
            - github.com/dpordomingo
        - values:
          - - 20
            - 5
          - - 10
            - 100
          for:
            repositories:
            - github.com/athenianco/athenian-webapp
            - github.com/athenianco/athenian-api
            developers:
            - github.com/vmarkovtsev
            - github.com/dpordomingo
      properties:
        calculated:
          description: Values of the requested metrics on the given time interval.
          items:
            $ref: '#/components/schemas/CalculatedDeveloperMetricsItem'
          type: array
        date_from:
          description: Repeats `DeveloperMetricsRequest.date_from`.
          format: date
          type: string
        date_to:
          description: Repeats `DeveloperMetricsRequest.date_to`.
          format: date
          type: string
        timezone:
          description: Repeats `DeveloperMetricsRequest.timezone`.
          type: integer
        metrics:
          description: Repeats `DeveloperMetricsRequest.metrics`.
          items:
            $ref: '#/components/schemas/DeveloperMetricID'
          type: array
      required:
      - calculated
      - date_from
      - date_to
      - metrics
      type: object
    CalculatedDeveloperMetricsItem:
      additionalProperties: false
      description: Measured developer metrics for each `DeveloperMetricsRequest.for`.
      example:
        values:
        - - 20
          - 5
        - - 10
          - 100
        for:
          repositories:
          - github.com/athenianco/athenian-webapp
          - github.com/athenianco/athenian-api
          developers:
          - github.com/vmarkovtsev
          - github.com/dpordomingo
      properties:
        for:
          $ref: '#/components/schemas/ForSet'
        values:
          description: The sequence matches `CalculatedDeveloperMetricsItem.for.developers`.
          items:
            $ref: '#/components/schemas/CalculatedDeveloperMetricValues'
          type: array
      required:
      - for
      - values
      type: object
    CalculatedDeveloperMetricValues:
      description: Calculated metrics for the developer at the corresponding place
        in `CalculatedDeveloperMetricsItem.for.developers`. The sequence of values
        matches `CalculatedDeveloperMetrics.metrics`.
      items:
# {% if False %}
        allOf:
# {% else %}{{ "\n" }}        oneOf:{% endif %}
        - type: integer
        - format: float
          type: number
        - type: string
      type: array
    DeveloperSummaries:
      description: List of developer activity statistics and profile details.
      example:
      - avatar: https://avatars0.githubusercontent.com/u/60340680?v=4
        login: github.com/gkwillie
        name: Groundskeeper Willie
        updates:
          prs: 4
          commit_author: 10
          commit_committer: 10
          commenter: 3
      items:
        $ref: '#/components/schemas/DeveloperSummary'
      type: array
    DeveloperSummary:
      additionalProperties: false
      description: Developer activity statistics and profile details.
      example:
        avatar: https://avatars0.githubusercontent.com/u/60340680?v=4
        login: github.com/gkwillie
        name: Groundskeeper Willie
        updates:
          prs: 4
          commit_author: 10
          commit_committer: 10
          commenter: 3
      properties:
        login:
          description: Developer's login name.
          example: github.com/gkwillie
          type: string
        name:
          description: Developer's full name.
          example: Groundskeeper Willie
          type: string
        avatar:
          description: Developer's avatar URL.
          example: https://avatars0.githubusercontent.com/u/60340680?v=4
          format: url
          type: string
        updates:
          $ref: '#/components/schemas/DeveloperUpdates'
      required:
      - avatar
      - login
      - name
      - updates
      type: object
    DeveloperUpdates:
      additionalProperties: false
      description: 'Various developer contributions statistics over the specified
        time period. Note: any of these properties may be missing if there was no
        such activity.'
      example:
        prs: 4
        commit_author: 10
        commit_committer: 10
        merger: 3
      properties:
        prs:
          description: 'How many PRs authored by this developer updated. Note: this
            is not the same as the number of PRs this developer opened. Note: the
            update origin is not necessarily this developer.'
          type: integer
        reviewer:
          description: 'How many reviews this developer submitted. Note: this is not
            the same as the number of unique PRs reviewed.'
          type: integer
        commit_author:
          description: How many commits this developer authored.
          type: integer
        commit_committer:
          description: How many commits this developer pushed.
          type: integer
        commenter:
          description: 'How many regular PR comments this developer left. Note: issues
            are not taken into account, only the PRs.'
          type: integer
        releaser:
          description: How many releases this developer created.
          type: integer
      type: object
    FilteredReleases:
      additionalProperties: false
      description: Response of `/filter/releases` - releases metadata and user details.
      example:
        include:
          users:
            github.com/gkwillie:
              avatar: https://avatars0.githubusercontent.com/u/60340680?v=4
        data:
        - added_lines: 1000
          commits: 20
          deleted_lines: 200
          name: v0.0.93
          published: 2020-03-25T10:57:00Z
          publisher: github.com/vmarkovtsev
          publisher_avatar: https://avatars0.githubusercontent.com/u/60340680?v=4
          repository: github.com/athenianco/athenian-api
          url: https://github.com/athenianco/athenian-api/releases/tag/v0.0.93
        - added_lines: 1000
          commits: 20
          deleted_lines: 200
          name: v0.0.93
          published: 2020-03-25T10:57:00Z
          publisher: github.com/vmarkovtsev
          publisher_avatar: https://avatars0.githubusercontent.com/u/60340680?v=4
          repository: github.com/athenianco/athenian-api
          url: https://github.com/athenianco/athenian-api/releases/tag/v0.0.93
      properties:
        include:
          $ref: '#/components/schemas/IncludedNativeUsers'
        data:
          $ref: '#/components/schemas/FilteredReleasesItems'
      type: object
    FilteredReleasesItems:
      description: List of release metadata.
      items:
        $ref: '#/components/schemas/FilteredRelease'
      type: array
    FilteredRelease:
      additionalProperties: false
      description: Various information about a repository release.
      example:
        added_lines: 1000
        commits: 20
        deleted_lines: 200
        name: v0.0.93
        published: 2020-03-25T10:57:00Z
        publisher: github.com/vmarkovtsev
        publisher_avatar: https://avatars0.githubusercontent.com/u/60340680?v=4
        repository: github.com/athenianco/athenian-api
        url: https://github.com/athenianco/athenian-api/releases/tag/v0.0.93
      properties:
        name:
          description: Title of the release.
          type: string
        repository:
          description: Name of the repository where the release exists.
          type: string
        url:
          description: Link to the release.
          format: url
          type: string
        published:
          description: When the release was created.
          format: date-time
          type: string
        age:
          description: Time since the previous release /\d+s/.
          type: string
        added_lines:
          description: Cumulative number of lines inserted since the previous release.
          type: integer
        deleted_lines:
          description: Cumulative number of lines removed since the previous release.
          type: integer
        commits:
          description: Number of commits since the previous release.
          type: integer
        publisher:
          description: Login of the person who created the release.
          type: string
        commit_authors:
          description: List of released commit authors' logins.
          items:
            $ref: '#/components/schemas/DeveloperID'
          type: array
      required:
      - added_lines
      - age
      - commit_authors
      - commits
      - deleted_lines
      - name
      - published
      - publisher
      - repository
      - url
      type: object
    ReleaseMatchRequest:
      additionalProperties: false
      description: Release matching rule setting.
      example:
        account: 1
        repositories:
        - github.com/athenianco/athenian-webapp
        - github.com/athenianco/athenian-api
        match: branch
        branches: master
        tags: .*
      properties:
        account:
          type: integer
        repositories:
          $ref: '#/components/schemas/RepositorySet'
        branches:
          description: 'Regular expression to match branch names. Reference: https://www.postgresql.org/docs/current/functions-matching.html#FUNCTIONS-SIMILARTO-REGEXP'
          type: string
        tags:
          description: 'Regular expression to match tag names. Reference: https://www.postgresql.org/docs/current/functions-matching.html#FUNCTIONS-SIMILARTO-REGEXP'
          type: string
        match:
          $ref: '#/components/schemas/ReleaseMatchStrategy'
      required:
      - account
      - match
      - repositories
      type: object
    ReleaseMatchStrategy:
      description: |-
        Release workflow choice: how we should detect releases.
        * `branch`: merges to certain branches are considered releases and nothing else.
        * `tag`: tags with certain name patterns are considered releases and nothing else.
        * `tag_or_branch`: follow "tag"; if the repository does not have tags, fallback to "branch".
      enum:
      - branch
      - tag
      - tag_or_branch
      type: string
    ReleaseMatchSettings:
      additionalProperties:
        $ref: '#/components/schemas/ReleaseMatchSetting'
      description: Mapping from repository names to their release match settings.
      type: object
    ReleaseMatchSetting:
      additionalProperties: false
      description: Release matching setting for a specific repository.
      example:
        branches: '{{ "{{default}}" }}'
        default_branch: master
        tags: .*
        match: tag_or_branch
      properties:
        branches:
          description: 'Regular expression to match branch names. Reference: https://www.postgresql.org/docs/current/functions-matching.html#FUNCTIONS-SIMILARTO-REGEXP'
          type: string
        tags:
          description: 'Regular expression to match tag names. Reference: https://www.postgresql.org/docs/current/functions-matching.html#FUNCTIONS-SIMILARTO-REGEXP'
          type: string
        match:
          $ref: '#/components/schemas/ReleaseMatchStrategy'
        default_branch:
          description: Name of the default branch of this repository.
          type: string
      required:
      - branches
      - default_branch
      - match
      - tags
      type: object
    AccountUserChangeRequest:
      additionalProperties: false
      description: Request to change an account member's status.
      example:
        user: github|60340680
        account: 1
        status: regular
      properties:
        account:
          description: Account ID.
          type: integer
        user:
          description: Account member ID.
          type: string
        status:
          description: Account membership role.
          enum:
          - regular
          - admin
          - banished
          type: string
      required:
      - account
      - status
      - user
      type: object
    Versions:
      additionalProperties: false
      example:
        api: v0.2.10
      properties:
        api:
          type: string
      required:
      - api
      type: object
