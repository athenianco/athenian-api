# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from athenian.api.models.base_model_ import Model
from athenian.api.models.developer_set import DeveloperSet
from athenian.api.models.repository_set import RepositorySet
from athenian.api import util


class ForSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, developers: DeveloperSet=None, repositories: RepositorySet=None):
        """ForSet - a model defined in OpenAPI

        :param developers: The developers of this ForSet.
        :param repositories: The repositories of this ForSet.
        """
        self.openapi_types = {
            'developers': DeveloperSet,
            'repositories': RepositorySet
        }

        self.attribute_map = {
            'developers': 'developers',
            'repositories': 'repositories'
        }

        self._developers = developers
        self._repositories = repositories

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ForSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ForSet of this ForSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def developers(self):
        """Gets the developers of this ForSet.


        :return: The developers of this ForSet.
        :rtype: DeveloperSet
        """
        return self._developers

    @developers.setter
    def developers(self, developers):
        """Sets the developers of this ForSet.


        :param developers: The developers of this ForSet.
        :type developers: DeveloperSet
        """
        if developers is None:
            raise ValueError("Invalid value for `developers`, must not be `None`")

        self._developers = developers

    @property
    def repositories(self):
        """Gets the repositories of this ForSet.


        :return: The repositories of this ForSet.
        :rtype: RepositorySet
        """
        return self._repositories

    @repositories.setter
    def repositories(self, repositories):
        """Sets the repositories of this ForSet.


        :param repositories: The repositories of this ForSet.
        :type repositories: RepositorySet
        """
        if repositories is None:
            raise ValueError("Invalid value for `repositories`, must not be `None`")

        self._repositories = repositories
