from typing import List, Optional

from athenian.api.models.web.base_model_ import Model


class ForSetDevelopers(Model):
    """This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."""

    openapi_types = {
        "repositories": List[str],
        "developers": List[str],
        "labels": List[str],
    }

    attribute_map = {
        "repositories": "repositories",
        "developers": "developers",
        "labels": "labels",
    }

    def __init__(
        self,
        repositories: Optional[List[str]] = None,
        developers: Optional[List[str]] = None,
        labels: Optional[List[str]] = None,
    ):
        """ForSet - a model defined in OpenAPI

        :param repositories: The repositories of this ForSetDevelopers.
        :param developers: The developers of this ForSetDevelopers.
        :param labels: The labels of this ForSetDevelopers.
        """
        self._repositories = repositories
        self._developers = developers
        self._labels = labels

    @property
    def repositories(self) -> List[str]:
        """Gets the repositories of this ForSetDevelopers.

        :return: The repositories of this ForSetDevelopers.
        """
        return self._repositories

    @repositories.setter
    def repositories(self, repositories: List[str]):
        """Sets the repositories of this ForSetDevelopers.

        :param repositories: The repositories of this ForSetDevelopers.
        """
        if repositories is None:
            raise ValueError("Invalid value for `repositories`, must not be `None`")

        self._repositories = repositories

    @property
    def developers(self) -> List[str]:
        """Gets the developers of this ForSetDevelopers.

        :return: The developers of this ForSetDevelopers.
        """
        return self._developers

    @developers.setter
    def developers(self, developers: List[str]):
        """Sets the developers of this ForSetDevelopers.

        :param developers: The developers of this ForSetDevelopers.
        """
        self._developers = developers

    @property
    def labels(self) -> List[str]:
        """Gets the labels of this ForSetDevelopers.

        :return: The labels of this ForSetDevelopers.
        """
        return self._labels

    @labels.setter
    def labels(self, labels: List[str]):
        """Sets the labels of this ForSetDevelopers.

        :param labels: The labels of this ForSetDevelopers.
        """
        self._labels = labels
