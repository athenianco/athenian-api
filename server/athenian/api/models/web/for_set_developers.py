from typing import List, Optional

from athenian.api.models.web.base_model_ import Model


class ForSetDevelopers(Model):
    """This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."""

    openapi_types = {
        "repositories": List[str],
        "developers": List[str],
        "labels_include": List[str],
    }

    attribute_map = {
        "repositories": "repositories",
        "developers": "developers",
        "labels_include": "labels_include",
    }

    __slots__ = ["_" + k for k in openapi_types]

    def __init__(
        self,
        repositories: Optional[List[str]] = None,
        developers: Optional[List[str]] = None,
        labels_include: Optional[List[str]] = None,
    ):
        """ForSet - a model defined in OpenAPI

        :param repositories: The repositories of this ForSetDevelopers.
        :param developers: The developers of this ForSetDevelopers.
        :param labels_include: The labels_include of this ForSetDevelopers.
        """
        self._repositories = repositories
        self._developers = developers
        self._labels_include = labels_include

    @property
    def repositories(self) -> List[str]:
        """Gets the repositories of this ForSetDevelopers.

        :return: The repositories of this ForSetDevelopers.
        """
        return self._repositories

    @repositories.setter
    def repositories(self, repositories: List[str]):
        """Sets the repositories of this ForSetDevelopers.

        :param repositories: The repositories of this ForSetDevelopers.
        """
        if repositories is None:
            raise ValueError("Invalid value for `repositories`, must not be `None`")

        self._repositories = repositories

    @property
    def developers(self) -> List[str]:
        """Gets the developers of this ForSetDevelopers.

        :return: The developers of this ForSetDevelopers.
        """
        return self._developers

    @developers.setter
    def developers(self, developers: List[str]):
        """Sets the developers of this ForSetDevelopers.

        :param developers: The developers of this ForSetDevelopers.
        """
        if developers is None:
            raise ValueError("Invalid value for `developers`, must not be `None`")

        self._developers = developers

    @property
    def labels_include(self) -> List[str]:
        """Gets the labels_include of this ForSetDevelopers.

        :return: The labels_include of this ForSetDevelopers.
        """
        return self._labels_include

    @labels_include.setter
    def labels_include(self, labels_include: List[str]):
        """Sets the labels_include of this ForSetDevelopers.

        :param labels_include: The labels_include of this ForSetDevelopers.
        """
        self._labels_include = labels_include
