# coding: utf-8

from http import HTTPStatus
from typing import Optional

from athenian.api import serialization
from athenian.api.models.web.base_model_ import Model


class GenericError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(
        self,
        type: str,
        title: Optional[str] = None,
        status: Optional[int] = None,
        detail: Optional[str] = None,
        instance: Optional[str] = None,
    ):
        """GenericError - a model defined in OpenAPI

        :param type: The type of this GenericError.
        :param title: The title of this GenericError.
        :param status: The status of this GenericError.
        :param detail: The detail of this GenericError.
        :param instance: The instance of this GenericError.
        """
        self.openapi_types = {
            "type": str,
            "title": str,
            "status": int,
            "detail": str,
            "instance": str,
        }

        self.attribute_map = {
            "type": "type",
            "title": "title",
            "status": "status",
            "detail": "detail",
            "instance": "instance",
        }

        self._type = type
        self._title = title
        self._status = status
        self._detail = detail
        self._instance = instance

    @classmethod
    def from_dict(cls, dikt: dict) -> "GenericError":
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenericError of this GenericError.
        """
        return serialization.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this GenericError.

        URI reference that identifies the problem type (RFC 7807).

        :return: The type of this GenericError.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GenericError.

        URI reference that identifies the problem type (RFC 7807).

        :param type: The type of this GenericError.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def title(self):
        """Gets the title of this GenericError.

        Short, human-readable summary of the problem type.

        :return: The title of this GenericError.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GenericError.

        Short, human-readable summary of the problem type.

        :param title: The title of this GenericError.
        :type title: str
        """
        self._title = title

    @property
    def status(self):
        """Gets the status of this GenericError.

        Duplicated HTTP status code.

        :return: The status of this GenericError.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GenericError.

        Duplicated HTTP status code.

        :param status: The status of this GenericError.
        :type status: int
        """
        self._status = status

    @property
    def detail(self):
        """Gets the detail of this GenericError.

        Human-readable explanation specific to this occurrence of the problem.

        :return: The detail of this GenericError.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this GenericError.

        Human-readable explanation specific to this occurrence of the problem.

        :param detail: The detail of this GenericError.
        :type detail: str
        """
        self._detail = detail

    @property
    def instance(self):
        """Gets the instance of this GenericError.

        URI reference that identifies the specific occurrence of the problem.

        :return: The instance of this GenericError.
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this GenericError.

        URI reference that identifies the specific occurrence of the problem.

        :param instance: The instance of this GenericError.
        :type instance: str
        """
        self._instance = instance


class NotFoundError(GenericError):
    """HTTP 404."""

    def __init__(self, detail: Optional[str] = None):
        """Initialize a new instance of NotFoundError.

        :param detail: The details about this error.
        """
        super().__init__(type="/errors/NotFoundError", title=HTTPStatus.NOT_FOUND.phrase,
                         status=404, detail=detail)


class ForbiddenError(GenericError):
    """HTTP 403."""

    def __init__(self, detail: Optional[str] = None):
        """Initialize a new instance of ForbiddenError.

        :param detail: The details about this error.
        """
        super().__init__(type="/errors/ForbiddenError", title=HTTPStatus.FORBIDDEN.phrase,
                         status=403, detail=detail)
