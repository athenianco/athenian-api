from typing import List, Optional

from athenian.api.models.web.base_model_ import AllOf, Model
from athenian.api.models.web.for_set_common import CommonPullRequestFilters, ForSetLines
from athenian.api.models.web.pull_request_with import PullRequestWith


class _ForSetPullRequests(Model, sealed=False):
    """This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."""

    openapi_types = {
        "with_": Optional[PullRequestWith],
        "withgroups": Optional[List[PullRequestWith]],
        "environments": Optional[List[str]],
    }

    attribute_map = {
        "with_": "with",
        "withgroups": "withgroups",
        "environments": "environments",
    }

    def __init__(
        self,
        with_: Optional[PullRequestWith] = None,
        withgroups: Optional[List[PullRequestWith]] = None,
        environments: Optional[List[str]] = None,
    ):
        """ForSetPullRequests - a model defined in OpenAPI

        :param with_: The with of this ForSetPullRequests.
        :param withgroups: The withgroups of this ForSetPullRequests.
        :param environments: The environments of this ForSetPullRequests.
        """
        self._with_ = with_
        self._withgroups = withgroups
        self._environments = environments

    @property
    def with_(self) -> Optional[PullRequestWith]:
        """Gets the with_ of this PullRequest.

        List of developers related to this PR.

        :return: The with_ of this PullRequest.
        """
        return self._with_

    @with_.setter
    def with_(self, with_: Optional[PullRequestWith]):
        """Sets the with_ of this PullRequest.

        List of developers related to this PR.

        :param with_: The with_ of this PullRequest.
        """
        self._with_ = with_

    @property
    def withgroups(self) -> Optional[List[PullRequestWith]]:
        """Gets the withgroups of this PullRequest.

        List of developers related to this PR.

        :return: The withgroups of this PullRequest.
        """
        return self._withgroups

    @withgroups.setter
    def withgroups(self, withgroups: Optional[List[PullRequestWith]]):
        """Sets the withgroups of this PullRequest.

        List of developers related to this PR.

        :param withgroups: The withgroups of this PullRequest.
        """
        self._withgroups = withgroups

    @property
    def environments(self) -> Optional[List[int]]:
        """Gets the environments of this ForSetPullRequests.

        :return: The environments of this ForSetPullRequests.
        """
        return self._environments

    @environments.setter
    def environments(self, environments: Optional[List[int]]):
        """Sets the environments of this ForSetPullRequests.

        :param environments: The environments of this ForSetPullRequests.
        """
        self._environments = environments

    def select_withgroup(self, index: int) -> "ForSetPullRequests":
        """Change `with` to point at the specified `withgroup`."""
        fs = self.copy()
        if self.withgroups is None:
            if index > 0:
                raise IndexError("%d is out of range (no withgroups)" % index)
            return fs
        if index >= len(self.withgroups):
            raise IndexError("%d is out of range (max is %d)" % (index, len(self.withgroups) - 1))
        fs.with_ = self.withgroups[index]
        fs.withgroups = None
        return fs


ForSetPullRequests = AllOf(
    _ForSetPullRequests,
    ForSetLines,
    CommonPullRequestFilters,
    name="ForSetPullRequests",
    module=__name__,
)
