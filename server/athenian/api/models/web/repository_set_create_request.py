from typing import List, Optional

from athenian.api import serialization
from athenian.api.models.web.base_model_ import Model


class RepositorySetCreateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, team: Optional[int] = None, items: Optional[List[str]] = None):
        """RepositorySetCreateRequest - a model defined in OpenAPI

        :param team: The team of this RepositorySetCreateRequest.
        :param items: The items of this RepositorySetCreateRequest.
        """
        self.openapi_types = {"team": int, "items": List[str]}

        self.attribute_map = {"team": "team", "items": "items"}

        self._team = team
        self._items = items

    @classmethod
    def from_dict(cls, dikt: dict) -> "RepositorySetCreateRequest":
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepositorySetCreateRequest of this RepositorySetCreateRequest.
        """
        return serialization.deserialize_model(dikt, cls)

    @property
    def team(self) -> int:
        """Gets the team of this RepositorySetCreateRequest.

        Team identifier. That team will own the created repository set. The user must be an admin of the team.

        :return: The team of this RepositorySetCreateRequest.
        """
        return self._team

    @team.setter
    def team(self, team: int):
        """Sets the team of this RepositorySetCreateRequest.

        Team identifier. That team will own the created repository set. The user must be an admin of the team.

        :param team: The team of this RepositorySetCreateRequest.
        """
        if team is None:
            raise ValueError("Invalid value for `team`, must not be `None`")

        self._team = team

    @property
    def items(self) -> List[str]:
        """Gets the items of this RepositorySetCreateRequest.

        :return: The items of this RepositorySetCreateRequest.
        """
        return self._items

    @items.setter
    def items(self, items: List[str]):
        """Sets the items of this RepositorySetCreateRequest.

        :param items: The items of this RepositorySetCreateRequest.
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items
