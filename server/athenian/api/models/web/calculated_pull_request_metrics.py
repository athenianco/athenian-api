from datetime import date
from typing import List

from athenian.api.models.web.base_model_ import Model
from athenian.api.models.web.calculated_pull_request_metrics_item import \
    CalculatedPullRequestMetricsItem
from athenian.api.models.web.granularity import Granularity
from athenian.api.models.web.pull_request_metric_id import PullRequestMetricID


class CalculatedPullRequestMetrics(Model):
    """This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."""

    def __init__(
        self,
        calculated: List[CalculatedPullRequestMetricsItem] = None,
        metrics: List[PullRequestMetricID] = None,
        date_from: date = None,
        date_to: date = None,
        granularity: Granularity = None,
    ):
        """CalculatedPullRequestMetrics - a model defined in OpenAPI

        :param calculated: The calculated of this CalculatedPullRequestMetrics.
        :param metrics: The metrics of this CalculatedPullRequestMetrics.
        :param date_from: The date_from of this CalculatedPullRequestMetrics.
        :param date_to: The date_to of this CalculatedPullRequestMetrics.
        :param granularity: The granularity of this CalculatedPullRequestMetrics.
        """
        self.openapi_types = {
            "calculated": List[CalculatedPullRequestMetricsItem],
            "metrics": List[PullRequestMetricID],
            "date_from": date,
            "date_to": date,
            "granularity": Granularity,
        }

        self.attribute_map = {
            "calculated": "calculated",
            "metrics": "metrics",
            "date_from": "date_from",
            "date_to": "date_to",
            "granularity": "granularity",
        }

        self._calculated = calculated
        self._metrics = metrics
        self._date_from = date_from
        self._date_to = date_to
        self._granularity = granularity

    @property
    def calculated(self):
        """Gets the calculated of this CalculatedPullRequestMetrics.

        The values of the requested metrics through time.

        :return: The calculated of this CalculatedPullRequestMetrics.
        :rtype: List[CalculatedPullRequestMetricsItem]
        """
        return self._calculated

    @calculated.setter
    def calculated(self, calculated):
        """Sets the calculated of this CalculatedPullRequestMetrics.

        The values of the requested metrics through time.

        :param calculated: The calculated of this CalculatedPullRequestMetrics.
        :type calculated: List[CalculatedPullRequestMetricsItem]
        """
        if calculated is None:
            raise ValueError("Invalid value for `calculated`, must not be `None`")

        self._calculated = calculated

    @property
    def metrics(self):
        """Gets the metrics of this CalculatedPullRequestMetrics.

        Repeats `PullRequestMetricsRequest.metrics`.

        :return: The metrics of this CalculatedPullRequestMetrics.
        :rtype: List[PullRequestMetricID]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this CalculatedPullRequestMetrics.

        Repeats `PullRequestMetricsRequest.metrics`.

        :param metrics: The metrics of this CalculatedPullRequestMetrics.
        :type metrics: List[PullRequestMetricID]
        """
        if metrics is None:
            raise ValueError("Invalid value for `metrics`, must not be `None`")

        self._metrics = metrics

    @property
    def date_from(self):
        """Gets the date_from of this CalculatedPullRequestMetrics.

        Repeats `PullRequestMetricsRequest.date_from`.

        :return: The date_from of this CalculatedPullRequestMetrics.
        :rtype: date
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this CalculatedPullRequestMetrics.

        Repeats `PullRequestMetricsRequest.date_from`.

        :param date_from: The date_from of this CalculatedPullRequestMetrics.
        :type date_from: date
        """
        if date_from is None:
            raise ValueError("Invalid value for `date_from`, must not be `None`")

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this CalculatedPullRequestMetrics.

        Repeats `PullRequestMetricsRequest.date_to`.

        :return: The date_to of this CalculatedPullRequestMetrics.
        :rtype: date
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this CalculatedPullRequestMetrics.

        Repeats `PullRequestMetricsRequest.date_to`.

        :param date_to: The date_to of this CalculatedPullRequestMetrics.
        :type date_to: date
        """
        if date_to is None:
            raise ValueError("Invalid value for `date_to`, must not be `None`")

        self._date_to = date_to

    @property
    def granularity(self):
        """Gets the granularity of this CalculatedPullRequestMetrics.

        :return: The granularity of this CalculatedPullRequestMetrics.
        :rtype: Granularity
        """
        return self._granularity

    @granularity.setter
    def granularity(self, granularity):
        """Sets the granularity of this CalculatedPullRequestMetrics.

        :param granularity: The granularity of this CalculatedPullRequestMetrics.
        :type granularity: Granularity
        """
        if granularity is None:
            raise ValueError("Invalid value for `granularity`, must not be `None`")

        self._granularity = granularity
