from datetime import date
from typing import List, Optional

from athenian.api.models.web.base_model_ import Model
from athenian.api.models.web.calculated_pull_request_metrics_item import (
    CalculatedPullRequestMetricsItem,
)
from athenian.api.models.web.pull_request_metric_id import PullRequestMetricID


class CalculatedPullRequestMetrics(Model):
    """This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."""

    calculated: List[CalculatedPullRequestMetricsItem]
    metrics: List[str]
    date_from: date
    date_to: date
    timezone: int
    granularities: List[str]
    quantiles: Optional[List[float]]
    exclude_inactive: bool

    def validate_metrics(self, metrics: list[str]) -> list[str]:
        """Sets the metrics of this CalculatedPullRequestMetrics.

        Repeats `PullRequestMetricsRequest.metrics`.

        :param metrics: The metrics of this CalculatedPullRequestMetrics.
        """
        if metrics is None:
            raise ValueError("Invalid value for `metrics`, must not be `None`")
        for m in metrics:
            if m not in PullRequestMetricID:
                raise ValueError(
                    'Invalid value for `metrics`: "%s" must be one of %s' % m,
                    list(PullRequestMetricID),
                )

        return metrics

    def validate_timezone(self, timezone: int) -> int:
        """Sets the timezone of this CalculatedPullRequestMetrics.

        Repeats `PullRequestMetricsRequest.timezone`.

        :param timezone: The timezone of this CalculatedPullRequestMetrics.
        """
        if timezone is not None and timezone > 720:
            raise ValueError(
                "Invalid value for `timezone`, must be a value less than or equal to `720`",
            )
        if timezone is not None and timezone < -720:
            raise ValueError(
                "Invalid value for `timezone`, must be a value greater than or equal to `-720`",
            )

        return timezone
