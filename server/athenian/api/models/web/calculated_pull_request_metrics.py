from datetime import date
from typing import List, Optional

from athenian.api.models.web.base_model_ import Model
from athenian.api.models.web.calculated_pull_request_metrics_item import \
    CalculatedPullRequestMetricsItem
from athenian.api.models.web.granularity import Granularity
from athenian.api.models.web.pull_request_metric_id import PullRequestMetricID


class CalculatedPullRequestMetrics(Model):
    """This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)."""

    def __init__(
        self,
        calculated: Optional[List[CalculatedPullRequestMetricsItem]] = None,
        metrics: Optional[List[str]] = None,
        date_from: Optional[date] = None,
        date_to: Optional[date] = None,
        granularities: Optional[List[str]] = None,
    ):
        """CalculatedPullRequestMetrics - a model defined in OpenAPI

        :param calculated: The calculated of this CalculatedPullRequestMetrics.
        :param metrics: The metrics of this CalculatedPullRequestMetrics.
        :param date_from: The date_from of this CalculatedPullRequestMetrics.
        :param date_to: The date_to of this CalculatedPullRequestMetrics.
        :param granularities: The granularities of this CalculatedPullRequestMetrics.
        """
        self.openapi_types = {
            "calculated": List[CalculatedPullRequestMetricsItem],
            "metrics": List[str],
            "date_from": date,
            "date_to": date,
            "granularities": List[str],
        }

        self.attribute_map = {
            "calculated": "calculated",
            "metrics": "metrics",
            "date_from": "date_from",
            "date_to": "date_to",
            "granularities": "granularities",
        }

        self._calculated = calculated
        self._metrics = metrics
        self._date_from = date_from
        self._date_to = date_to
        self._granularities = granularities

    @property
    def calculated(self) -> List[CalculatedPullRequestMetricsItem]:
        """Gets the calculated of this CalculatedPullRequestMetrics.

        The values of the requested metrics through time.

        :return: The calculated of this CalculatedPullRequestMetrics.
        """
        return self._calculated

    @calculated.setter
    def calculated(self, calculated: List[CalculatedPullRequestMetricsItem]):
        """Sets the calculated of this CalculatedPullRequestMetrics.

        The values of the requested metrics through time.

        :param calculated: The calculated of this CalculatedPullRequestMetrics.
        """
        if calculated is None:
            raise ValueError("Invalid value for `calculated`, must not be `None`")

        self._calculated = calculated

    @property
    def metrics(self) -> List[str]:
        """Gets the metrics of this CalculatedPullRequestMetrics.

        Repeats `PullRequestMetricsRequest.metrics`.

        :return: The metrics of this CalculatedPullRequestMetrics.
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics: List[str]):
        """Sets the metrics of this CalculatedPullRequestMetrics.

        Repeats `PullRequestMetricsRequest.metrics`.

        :param metrics: The metrics of this CalculatedPullRequestMetrics.
        """
        if metrics is None:
            raise ValueError("Invalid value for `metrics`, must not be `None`")
        for m in metrics:
            if m not in PullRequestMetricID:
                raise ValueError('Invalid value for `metrics`: "%s" must be one of %s' %
                                 m, list(PullRequestMetricID))

        self._metrics = metrics

    @property
    def date_from(self) -> date:
        """Gets the date_from of this CalculatedPullRequestMetrics.

        Repeats `PullRequestMetricsRequest.date_from`.

        :return: The date_from of this CalculatedPullRequestMetrics.
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from: date):
        """Sets the date_from of this CalculatedPullRequestMetrics.

        Repeats `PullRequestMetricsRequest.date_from`.

        :param date_from: The date_from of this CalculatedPullRequestMetrics.
        """
        if date_from is None:
            raise ValueError("Invalid value for `date_from`, must not be `None`")

        self._date_from = date_from

    @property
    def date_to(self) -> date:
        """Gets the date_to of this CalculatedPullRequestMetrics.

        Repeats `PullRequestMetricsRequest.date_to`.

        :return: The date_to of this CalculatedPullRequestMetrics.
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to: date):
        """Sets the date_to of this CalculatedPullRequestMetrics.

        Repeats `PullRequestMetricsRequest.date_to`.

        :param date_to: The date_to of this CalculatedPullRequestMetrics.
        """
        if date_to is None:
            raise ValueError("Invalid value for `date_to`, must not be `None`")

        self._date_to = date_to

    @property
    def granularities(self) -> List[str]:
        """Gets the granularities of this CalculatedPullRequestMetrics.

        :return: The granularities of this CalculatedPullRequestMetrics.
        """
        return self._granularities

    @granularities.setter
    def granularities(self, granularities: List[str]):
        """Sets the granularities of this CalculatedPullRequestMetrics.

        :param granularities: The granularities of this CalculatedPullRequestMetrics.
        """
        if granularities is None:
            raise ValueError("Invalid value for `granularities`, must not be `None`")
        for i, g in enumerate(granularities):
            if not Granularity.format.match(g):
                raise ValueError(
                    'Invalid value for `granularity[%d]`: "%s"` does not match /%s/' %
                    i, g, Granularity.format.pattern)

        self._granularities = granularities
