from typing import List, Optional

from athenian.api.models.web.base_model_ import Model
from athenian.api.models.web.jira_epic import JIRAEpic
from athenian.api.models.web.jira_label import JIRALabel


class FoundJIRAStuff(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    openapi_types = {
        "epics": List[JIRAEpic],
        "labels": List[JIRALabel],
        "issue_types": List[str],
    }
    attribute_map = {
        "epics": "epics",
        "labels": "labels",
        "issue_types": "issue_types",
    }

    def __init__(self,
                 epics: Optional[List[JIRAEpic]] = None,
                 labels: Optional[List[JIRALabel]] = None,
                 issue_types: Optional[List[str]] = None):
        """FoundJIRAStuff - a model defined in OpenAPI

        :param epics: The epics of this FoundJIRAStuff.
        :param labels: The labels of this FoundJIRAStuff.
        :param issue_types: The issue_types of this FoundJIRAStuff.
        """
        self._epics = epics
        self._labels = labels
        self._issue_types = issue_types

    @property
    def epics(self) -> List[JIRAEpic]:
        """Gets the epics of this FoundJIRAStuff.

        :return: The epics of this FoundJIRAStuff.
        """
        return self._epics

    @epics.setter
    def epics(self, epics: List[JIRAEpic]):
        """Sets the epics of this FoundJIRAStuff.

        :param epics: The epics of this FoundJIRAStuff.
        """
        if epics is None:
            raise ValueError("Invalid value for `epics`, must not be `None`")

        self._epics = epics

    @property
    def labels(self) -> List[JIRALabel]:
        """Gets the labels of this FoundJIRAStuff.

        :return: The labels of this FoundJIRAStuff.
        """
        return self._labels

    @labels.setter
    def labels(self, labels: List[JIRALabel]):
        """Sets the labels of this FoundJIRAStuff.

        :param labels: The labels of this FoundJIRAStuff.
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")

        self._labels = labels

    @property
    def issue_types(self) -> List[str]:
        """Gets the issue_types of this FoundJIRAStuff.

        :return: The issue_types of this FoundJIRAStuff.
        """
        return self._issue_types

    @issue_types.setter
    def issue_types(self, issue_types: List[str]):
        """Sets the issue_types of this

        :param issue_types: The issue_types of this FoundJIRAStuff.
        """
        if issue_types is None:
            raise ValueError("Invalid value for `issue_types`, must not be `None`")

        self._issue_types = issue_types
