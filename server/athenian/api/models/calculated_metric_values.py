# coding: utf-8

from datetime import date
from typing import List

from athenian.api import util
from athenian.api.models.base_model_ import Model


class CalculatedMetricValues(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date: date = None, values: List[float] = None):
        """CalculatedMetricValues - a model defined in OpenAPI

        :param date: The date of this CalculatedMetricValues.
        :param values: The values of this CalculatedMetricValues.
        """
        self.openapi_types = {"date": date, "values": List[float]}

        self.attribute_map = {"date": "date", "values": "values"}

        self._date = date
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> "CalculatedMetricValues":
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CalculatedMetric_values of this CalculatedMetricValues.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date(self):
        """Gets the date of this CalculatedMetricValues.

        Where you should relate the metric value to on the time axis.

        :return: The date of this CalculatedMetricValues.
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this CalculatedMetricValues.

        Where you should relate the metric value to on the time axis.

        :param date: The date of this CalculatedMetricValues.
        :type date: date
        """
        if date is None:
            raise ValueError("Invalid value for `date`, must not be `None`")

        self._date = date

    @property
    def values(self):
        """Gets the values of this CalculatedMetricValues.

        The same order as `metrics`.

        :return: The values of this CalculatedMetricValues.
        :rtype: List[float]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this CalculatedMetricValues.

        The same order as `metrics`.

        :param values: The values of this CalculatedMetricValues.
        :type values: List[float]
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")

        self._values = values
